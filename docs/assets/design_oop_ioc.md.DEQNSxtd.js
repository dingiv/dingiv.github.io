import{_ as i,c as s,o as a,a1 as n}from"./chunks/framework.CceCxLSN.js";const g=JSON.parse('{"title":"IOC (JS篇)","description":"","frontmatter":{},"headers":[],"relativePath":"design/oop/ioc.md","filePath":"design/oop/ioc.md"}'),l={name:"design/oop/ioc.md"},t=n(`<h1 id="ioc-js篇" tabindex="-1">IOC (JS篇) <a class="header-anchor" href="#ioc-js篇" aria-label="Permalink to &quot;IOC (JS篇)&quot;">​</a></h1><p>在js中使用IOC，一般使用的是inversify这个库，inversify是js中比较流行的ioc库，它借鉴了java中的spring，但是更轻量级，并且使用装饰器语法，使得代码更简洁。</p><p>inversify的ioc容器是container，它是一个单例对象，可以通过container.get(id)来获取实例对象，id是bind的时候指定的id。</p><h2 id="bind语法" tabindex="-1">bind语法 <a class="header-anchor" href="#bind语法" aria-label="Permalink to &quot;bind语法&quot;">​</a></h2><p>声明哪些id值可以从容器中获得实例对象，id可以是string或者是Symbol类型。（相较于spring，spring的id是唯一的，而inversify的id可以重复，并且给绑定添加了额外的限定，一个是name，一个是tag，并且可以增加条件绑定，只有满足条件的时候才会绑定成功）</p><ul><li>container.bind(id).to(构造方法/类名)</li><li>container.bind(id).toDynamicValue(工厂方法)</li><li>container.bind(id).toConstantValue(实例) // 绑定实例</li><li>container.bind(id).toFactory(工厂方法) // 与二相似，不过该工厂方法可以接受一个参数为context</li><li>container.bind(id).to(类名)</li><li>container.bind(id).to(类名)</li><li>container.bind(id).toProvider(工厂方法) // 与二相似，不过该工厂方法可以接受一个参数为context</li><li>container.bind(id).toSelf() // 绑定自身</li><li>container.bind(id).toConstructor(构造方法) // 绑定构造方法</li><li>container.bind(id).toService(类名) // 绑定服务</li></ul><p>bind条件</p><ul><li>when</li><li>whenTargetNamed</li><li>whenTargetTagged</li></ul><p>bind装饰器</p><h2 id="get语法" tabindex="-1">get语法 <a class="header-anchor" href="#get语法" aria-label="Permalink to &quot;get语法&quot;">​</a></h2><p>注入装饰器</p><p>生命周期hooks</p><h2 id="angular中的ioc" tabindex="-1">Angular中的IOC <a class="header-anchor" href="#angular中的ioc" aria-label="Permalink to &quot;Angular中的IOC&quot;">​</a></h2><p>在angular中，ioc容器是Injector，它是一个单例对象，可以通过Injector.get(id)来获取实例对象，id是provide的时候指定的id。</p><p>provide语法</p><ul><li>provide(id, {useClass: 类名})</li><li>provide(id, {useFactory: 工厂方法})</li><li>provide(id, {useValue: 实例})</li><li>provide(id, {useExisting: id})</li><li>provide(id, {useClass: 类名, deps: [id1, id2]})</li></ul><p>inject语法</p><ul><li>@Inject(id)</li></ul><h3 id="angular中的依赖注入" tabindex="-1">Angular中的依赖注入 <a class="header-anchor" href="#angular中的依赖注入" aria-label="Permalink to &quot;Angular中的依赖注入&quot;">​</a></h3><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 实例</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">@</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Injectable</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  providedIn: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;root&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> UserService</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  constructor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">private</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> http</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> HttpClient</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {}</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  getUser</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.http.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;/user&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 使用</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">@</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Injectable</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  providedIn: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;root&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> AppComponent</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  constructor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">private</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> userService</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> UserService</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {}</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  ngOnInit</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.userService.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getUser</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">subscribe</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">user</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(user);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    });</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h2 id="nestjs" tabindex="-1">Nestjs <a class="header-anchor" href="#nestjs" aria-label="Permalink to &quot;Nestjs&quot;">​</a></h2>`,21),e=[t];function h(p,k,r,d,o,E){return a(),s("div",null,e)}const y=i(l,[["render",h]]);export{g as __pageData,y as default};
