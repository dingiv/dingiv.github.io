import{_ as t,c as a,o as i,a1 as o}from"./chunks/framework.CceCxLSN.js";const m=JSON.parse('{"title":"css布局方式","description":"","frontmatter":{},"headers":[],"relativePath":"front/css/layout/index.md","filePath":"front/css/layout/index.md"}'),l={name:"front/css/layout/index.md"},n=o('<h1 id="css布局方式" tabindex="-1">css布局方式 <a class="header-anchor" href="#css布局方式" aria-label="Permalink to &quot;css布局方式&quot;">​</a></h1><p>常见的布局方式有</p><ol><li><strong>流式布局</strong>。将盒子看做是流水线线性排布，分为两种类型块级和行级，行级又分为行内块级和行内级。块级在竖向排布，行级在同一行内排布。流式布局的规整性，在同一个盒子内部，其直属子代中，应当尽可能只有一种级别的排布。行内块样式的坑比较多，有<strong>行内块基线对齐、行内块间距、浮动塌陷</strong>等常见的开发问题。流式布局的行级、块级都属于是<strong>标准流</strong>，还有<strong>非标准流</strong>，用于完成一些特殊的需求。主要有： <ul><li><strong>浮动</strong>。用于文字环绕、自动换行、多行排布，段内定位等。浮动的初衷是用于图片和文字混排的需求，对标的word文档中的文字环绕的特性。但是，由于早期行内块布局的诸多奇怪行为，浮动便作为一个常用的hack手段。</li><li><strong>定位</strong>。分为相对、绝对、固定、粘性。可以实现不同的定位效果。使用时有子绝父相和z-index的限制。</li><li><strong>分栏</strong>。基于由浏览器实现的原生多栏结构，可以自动换列，从而达到如报纸般效果的分栏效果。流式布局的浮动流在横向排布，并在横向排满时自动换行，而分栏布局，可以将竖向再进行分列，当竖向流排布满时，实现自动转列的效果。该效果专门为行内元素设计，不要将子元素的display设置为block，尽量设置为inline或者inline-block，否则页面会有明显的卡顿。</li></ul></li><li><strong>弹性布局</strong>。CSS3新特性，功能强大，包含<strong>flex</strong>和<strong>grid</strong>，基于全新的布局理念，引入了主轴和交叉轴的概念，将元素看做一个富有弹性的盒子，可以在主轴方向进行伸缩。在进行定义时，我们不在关注元素的大小，而是更加关注子元素的“<strong>弹性</strong>”，通过规定盒子的弹性策略，基于该策略让盒子具有强大的自适应能力，并附加了一些额外的功能，如自定义轴、对齐、排序、换行等特性。</li><li><strong>响应式布局</strong>。可以直接与视口或者容器的宽度和高度进行挂钩，在不同的尺寸范围内加载不同的css规则，从而达到响应式的自适应能力。包括媒体查询和容器查询两个部分。响应式布局，可以依据容器的大小，动态地开启大批量的不同样式组。当用户的显示设备差异巨大的时候，可以用以更换大量和样式，使得同样的dom结构，也呈现出巨大的样式差异。</li></ol><h2 id="布局技巧" tabindex="-1">布局技巧 <a class="header-anchor" href="#布局技巧" aria-label="Permalink to &quot;布局技巧&quot;">​</a></h2><ul><li>竖向布局，使用默认的标准流块级流即可。不建议指定其子元素的高度值，转而通过子元素的line-height来进行定义，然后让父元素使用scroll隐藏多余的元素内容。留白时，块方向：父元素的上下padding，子元素的上下margin或者靠子元素的行高。行方向：行级父元素的左右padding。</li><li>横向布局，（1）标准流的行内流，适合文字，和满足可换行的需求场景，垂直居中对齐的要领是不规定行元素的高度，转而关注文字大小和行高，搞清楚vertical-align的意义，活用相对单位：%、em、rem、lh、ch和calc()和aspect-ratio。（2）flex，简单无脑。不要去设置行内流方向上行内元素的width</li><li>margin、padding使用。建议减少margin，margin的使用可以在流方向上随意使用，但在流的垂直方向上使用需要特别注意。使用时尽量对称使用，同时规定上下或者左右，如果涉及到不对称的地方，可以考虑使用空元素来进行操作。</li></ul><h2 id="前期设计模块考虑" tabindex="-1">前期设计模块考虑 <a class="header-anchor" href="#前期设计模块考虑" aria-label="Permalink to &quot;前期设计模块考虑&quot;">​</a></h2><ol><li>主题管理：布局和主题相分离，主题使用全局CSS变量来管理，布局样式使用局部样式定义；</li><li>焦点管理：所有的display不为none的表单元素+a+button，均可以被tab键盘进行导航，可以通过设置tabindex=-1来置为空，其他元素想要被focus可以添加tabindex=-1，或者想要被导航就设置tabindex=0；</li><li>快捷键管理：统一在冒泡阶段进行处理，使用统一的快捷键模块进行集中管理，然后在body元素上进行最后的汇总处理；</li><li>右键菜单管理：处理方式同快捷键处理；</li><li>拖动管理；</li><li>插件管理；</li></ol><h2 id="粘性布局" tabindex="-1">粘性布局 <a class="header-anchor" href="#粘性布局" aria-label="Permalink to &quot;粘性布局&quot;">​</a></h2>',8),r=[n];function s(e,c,d,g,h,_){return i(),a("div",null,r)}const p=t(l,[["render",s]]);export{m as __pageData,p as default};
