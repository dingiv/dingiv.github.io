import{_ as i,c as l,o,a1 as e}from"./chunks/framework.CceCxLSN.js";const f=JSON.parse('{"title":"io","description":"","frontmatter":{},"headers":[],"relativePath":"front/js/io.md","filePath":"front/js/io.md"}'),t={name:"front/js/io.md"},a=e('<h1 id="io" tabindex="-1">io <a class="header-anchor" href="#io" aria-label="Permalink to &quot;io&quot;">​</a></h1><p>在前端应用中，涉及的io对象主要有如下内容，在实际的使用中，这些API往往以命令式的代码进行操作，这与函数编程所使用的声明式编程风格不符，因此需要使用高级框架对其进行封装。同时，这些io操作一般会涉及异步操作，因此，为了让API变得优雅，必须使用响应式编程的思想来优化API风格，提高框架的使用体验。</p><ol><li>有持久化能力的Web API，例如： <ul><li>Cookies</li><li>SessionStorage</li><li>LocalStorage</li><li>Indexed DB</li><li>History API</li><li>Clipboard API</li><li>File API</li></ul></li><li>Web Worker API</li><li>Http和WebSockets 纯粹的手动请求还远远不能满足实际的开发需要，一些高级特性也需要支持 <ul><li>声明式编程风格</li><li>响应式能力、响应式数据封装</li><li>io抽象、数据预处理、校验、拼装、多请求封装</li><li>缓存、持久化</li><li>限流、防抖</li><li>Mock</li><li>请求拦截、重定向、逻辑代理</li><li>SSR支持</li><li>UI框架无关、IO目标无关或多重支持</li></ul></li></ol>',3),r=[a];function s(_,n,c,d,p,I){return o(),l("div",null,r)}const h=i(t,[["render",s]]);export{f as __pageData,h as default};
