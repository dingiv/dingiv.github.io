import{_ as a,c as l,o as i,a1 as e}from"./chunks/framework.CceCxLSN.js";const b=JSON.parse('{"title":"常见算法","description":"","frontmatter":{},"headers":[],"relativePath":"basic/algo/common.md","filePath":"basic/algo/common.md"}'),o={name:"basic/algo/common.md"},t=e('<h1 id="常见算法" tabindex="-1">常见算法 <a class="header-anchor" href="#常见算法" aria-label="Permalink to &quot;常见算法&quot;">​</a></h1><p>列出常见的算法，按照几个大的模块进行分类。</p><h2 id="排序算法" tabindex="-1">排序算法 <a class="header-anchor" href="#排序算法" aria-label="Permalink to &quot;排序算法&quot;">​</a></h2><p>排序算法可以是基于比较的，也可以是不基于比较的。</p><h3 id="基于比较" tabindex="-1">基于比较 <a class="header-anchor" href="#基于比较" aria-label="Permalink to &quot;基于比较&quot;">​</a></h3><ul><li>选择排序</li><li>插入排序</li><li>归并排序。采用分治思想进行分割式排序，将一个大的问题转化为一个个子问题，然后再将各个子问题统一解决。有自顶向下的递归法，也有自底向上的循环，可以在小的范围时转接其他排序进行小数组优化。优化的手段可以从这几个方面考虑：1、小数组转接；2、归并预判；3、原地归并</li><li>快速排序。使用分治思想，并进行大跨度交换，可以看做是插入排序和希尔排序的延续，同时又综合了归并排序的分治思想。优化的手段可以从这几个方面考虑：1、小数组转接；2、三取样决定分割数；3、三向分割，优化出现大部分的相同的数值作为分割数的情况。</li><li>堆排序。堆又可以称之为优先队列，可以在数组上构造出分支结构，可以看做是使用分支结构带来的优势，将极端的元素快速选出并放置至合适的位置。是一种基于堆的选择排序。</li></ul><h3 id="不基于比较" tabindex="-1">不基于比较 <a class="header-anchor" href="#不基于比较" aria-label="Permalink to &quot;不基于比较&quot;">​</a></h3><ul><li>计数排序。计数排序适用于元素值范围较小的数组。它通过计数数组记录每个元素的出现次数，再根据计数数组构建排序后的数组。</li><li>基数排序</li><li>桶排序</li></ul><h2 id="查找算法" tabindex="-1">查找算法 <a class="header-anchor" href="#查找算法" aria-label="Permalink to &quot;查找算法&quot;">​</a></h2><ul><li>二分查找</li><li>查找树。 <ul><li>AVL：空间复杂度高，代码量大</li><li>2-3树：代码量大</li><li>红黑树：代码精悍晦涩</li></ul></li><li>散列表 <ul><li>软缓存</li><li>防碰撞：拉链法、线性探测</li></ul></li></ul><h2 id="字符串匹配算法" tabindex="-1">字符串匹配算法 <a class="header-anchor" href="#字符串匹配算法" aria-label="Permalink to &quot;字符串匹配算法&quot;">​</a></h2><ul><li>朴素匹配。暴力迭代，比较长字符串中的每个位置处是否能够匹配子串。</li><li>KMP。用于在一个长字符串中寻找一个指定的字符串子串。</li><li>BMH。</li><li>Trie字典树</li><li>AC自动机</li><li>RK</li></ul><h2 id="加密算法" tabindex="-1">加密算法 <a class="header-anchor" href="#加密算法" aria-label="Permalink to &quot;加密算法&quot;">​</a></h2><ul><li>朴素加密。如：凯撒、base64</li><li>对称加密。AES</li><li>非对称加密。RSA</li><li>哈希加密。如：MD5、SHA1</li></ul><h2 id="压缩算法" tabindex="-1">压缩算法 <a class="header-anchor" href="#压缩算法" aria-label="Permalink to &quot;压缩算法&quot;">​</a></h2>',15),r=[t];function h(n,c,s,d,u,_){return i(),l("div",null,r)}const f=a(o,[["render",h]]);export{b as __pageData,f as default};
