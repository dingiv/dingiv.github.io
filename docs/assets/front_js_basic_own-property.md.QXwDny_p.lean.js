import{_ as a,c as t,a0 as s,o as r}from"./chunks/framework.CGHvQLJz.js";const i="/assets/own-p.BA_uTr85.png",b=JSON.parse('{"title":"属性的可枚举性和所有权","description":"","frontmatter":{},"headers":[],"relativePath":"front/js/basic/own-property.md","filePath":"front/js/basic/own-property.md"}'),n={name:"front/js/basic/own-property.md"};function l(o,e,p,c,d,h){return r(),t("div",null,e[0]||(e[0]=[s('<h1 id="属性的可枚举性和所有权" tabindex="-1">属性的可枚举性和所有权 <a class="header-anchor" href="#属性的可枚举性和所有权" aria-label="Permalink to &quot;属性的可枚举性和所有权&quot;">​</a></h1><p><img src="'+i+`" alt="alt text"></p><h2 id="own" tabindex="-1">Own <a class="header-anchor" href="#own" aria-label="Permalink to &quot;Own&quot;">​</a></h2><p>hasOwnProperty、Object.getOwnPropertyNames…… 凡是强调<strong>Own</strong>指的是在对象本身上定义的属性，而不是从原型链上继承而来的。</p><h2 id="name、symbol、" tabindex="-1">name、symbol、# <a class="header-anchor" href="#name、symbol、" aria-label="Permalink to &quot;name、symbol、#&quot;">​</a></h2><p>对象有三种属性，key类型为字符串的属性，key类型为symbol类型的，而完全私有的<code>#</code>开头的属性，只有谷歌浏览器的控制台能够访问，其他的方法访问不了 🐶</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Object.getOwnPropertyNames</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Object.getOwnPropertySymbols</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Object.getOwnPropertyDescriptors</span></span></code></pre></div><h2 id="enumerable" tabindex="-1">Enumerable <a class="header-anchor" href="#enumerable" aria-label="Permalink to &quot;Enumerable&quot;">​</a></h2><p>可枚举属性是指那些内部“可枚举”标志设置为true的属性，而平常我们在使用一些内置方法的时候，会默认将对象设置一些初始值，</p><ul><li>对于通过直接的赋值和属性初始化的属性，该标识值默认为即为 true；</li><li>对于通过 Object.defineProperty 等定义的属性，该标识值默认为false；</li><li>对于原型链上的方法默认为false；</li><li>Symbol类型的key值的属性，默认为false；</li></ul><ul><li><strong>可枚举的属性并且不是Symbol类型的key可以通过for...in循环进行遍历</strong></li></ul><h2 id="descriptor" tabindex="-1">Descriptor <a class="header-anchor" href="#descriptor" aria-label="Permalink to &quot;Descriptor&quot;">​</a></h2><p>用于描述一个JavaScript对象的某个key值所代表的属性的配置对象。</p><ul><li>value。该值表示该key值的属性的值。</li><li>get。该函数使用一个空的参数列表，以便有权对值执行访问时，获取属性值。参见 getter。可能是 undefined。</li><li>set。使用包含分配值的参数调用的函数。每当尝试更改指定属性时执行。参见 setter。可能是 undefined。</li><li>enumerable。一个布尔值，表示是否可以通过 for...in 循环来枚举属性。另请参阅枚举性和属性所有权，以了解枚举属性如何与其他函数和语法交互。</li><li>configurable</li></ul>`,14)]))}const m=a(n,[["render",l]]);export{b as __pageData,m as default};
