import{_ as l,c as a,a0 as e,o as t}from"./chunks/framework.CGHvQLJz.js";const u=JSON.parse('{"title":"计算机图形","description":"","frontmatter":{},"headers":[],"relativePath":"basic/graphic/index.md","filePath":"basic/graphic/index.md"}'),r={name:"basic/graphic/index.md"};function n(o,i,s,c,d,h){return t(),a("div",null,i[0]||(i[0]=[e('<h1 id="计算机图形" tabindex="-1">计算机图形 <a class="header-anchor" href="#计算机图形" aria-label="Permalink to &quot;计算机图形&quot;">​</a></h1><p>研究如何将三维的世界中的物体呈现在计算机屏幕上的科学。在普通的2D图像和3D图像之间，存在着非常巨大的原理性差异，2D图像的显示符合计算机屏幕的呈现方式，因为屏幕本来就是2D屏幕，呈现2D的平面图像数据非常直接，然而对于3D图像的呈现便不是那么的简单了。3D的复杂度非常高，3D图形的渲染包含了3个基本的要素，<strong>场景、屏幕和相机</strong>，通过控制3要素之间的关系，同时经过大量的处理，包括以下步骤，最终将图形呈现在计算机屏幕上。</p><ul><li>变换Transform</li><li>栅格化Rasterisation</li><li>着色Shading</li><li>材质Texture</li><li>光线追踪Tracing</li><li>仿真Emulation</li><li>粒子Particles</li><li>后处理效果AE</li></ul><h2 id="图形api" tabindex="-1">图形API <a class="header-anchor" href="#图形api" aria-label="Permalink to &quot;图形API&quot;">​</a></h2><p>随着图像处理的需求越来越多，质量要求越来越高，速度需求越来越快，GPU被发明出来，用以加速图形处理。为了能够调度这些GPU进行图形计算，需要学习相应的API。</p><ul><li>OpenGL：开源的通用API</li><li>DirectX/Direct3D：windows平台专用API</li><li>Vulkan：新一代通用API</li><li>WebGL：web平台API，基于OpenGL</li><li>OpenGL ES：在嵌入式设备上使用的图形API，基于OpenGL</li><li>Metal：苹果系统专用API</li></ul><h2 id="图形渲染引擎" tabindex="-1">图形渲染引擎 <a class="header-anchor" href="#图形渲染引擎" aria-label="Permalink to &quot;图形渲染引擎&quot;">​</a></h2><p>当我们兴致勃勃地开始去学习，图形API时，又会发现软件生态中一直存在的痛点，一个同样的技术，需要学习多个不同厂商的API，这无疑加大了程序员的学习负担，因此，我们往往会去学习上层框架，让框架帮我们隐藏底层细节，并获得一致性的开发体验和跨平台的能力。在图形编程当中，需要学习的上层框架就是渲染引擎或者游戏引擎，这些引擎提供了图形API的高层封装和有用的工具，可以极大地减轻我们的学习负担，提高开发效率。游戏引擎往往包含了一下套件：</p><ul><li>渲染引擎</li><li>物理引擎：用于模拟物理现象，如碰撞检测、重力、摩擦力等。</li><li>音频引擎：处理游戏中的声音效果和背景音乐。</li><li>脚本系统：允许开发者使用编程语言（如C#、Python、Lua等）编写游戏逻辑。</li><li>人工智能：提供NPC（非玩家角色）行为和决策的AI系统。</li><li>输入管理：处理来自键盘、鼠标、游戏手柄等设备的输入。</li><li>网络支持：管理网络连接和数据传输，用于多人游戏和在线功能。</li><li>场景管理：处理游戏场景的加载、管理和切换。</li><li>资源管理</li></ul><h2 id="游戏引擎" tabindex="-1">游戏引擎： <a class="header-anchor" href="#游戏引擎" aria-label="Permalink to &quot;游戏引擎：&quot;">​</a></h2><ul><li>Unity</li><li>Unreal</li><li>Godot</li></ul>',11)]))}const P=l(r,[["render",n]]);export{u as __pageData,P as default};
