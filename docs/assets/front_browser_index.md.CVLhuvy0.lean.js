import{_ as l,c as a,a0 as e,o}from"./chunks/framework.CGHvQLJz.js";const u=JSON.parse('{"title":"浏览器原理","description":"","frontmatter":{},"headers":[],"relativePath":"front/browser/index.md","filePath":"front/browser/index.md"}'),r={name:"front/browser/index.md"};function t(n,i,d,h,s,c){return o(),a("div",null,i[0]||(i[0]=[e('<h1 id="浏览器原理" tabindex="-1">浏览器原理 <a class="header-anchor" href="#浏览器原理" aria-label="Permalink to &quot;浏览器原理&quot;">​</a></h1><h2 id="浏览器工作原理" tabindex="-1">浏览器工作原理 <a class="header-anchor" href="#浏览器工作原理" aria-label="Permalink to &quot;浏览器工作原理&quot;">​</a></h2><h3 id="浏览器工作流程" tabindex="-1">浏览器工作流程 <a class="header-anchor" href="#浏览器工作流程" aria-label="Permalink to &quot;浏览器工作流程&quot;">​</a></h3><ol><li>用户输入</li><li>URL解析</li><li>DNS解析</li><li>TCP连接</li><li>发送HTTP请求</li><li>服务器处理请求</li><li>返回HTTP响应</li><li>浏览器解析HTML</li><li>浏览器渲染页面</li><li>关闭连接</li></ol><h3 id="浏览器渲染流程" tabindex="-1">浏览器渲染流程 <a class="header-anchor" href="#浏览器渲染流程" aria-label="Permalink to &quot;浏览器渲染流程&quot;">​</a></h3><ol><li>解析HTML，构建DOM树</li><li>解析CSS，构建CSSOM树</li><li>合并DOM树和CSSOM树，构建渲染树（Render Tree）</li><li>布局（Layout/Reflow）：计算元素位置和大小</li><li>绘制（Paint）：将渲染树转换为像素</li><li>合成（Composite）：将页面分层，合成显示</li><li>事件处理：响应用户交互</li><li>更新页面：处理DOM变化、CSS变化、布局变化、绘制变化等</li><li>垃圾回收：清理不再使用的内存</li><li>关闭连接</li></ol><h2 id="浏览器缓存" tabindex="-1">浏览器缓存 <a class="header-anchor" href="#浏览器缓存" aria-label="Permalink to &quot;浏览器缓存&quot;">​</a></h2><h3 id="浏览器缓存机制" tabindex="-1">浏览器缓存机制 <a class="header-anchor" href="#浏览器缓存机制" aria-label="Permalink to &quot;浏览器缓存机制&quot;">​</a></h3><ol><li>强缓存：浏览器在本地缓存中查找资源，如果找到且未过期，则直接使用缓存资源，否则继续请求服务器。</li><li>协商缓存：浏览器在本地缓存中查找资源，如果找到且未过期，则向服务器发送请求，服务器验证资源是否更新，如果更新则返回新资源，否则返回304状态码，浏览器使用本地缓存资源。</li></ol><h3 id="浏览器缓存策略" tabindex="-1">浏览器缓存策略 <a class="header-anchor" href="#浏览器缓存策略" aria-label="Permalink to &quot;浏览器缓存策略&quot;">​</a></h3><ol><li>Cache-Control：控制缓存的策略，如max-age、no-cache、no-store等。 <ol><li>max-age：指定缓存的过期时间，单位为秒。</li><li>no-cache：表示每次请求都需要验证缓存是否有效。</li><li>no-store：表示不缓存资源。</li></ol></li><li>Expires：指定缓存的过期时间，格式为GMT时间。</li><li>ETag：资源的唯一标识符，用于验证缓存是否有效。</li><li>Last-Modified：资源的最后修改时间，用于验证缓存是否有效。</li><li>If-None-Match：客户端发送的ETag值，服务器根据该值判断资源是否更新。</li><li>If-Modified-Since：客户端发送的Last-Modified值，服务器根据该值判断资源是否更新。</li><li>Cache-Control优先级高于Expires，ETag优先级高于Last-Modified。</li><li>浏览器会根据Cache-Control、Expires、ETag、Last-Modified等字段来判断资源是否有效，如果有效则使用缓存资源，否则向服务器请求新资源。</li></ol><h2 id="浏览器安全" tabindex="-1">浏览器安全 <a class="header-anchor" href="#浏览器安全" aria-label="Permalink to &quot;浏览器安全&quot;">​</a></h2><h3 id="浏览器安全机制" tabindex="-1">浏览器安全机制 <a class="header-anchor" href="#浏览器安全机制" aria-label="Permalink to &quot;浏览器安全机制&quot;">​</a></h3><ol><li>同源策略：限制一个origin（协议+域名+端口）的文档或脚本如何与另一个源的资源进行交互。同源策略可以防止恶意文档，通过恶意脚本窃取数据。</li><li>跨站脚本攻击（XSS）：攻击者通过在网页中插入恶意脚本，窃取用户数据或执行恶意操作。</li><li>跨站请求伪造（CSRF）：攻击者通过诱导用户点击恶意链接或表单，以用户身份执行恶意操作。</li><li>内容安全策略（CSP）：通过设置HTTP头部的Content-Security-Policy，限制网页可以加载和执行的资源，防止XSS攻击。</li><li>HTTPS：通过加密通信，防止中间人攻击和数据窃取。</li><li>Cookie安全：通过设置HttpOnly和Secure标志，防止Cookie被JavaScript访问和窃取。</li><li>安全沙箱：浏览器为每个标签页或iframe创建一个独立的沙箱环境，限制其访问其他标签页或iframe的资源。</li><li>安全更新：定期更新浏览器和插件，修复已知的安全漏洞。</li><li>安全测试：定期进行安全测试，发现和修复安全漏洞。</li></ol>',14)]))}const m=l(r,[["render",t]]);export{u as __pageData,m as default};
