import{_ as t,c as l,a0 as a,o as i}from"./chunks/framework.CGHvQLJz.js";const o="/assets/scroll.fp-QVb21.png",p=JSON.parse('{"title":"事件与尺寸获取","description":"","frontmatter":{},"headers":[],"relativePath":"front/html/event.md","filePath":"front/html/event.md"}'),n={name:"front/html/event.md"};function r(s,e,c,d,h,f){return i(),l("div",null,e[0]||(e[0]=[a('<h1 id="事件与尺寸获取" tabindex="-1">事件与尺寸获取 <a class="header-anchor" href="#事件与尺寸获取" aria-label="Permalink to &quot;事件与尺寸获取&quot;">​</a></h1><h2 id="mouseevent" tabindex="-1">MouseEvent <a class="header-anchor" href="#mouseevent" aria-label="Permalink to &quot;MouseEvent&quot;">​</a></h2><p>鼠标事件e触发坐标</p><ul><li>ScreenX：代表相较于用户屏幕左上角的坐标，使用的是用户屏幕的逻辑分辨率</li><li>ClientX：代表浏览器给网页分配的视口的偏移像素，不随页面滚动而改变</li><li>PageX：代表相较于body元素的偏移像素，视body元素是否被滚动，可以于ClientX一致</li><li>layerX：代表相较于其层叠上下文父元素的偏移像素，该特性为非标准特性，但是被大多数浏览器支持</li><li>OffsetX：代表相较于事件监听元素的偏移像素</li><li>x：ClientX的简称</li></ul><h2 id="元素尺寸获取" tabindex="-1">元素尺寸获取 <a class="header-anchor" href="#元素尺寸获取" aria-label="Permalink to &quot;元素尺寸获取&quot;">​</a></h2><ul><li>ClientWidth：获取元素可视部分的大小，content+padding</li><li>OffsetWidth：获取元素外围大小，content+padding+border</li><li>ScrollWidth：获取一个有滚动条的元素，其内部可滚动内容的高度</li></ul><h2 id="元素位置获取" tabindex="-1">元素位置获取 <a class="header-anchor" href="#元素位置获取" aria-label="Permalink to &quot;元素位置获取&quot;">​</a></h2><ul><li>offsetLeft/offsetTop：获取元素可视部分的大小，content+padding</li><li>scrollLeft/scrollTop：获取一个有滚动条的元素，其内部可滚动内容已经被卷去的部分，ScrollTop的值是有范围的，介于0—scrollHeight-clientHeight，之间 <img src="'+o+'" alt="scroll"></li></ul>',8)]))}const m=t(n,[["render",r]]);export{p as __pageData,m as default};
