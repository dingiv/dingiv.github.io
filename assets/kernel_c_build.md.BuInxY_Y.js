import{_ as e,c as i,o as l,ae as r}from"./chunks/framework.BtEkjhVd.js";const b=JSON.parse('{"title":"构建系统","description":"","frontmatter":{},"headers":[],"relativePath":"kernel/c/build.md","filePath":"kernel/c/build.md"}'),o={name:"kernel/c/build.md"};function n(t,a,h,d,s,c){return l(),i("div",null,a[0]||(a[0]=[r('<h1 id="构建系统" tabindex="-1">构建系统 <a class="header-anchor" href="#构建系统" aria-label="Permalink to &quot;构建系统&quot;">​</a></h1><h2 id="构建平台和编译器" tabindex="-1">构建平台和编译器 <a class="header-anchor" href="#构建平台和编译器" aria-label="Permalink to &quot;构建平台和编译器&quot;">​</a></h2><h3 id="linux" tabindex="-1">Linux <a class="header-anchor" href="#linux" aria-label="Permalink to &quot;Linux&quot;">​</a></h3><ul><li>Make：Linux 默认构建系统</li><li>GCC：GCC 9.3.0</li><li>Clang：Clang 10.0.0</li></ul><h3 id="windows" tabindex="-1">Windows <a class="header-anchor" href="#windows" aria-label="Permalink to &quot;Windows&quot;">​</a></h3><ul><li>MSVC：windows 默认编译器，原生结合 Visual Studio 使用</li><li>MinGW：GCC 在 Windows 上的移植版本，需要手动安装</li></ul><h3 id="macos" tabindex="-1">MacOS <a class="header-anchor" href="#macos" aria-label="Permalink to &quot;MacOS&quot;">​</a></h3><ul><li>Clang：MacOS 默认编译器</li></ul><h2 id="跨平台构建系统" tabindex="-1">跨平台构建系统 <a class="header-anchor" href="#跨平台构建系统" aria-label="Permalink to &quot;跨平台构建系统&quot;">​</a></h2><h3 id="cmake" tabindex="-1">CMake <a class="header-anchor" href="#cmake" aria-label="Permalink to &quot;CMake&quot;">​</a></h3><h3 id="meson" tabindex="-1">Meson <a class="header-anchor" href="#meson" aria-label="Permalink to &quot;Meson&quot;">​</a></h3><h1 id="gcc" tabindex="-1">GCC <a class="header-anchor" href="#gcc" aria-label="Permalink to &quot;GCC&quot;">​</a></h1><h2 id="编译步骤" tabindex="-1">编译步骤 <a class="header-anchor" href="#编译步骤" aria-label="Permalink to &quot;编译步骤&quot;">​</a></h2><h2 id="gdb" tabindex="-1">GDB <a class="header-anchor" href="#gdb" aria-label="Permalink to &quot;GDB&quot;">​</a></h2><h3 id="实现原理" tabindex="-1">实现原理 <a class="header-anchor" href="#实现原理" aria-label="Permalink to &quot;实现原理&quot;">​</a></h3><h3 id="启动方法" tabindex="-1">启动方法 <a class="header-anchor" href="#启动方法" aria-label="Permalink to &quot;启动方法&quot;">​</a></h3><h3 id="断点管理" tabindex="-1">断点管理 <a class="header-anchor" href="#断点管理" aria-label="Permalink to &quot;断点管理&quot;">​</a></h3><h3 id="运行管理" tabindex="-1">运行管理 <a class="header-anchor" href="#运行管理" aria-label="Permalink to &quot;运行管理&quot;">​</a></h3><h2 id="cygwin" tabindex="-1">Cygwin <a class="header-anchor" href="#cygwin" aria-label="Permalink to &quot;Cygwin&quot;">​</a></h2><h2 id="mingw" tabindex="-1">MingW <a class="header-anchor" href="#mingw" aria-label="Permalink to &quot;MingW&quot;">​</a></h2>',20)]))}const m=e(o,[["render",n]]);export{b as __pageData,m as default};
