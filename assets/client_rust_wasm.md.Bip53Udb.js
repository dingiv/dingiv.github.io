import{_ as a,c as l,o as r,j as e,a as s}from"./chunks/framework.Dgg8-8ov.js";const W=JSON.parse('{"title":"WASM","description":"","frontmatter":{"title":"WASM","order":50},"headers":[],"relativePath":"client/rust/wasm.md","filePath":"client/rust/wasm.md"}'),n={name:"client/rust/wasm.md"};function o(m,t,b,i,c,d){return r(),l("div",null,t[0]||(t[0]=[e("h1",{id:"web-assembly",tabindex:"-1"},[s("Web Assembly "),e("a",{class:"header-anchor",href:"#web-assembly","aria-label":'Permalink to "Web Assembly"'},"​")],-1),e("p",null,[s("Web Assembly 被描述为一个语言运行时，为支持"),e("strong",null,"多语言前端"),s("而生，为了让不同的语言都能够像 JavaSCript 那样运行在 Web 平台上，该运行时由 JS 引擎来实现，支持其他语言编译成 Web Assembly 目标从而运行在 JS 引擎中，实现和 JS 的互操作性。")],-1),e("p",null,"目前在所有主流语言中，Rust 是第一顺位的 WASM 支持者，拥有高性能、安全性、打包体积、开发效率等诸多优势，是 Web 平台的第二顺位公民。",-1),e("p",null,"JS 和 Web 平台的受限于单线程和脚本语言性能困扰，可以采用 Web Worker 技术和 Web Assembly 技术来缓解 CPU 密集任务时面临的困难。使用 Rust 编写 WASM 可以作为 JS 的二进制插件，从而胜任 CPU 密集型任务。",-1),e("p",null,"另一方面，WASM 也能够直接支持在 WASM 运行环境中访问 DOM 结构，从而不依赖显示的 HTML/CSS 文件来进行 UI 展示。",-1)]))}const u=a(n,[["render",o]]);export{W as __pageData,u as default};
