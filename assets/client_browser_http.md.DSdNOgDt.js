import{_ as l,c as a,o as t,ae as s}from"./chunks/framework.Cd-3tpCq.js";const g=JSON.parse('{"title":"http 实现","description":"","frontmatter":{},"headers":[],"relativePath":"client/browser/http.md","filePath":"client/browser/http.md"}'),e={name:"client/browser/http.md"};function n(p,i,o,h,r,d){return t(),a("div",null,i[0]||(i[0]=[s(`<h1 id="http-实现" tabindex="-1">http 实现 <a class="header-anchor" href="#http-实现" aria-label="Permalink to &quot;http 实现&quot;">​</a></h1><p>浏览器作为Web客户端，负责与服务器进行 HTTP 通信，并实现高效的缓存机制。本文深入探讨浏览器如何处理 HTTP 请求和响应，以及如何利用缓存提高性能。</p><h2 id="http-协议基础" tabindex="-1">HTTP 协议基础 <a class="header-anchor" href="#http-协议基础" aria-label="Permalink to &quot;HTTP 协议基础&quot;">​</a></h2><p>HTTP（超文本传输协议）是Web的基础协议，浏览器通过HTTP请求资源并接收服务器响应。</p><h3 id="http-版本演进" tabindex="-1">HTTP 版本演进 <a class="header-anchor" href="#http-版本演进" aria-label="Permalink to &quot;HTTP 版本演进&quot;">​</a></h3><ol><li><p><strong>HTTP/1.0</strong></p><ul><li>每个请求/响应都需要建立新的TCP连接</li><li>支持基本的头部字段</li><li>无法复用连接</li></ul></li><li><p><strong>HTTP/1.1</strong></p><ul><li>引入持久连接（keep-alive）</li><li>引入管道化请求（pipelining）</li><li>新增多种头部字段</li><li>支持分块传输编码</li></ul></li><li><p><strong>HTTP/2</strong></p><ul><li>多路复用（multiplexing）</li><li>头部压缩（HPACK）</li><li>服务器推送</li><li>二进制分帧层</li></ul></li><li><p><strong>HTTP/3</strong></p><ul><li>基于QUIC协议（基于UDP）</li><li>减少连接建立时间</li><li>改进拥塞控制</li><li>连接迁移</li></ul></li></ol><h3 id="浏览器如何发起http请求" tabindex="-1">浏览器如何发起HTTP请求 <a class="header-anchor" href="#浏览器如何发起http请求" aria-label="Permalink to &quot;浏览器如何发起HTTP请求&quot;">​</a></h3><ol><li><p><strong>构建请求对象</strong></p><ul><li>设置方法（GET、POST等）</li><li>添加请求头</li><li>准备请求体（如适用）</li></ul></li><li><p><strong>DNS解析</strong></p><ul><li>检查缓存</li><li>递归查询DNS服务器</li><li>解析域名为IP地址</li></ul></li><li><p><strong>建立连接</strong></p><ul><li>创建TCP连接（HTTP/1.x和HTTP/2）</li><li>或创建QUIC连接（HTTP/3）</li><li>进行TLS握手（如使用HTTPS）</li></ul></li><li><p><strong>发送请求</strong></p><ul><li>传输HTTP消息头</li><li>传输HTTP消息体（如适用）</li></ul></li><li><p><strong>接收响应</strong></p><ul><li>解析状态行</li><li>处理响应头</li><li>处理响应体</li></ul></li></ol><h3 id="http请求方法" tabindex="-1">HTTP请求方法 <a class="header-anchor" href="#http请求方法" aria-label="Permalink to &quot;HTTP请求方法&quot;">​</a></h3><p>浏览器支持多种HTTP方法，每种适用于不同场景：</p><table tabindex="0"><thead><tr><th>方法</th><th>描述</th><th>典型用途</th></tr></thead><tbody><tr><td>GET</td><td>请求指定资源</td><td>获取网页、图片、脚本等</td></tr><tr><td>POST</td><td>提交数据</td><td>表单提交、文件上传</td></tr><tr><td>HEAD</td><td>仅请求头信息</td><td>检查资源是否存在、校验缓存</td></tr><tr><td>PUT</td><td>上传资源</td><td>RESTful API中的资源更新</td></tr><tr><td>DELETE</td><td>删除资源</td><td>RESTful API中的资源删除</td></tr><tr><td>OPTIONS</td><td>获取支持的方法</td><td>CORS预检请求、API探测</td></tr><tr><td>PATCH</td><td>部分更新资源</td><td>RESTful API中的局部更新</td></tr></tbody></table><h3 id="http状态码" tabindex="-1">HTTP状态码 <a class="header-anchor" href="#http状态码" aria-label="Permalink to &quot;HTTP状态码&quot;">​</a></h3><p>浏览器根据响应状态码执行不同操作：</p><ul><li><strong>1xx</strong>：信息性响应（请求已接收，继续处理）</li><li><strong>2xx</strong>：成功（请求已成功接收、理解和处理）</li><li><strong>3xx</strong>：重定向（需要进一步操作才能完成请求）</li><li><strong>4xx</strong>：客户端错误（请求包含错误或无法完成）</li><li><strong>5xx</strong>：服务器错误（服务器处理请求时出错）</li></ul><p>常见状态码及浏览器行为：</p><table tabindex="0"><thead><tr><th>状态码</th><th>描述</th><th>浏览器行为</th></tr></thead><tbody><tr><td>200</td><td>OK</td><td>正常显示响应内容</td></tr><tr><td>301</td><td>永久重定向</td><td>缓存新地址并重定向</td></tr><tr><td>302</td><td>临时重定向</td><td>重定向但不缓存</td></tr><tr><td>304</td><td>Not Modified</td><td>使用本地缓存</td></tr><tr><td>404</td><td>Not Found</td><td>显示错误页面</td></tr><tr><td>500</td><td>Server Error</td><td>显示错误页面</td></tr></tbody></table><h2 id="浏览器缓存机制" tabindex="-1">浏览器缓存机制 <a class="header-anchor" href="#浏览器缓存机制" aria-label="Permalink to &quot;浏览器缓存机制&quot;">​</a></h2><p>浏览器缓存是提高Web性能的重要机制，通过重用之前获取的资源，减少网络请求。</p><h3 id="缓存位置" tabindex="-1">缓存位置 <a class="header-anchor" href="#缓存位置" aria-label="Permalink to &quot;缓存位置&quot;">​</a></h3><p>浏览器缓存按优先级排序：</p><ol><li><p><strong>内存缓存</strong></p><ul><li>存储在RAM中</li><li>访问速度最快</li><li>生命周期短（关闭标签页或浏览器后清除）</li><li>通常用于当前会话使用的资源</li></ul></li><li><p><strong>磁盘缓存</strong></p><ul><li>存储在硬盘上</li><li>持久化存储</li><li>容量比内存缓存大</li><li>可以在浏览器会话之间保持</li></ul></li><li><p><strong>Service Worker缓存</strong></p><ul><li>通过JavaScript控制的缓存</li><li>可编程性强</li><li>支持离线访问</li><li>独立于浏览器缓存</li></ul></li><li><p><strong>Push缓存</strong></p><ul><li>HTTP/2服务器推送资源的缓存</li><li>生命周期很短</li><li>一般仅在会话中有效</li></ul></li></ol><h3 id="缓存策略" tabindex="-1">缓存策略 <a class="header-anchor" href="#缓存策略" aria-label="Permalink to &quot;缓存策略&quot;">​</a></h3><p>浏览器实现两种主要的缓存策略：</p><h4 id="强缓存" tabindex="-1">强缓存 <a class="header-anchor" href="#强缓存" aria-label="Permalink to &quot;强缓存&quot;">​</a></h4><p>不需要向服务器发送请求，直接从缓存读取资源。通过以下头部控制：</p><ol><li><p><strong>Expires</strong>（HTTP/1.0）</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>Expires: Wed, 21 Oct 2023 07:28:00 GMT</span></span></code></pre></div><ul><li>指定资源过期的绝对时间</li><li>依赖客户端时间，可能不准确</li><li>优先级低于Cache-Control</li></ul></li><li><p><strong>Cache-Control</strong>（HTTP/1.1）</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>Cache-Control: max-age=31536000</span></span></code></pre></div><ul><li>指定资源有效期的相对时间（秒）</li><li>更精确，不依赖客户端时间</li><li>常用指令： <ul><li><code>max-age</code>：缓存有效时间</li><li><code>no-cache</code>：强制验证缓存</li><li><code>no-store</code>：禁止缓存</li><li><code>private</code>：仅客户端缓存</li><li><code>public</code>：允许中间缓存</li></ul></li></ul></li></ol><h4 id="协商缓存" tabindex="-1">协商缓存 <a class="header-anchor" href="#协商缓存" aria-label="Permalink to &quot;协商缓存&quot;">​</a></h4><p>当强缓存失效时，浏览器向服务器发送请求，服务器根据请求头判断是否使用缓存：</p><ol><li><p><strong>Last-Modified / If-Modified-Since</strong></p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>Last-Modified: Wed, 21 Oct 2023 07:28:00 GMT</span></span>
<span class="line"><span>If-Modified-Since: Wed, 21 Oct 2023 07:28:00 GMT</span></span></code></pre></div><ul><li>基于资源的最后修改时间</li><li>精度为秒级</li><li>不适用于频繁变化的资源</li></ul></li><li><p><strong>ETag / If-None-Match</strong></p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>ETag: &quot;33a64df551425fcc55e4d42a148795d9f25f89d4&quot;</span></span>
<span class="line"><span>If-None-Match: &quot;33a64df551425fcc55e4d42a148795d9f25f89d4&quot;</span></span></code></pre></div><ul><li>基于资源内容生成的唯一标识符</li><li>更精确，不依赖时间</li><li>计算ETag会消耗服务器资源</li></ul></li></ol><h3 id="缓存流程" tabindex="-1">缓存流程 <a class="header-anchor" href="#缓存流程" aria-label="Permalink to &quot;缓存流程&quot;">​</a></h3><p>浏览器处理缓存的完整流程：</p><ol><li><p>检查是否有强缓存命中</p><ul><li>解析Cache-Control/Expires头</li><li>如命中，直接使用缓存资源（不发请求）</li><li>如未命中，进入协商缓存阶段</li></ul></li><li><p>协商缓存检查</p><ul><li>向服务器发送带有If-Modified-Since或If-None-Match头的请求</li><li>服务器比较这些头与当前资源状态</li><li>如资源未变化，返回304 Not Modified（不返回资源内容）</li><li>如资源已变化，返回200 OK和新资源</li></ul></li><li><p>缓存响应</p><ul><li>对于200响应，根据响应头更新缓存</li><li>对于304响应，更新缓存元数据（如过期时间）</li></ul></li></ol><h3 id="缓存控制指令详解" tabindex="-1">缓存控制指令详解 <a class="header-anchor" href="#缓存控制指令详解" aria-label="Permalink to &quot;缓存控制指令详解&quot;">​</a></h3><h4 id="服务器响应头" tabindex="-1">服务器响应头 <a class="header-anchor" href="#服务器响应头" aria-label="Permalink to &quot;服务器响应头&quot;">​</a></h4><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>Cache-Control: max-age=3600, must-revalidate, public</span></span>
<span class="line"><span>Expires: Wed, 21 Oct 2023 07:28:00 GMT</span></span>
<span class="line"><span>ETag: &quot;33a64df551425fcc55e4d42a148795d9f25f89d4&quot;</span></span>
<span class="line"><span>Last-Modified: Wed, 21 Oct 2023 07:28:00 GMT</span></span>
<span class="line"><span>Vary: Accept-Encoding, User-Agent</span></span></code></pre></div><ul><li><strong>must-revalidate</strong>：过期缓存必须验证才能使用</li><li><strong>public</strong>：任何缓存都可以存储响应</li><li><strong>private</strong>：只有浏览器可以缓存，中间代理不可缓存</li><li><strong>no-cache</strong>：每次使用前必须验证缓存</li><li><strong>no-store</strong>：完全禁止缓存</li><li><strong>Vary</strong>：指定根据哪些请求头字段变化导致响应变化</li></ul><h4 id="客户端请求头" tabindex="-1">客户端请求头 <a class="header-anchor" href="#客户端请求头" aria-label="Permalink to &quot;客户端请求头&quot;">​</a></h4><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>Cache-Control: max-age=0</span></span>
<span class="line"><span>If-None-Match: &quot;33a64df551425fcc55e4d42a148795d9f25f89d4&quot;</span></span>
<span class="line"><span>If-Modified-Since: Wed, 21 Oct 2023 07:28:00 GMT</span></span></code></pre></div><ul><li><strong>max-age=0</strong>：强制验证缓存</li><li><strong>no-cache</strong>：忽略本地缓存，强制验证</li><li><strong>no-store</strong>：禁止存储响应</li></ul><h3 id="按资源类型的缓存策略" tabindex="-1">按资源类型的缓存策略 <a class="header-anchor" href="#按资源类型的缓存策略" aria-label="Permalink to &quot;按资源类型的缓存策略&quot;">​</a></h3><p>不同类型的资源适用不同的缓存策略：</p><ol><li><p><strong>HTML文档</strong></p><ul><li>短期缓存或不缓存</li><li>使用ETag进行验证</li></ul><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>Cache-Control: no-cache</span></span></code></pre></div></li><li><p><strong>CSS和JavaScript</strong></p><ul><li>长期缓存</li><li>使用版本号或哈希值在文件名中</li></ul><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>Cache-Control: max-age=31536000, immutable</span></span></code></pre></div></li><li><p><strong>图片和媒体文件</strong></p><ul><li>长期缓存</li><li>文件名包含内容哈希</li></ul><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>Cache-Control: max-age=31536000</span></span></code></pre></div></li><li><p><strong>API响应</strong></p><ul><li>根据数据更新频率设置</li><li>使用ETag进行验证</li></ul><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>Cache-Control: max-age=60, must-revalidate</span></span></code></pre></div></li></ol><h2 id="浏览器网络优化技术" tabindex="-1">浏览器网络优化技术 <a class="header-anchor" href="#浏览器网络优化技术" aria-label="Permalink to &quot;浏览器网络优化技术&quot;">​</a></h2><h3 id="预加载和预连接" tabindex="-1">预加载和预连接 <a class="header-anchor" href="#预加载和预连接" aria-label="Permalink to &quot;预加载和预连接&quot;">​</a></h3><p>浏览器支持多种资源预加载机制：</p><ol><li><p><strong>DNS预解析</strong></p><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">link</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> rel</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;dns-prefetch&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> href</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;https://example.com&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div></li><li><p><strong>预连接</strong></p><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">link</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> rel</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;preconnect&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> href</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;https://example.com&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div></li><li><p><strong>预加载</strong></p><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">link</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> rel</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;preload&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> href</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;/styles.css&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> as</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;style&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div></li><li><p><strong>预获取</strong></p><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">link</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> rel</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;prefetch&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> href</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;/next-page.html&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div></li></ol><h3 id="http-2和http-3优化" tabindex="-1">HTTP/2和HTTP/3优化 <a class="header-anchor" href="#http-2和http-3优化" aria-label="Permalink to &quot;HTTP/2和HTTP/3优化&quot;">​</a></h3><p>现代浏览器利用新HTTP协议特性提高性能：</p><ol><li><p><strong>多路复用</strong></p><ul><li>在单个连接上并行请求多个资源</li><li>消除了HTTP/1.1的队头阻塞问题</li></ul></li><li><p><strong>头部压缩</strong></p><ul><li>减少重复头部字段传输</li><li>压缩头部数据</li></ul></li><li><p><strong>服务器推送</strong></p><ul><li>主动推送关联资源</li><li>减少客户端请求</li></ul></li><li><p><strong>QUIC协议</strong> (HTTP/3)</p><ul><li>建立连接更快</li><li>更好的拥塞控制</li><li>连接迁移支持</li></ul></li></ol><h3 id="离线应用技术" tabindex="-1">离线应用技术 <a class="header-anchor" href="#离线应用技术" aria-label="Permalink to &quot;离线应用技术&quot;">​</a></h3><p>浏览器提供多种技术实现离线Web应用：</p><ol><li><p><strong>Service Worker</strong></p><ul><li>拦截网络请求</li><li>实现自定义缓存策略</li><li>支持后台同步和推送通知</li></ul></li><li><p><strong>缓存API</strong></p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 在Service Worker中使用Cache API</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">cache.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">addAll</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">([</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  &#39;/&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  &#39;/styles.css&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  &#39;/script.js&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  &#39;/images/logo.png&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]);</span></span></code></pre></div></li><li><p><strong>IndexedDB</strong></p><ul><li>存储大量结构化数据</li><li>支持索引和查询</li><li>适合离线应用数据存储</li></ul></li><li><p><strong>Web应用清单（Web App Manifest）</strong></p><ul><li>将网站添加到主屏幕</li><li>定义离线体验</li></ul></li></ol><h2 id="浏览器缓存调试技巧" tabindex="-1">浏览器缓存调试技巧 <a class="header-anchor" href="#浏览器缓存调试技巧" aria-label="Permalink to &quot;浏览器缓存调试技巧&quot;">​</a></h2><h3 id="开发者工具" tabindex="-1">开发者工具 <a class="header-anchor" href="#开发者工具" aria-label="Permalink to &quot;开发者工具&quot;">​</a></h3><p>使用浏览器开发者工具检查和调试缓存：</p><ol><li><p><strong>Network面板</strong></p><ul><li>检查请求/响应头</li><li>查看缓存状态（Size列显示&quot;(disk cache)&quot;或&quot;(memory cache)&quot;）</li><li>分析资源加载时间</li></ul></li><li><p><strong>禁用缓存功能</strong></p><ul><li>Network面板中的&quot;Disable cache&quot;选项</li><li>仅在开发者工具打开时生效</li></ul></li><li><p><strong>清除缓存</strong></p><ul><li>使用Application面板中的Clear Storage功能</li><li>或使用Ctrl+F5/Cmd+Shift+R强制刷新</li></ul></li></ol><h3 id="常见缓存问题及解决方案" tabindex="-1">常见缓存问题及解决方案 <a class="header-anchor" href="#常见缓存问题及解决方案" aria-label="Permalink to &quot;常见缓存问题及解决方案&quot;">​</a></h3><ol><li><p><strong>缓存过期日期不正确</strong></p><ul><li>检查服务器时间配置</li><li>确保正确设置Cache-Control或Expires头</li></ul></li><li><p><strong>缓存未更新</strong></p><ul><li>使用内容哈希或版本号</li><li>更改资源URL（如添加查询参数）</li></ul></li><li><p><strong>中间代理缓存问题</strong></p><ul><li>使用Vary头控制缓存版本</li><li>明确设置private或public指令</li></ul></li><li><p><strong>不一致的缓存行为</strong></p><ul><li>确保所有资源使用一致的缓存策略</li><li>监控和测试不同浏览器的缓存行为</li></ul></li></ol><h2 id="浏览器缓存" tabindex="-1">浏览器缓存 <a class="header-anchor" href="#浏览器缓存" aria-label="Permalink to &quot;浏览器缓存&quot;">​</a></h2><h3 id="浏览器缓存机制-1" tabindex="-1">浏览器缓存机制 <a class="header-anchor" href="#浏览器缓存机制-1" aria-label="Permalink to &quot;浏览器缓存机制&quot;">​</a></h3><ol><li>强缓存：浏览器在本地缓存中查找资源，如果找到且未过期，则直接使用缓存资源，否则继续请求服务器。</li><li>协商缓存：浏览器在本地缓存中查找资源，如果找到且未过期，则向服务器发送请求，服务器验证资源是否更新，如果更新则返回新资源，否则返回304状态码，浏览器使用本地缓存资源。</li></ol><h3 id="浏览器缓存策略" tabindex="-1">浏览器缓存策略 <a class="header-anchor" href="#浏览器缓存策略" aria-label="Permalink to &quot;浏览器缓存策略&quot;">​</a></h3><ol><li>Cache-Control：控制缓存的策略，如max-age、no-cache、no-store等。 <ol><li>max-age：指定缓存的过期时间，单位为秒。</li><li>no-cache：表示每次请求都需要验证缓存是否有效。</li><li>no-store：表示不缓存资源。</li></ol></li><li>Expires：指定缓存的过期时间，格式为GMT时间。</li><li>ETag：资源的唯一标识符，用于验证缓存是否有效。</li><li>Last-Modified：资源的最后修改时间，用于验证缓存是否有效。</li><li>If-None-Match：客户端发送的ETag值，服务器根据该值判断资源是否更新。</li><li>If-Modified-Since：客户端发送的Last-Modified值，服务器根据该值判断资源是否更新。</li><li>Cache-Control优先级高于Expires，ETag优先级高于Last-Modified。</li><li>浏览器会根据Cache-Control、Expires、ETag、Last-Modified等字段来判断资源是否有效，如果有效则使用缓存资源，否则向服务器请求新资源。</li></ol>`,63)]))}const u=l(e,[["render",n]]);export{g as __pageData,u as default};
