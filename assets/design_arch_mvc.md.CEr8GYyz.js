import{_ as i,c as e,o as a,ae as r}from"./chunks/framework.Dh1jimFm.js";const m=JSON.parse('{"title":"MVC 架构模式","description":"","frontmatter":{},"headers":[],"relativePath":"design/arch/mvc.md","filePath":"design/arch/mvc.md"}'),o={name:"design/arch/mvc.md"};function t(n,l,s,c,h,d){return a(),e("div",null,l[0]||(l[0]=[r('<h1 id="mvc-架构模式" tabindex="-1">MVC 架构模式 <a class="header-anchor" href="#mvc-架构模式" aria-label="Permalink to &quot;MVC 架构模式&quot;">​</a></h1><h2 id="什么是-mvc" tabindex="-1">什么是 MVC？ <a class="header-anchor" href="#什么是-mvc" aria-label="Permalink to &quot;什么是 MVC？&quot;">​</a></h2><p>MVC（Model-View-Controller）是一种软件架构模式，它将应用程序分为三个核心组件：</p><ol><li><p><strong>Model（模型）</strong></p><ul><li>负责数据和业务逻辑</li><li>管理应用程序的状态</li><li>处理数据持久化</li></ul></li><li><p><strong>View（视图）</strong></p><ul><li>负责用户界面展示</li><li>显示模型中的数据</li><li>不包含业务逻辑</li></ul></li><li><p><strong>Controller（控制器）</strong></p><ul><li>处理用户输入</li><li>更新模型</li><li>选择适当的视图进行显示</li></ul></li></ol><h2 id="mvc-的工作流程" tabindex="-1">MVC 的工作流程 <a class="header-anchor" href="#mvc-的工作流程" aria-label="Permalink to &quot;MVC 的工作流程&quot;">​</a></h2><ol><li>用户通过视图发起请求</li><li>控制器接收请求并处理</li><li>控制器调用模型处理业务逻辑</li><li>模型更新数据状态</li><li>控制器选择视图进行展示</li><li>视图从模型获取数据并渲染</li></ol><h2 id="mvc-的优势" tabindex="-1">MVC 的优势 <a class="header-anchor" href="#mvc-的优势" aria-label="Permalink to &quot;MVC 的优势&quot;">​</a></h2><ol><li><p><strong>关注点分离</strong></p><ul><li>数据、展示、控制逻辑分离</li><li>便于团队协作</li><li>提高代码可维护性</li></ul></li><li><p><strong>可复用性</strong></p><ul><li>模型可以被多个视图复用</li><li>视图可以独立于模型开发</li><li>控制器可以处理多个视图</li></ul></li><li><p><strong>可测试性</strong></p><ul><li>各组件可以独立测试</li><li>便于单元测试</li><li>便于自动化测试</li></ul></li><li><p><strong>灵活性</strong></p><ul><li>可以轻松更换视图</li><li>可以修改业务逻辑而不影响界面</li><li>可以添加新的功能模块</li></ul></li></ol><h2 id="mvc-的变体" tabindex="-1">MVC 的变体 <a class="header-anchor" href="#mvc-的变体" aria-label="Permalink to &quot;MVC 的变体&quot;">​</a></h2><h3 id="_1-mvp-model-view-presenter" tabindex="-1">1. MVP（Model-View-Presenter） <a class="header-anchor" href="#_1-mvp-model-view-presenter" aria-label="Permalink to &quot;1. MVP（Model-View-Presenter）&quot;">​</a></h3><ul><li>Presenter 替代 Controller</li><li>View 和 Model 完全分离</li><li>更适合桌面应用</li></ul><h3 id="_2-mvvm-model-view-viewmodel" tabindex="-1">2. MVVM（Model-View-ViewModel） <a class="header-anchor" href="#_2-mvvm-model-view-viewmodel" aria-label="Permalink to &quot;2. MVVM（Model-View-ViewModel）&quot;">​</a></h3><ul><li>ViewModel 作为 View 和 Model 的桥梁</li><li>数据绑定机制</li><li>更适合现代前端框架</li></ul><h3 id="_3-hmvc-hierarchical-mvc" tabindex="-1">3. HMVC（Hierarchical-MVC） <a class="header-anchor" href="#_3-hmvc-hierarchical-mvc" aria-label="Permalink to &quot;3. HMVC（Hierarchical-MVC）&quot;">​</a></h3><ul><li>多层次的 MVC 结构</li><li>支持模块化开发</li><li>适合大型应用</li></ul><h2 id="mvc-的应用场景" tabindex="-1">MVC 的应用场景 <a class="header-anchor" href="#mvc-的应用场景" aria-label="Permalink to &quot;MVC 的应用场景&quot;">​</a></h2><ol><li><p><strong>Web 应用</strong></p><ul><li>大多数 Web 框架采用 MVC</li><li>如 Ruby on Rails, Django, Spring MVC</li></ul></li><li><p><strong>桌面应用</strong></p><ul><li>图形界面应用</li><li>如 Java Swing, WPF</li></ul></li><li><p><strong>移动应用</strong></p><ul><li>iOS 和 Android 开发</li><li>如 iOS 的 MVC 模式</li></ul></li></ol><h2 id="mvc-的最佳实践" tabindex="-1">MVC 的最佳实践 <a class="header-anchor" href="#mvc-的最佳实践" aria-label="Permalink to &quot;MVC 的最佳实践&quot;">​</a></h2><ol><li><p><strong>保持模型简单</strong></p><ul><li>只包含数据和业务逻辑</li><li>避免在模型中处理 UI 逻辑</li></ul></li><li><p><strong>视图职责单一</strong></p><ul><li>只负责展示</li><li>不包含业务逻辑</li></ul></li><li><p><strong>控制器保持精简</strong></p><ul><li>只负责协调</li><li>不包含复杂逻辑</li></ul></li><li><p><strong>使用依赖注入</strong></p><ul><li>降低组件耦合</li><li>提高可测试性</li></ul></li></ol><h2 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;总结&quot;">​</a></h2><p>MVC 是一种成熟且广泛应用的架构模式，特别适合需要良好用户界面的应用。正确使用 MVC 可以带来更好的代码组织、更高的可维护性和更强的可扩展性。选择 MVC 的变体时，需要根据具体应用场景和需求来决定。</p>',21)]))}const p=i(o,[["render",t]]);export{m as __pageData,p as default};
