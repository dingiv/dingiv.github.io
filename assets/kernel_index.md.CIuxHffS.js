import{_ as l,c as i,o as a,ae as t}from"./chunks/framework.Dh1jimFm.js";const h=JSON.parse('{"title":"系统技术","description":"","frontmatter":{"title":"系统技术","order":50},"headers":[],"relativePath":"kernel/index.md","filePath":"kernel/index.md"}'),r={name:"kernel/index.md"};function o(n,e,s,d,u,c){return a(),i("div",null,e[0]||(e[0]=[t('<h1 id="系统层软件开发" tabindex="-1">系统层软件开发 <a class="header-anchor" href="#系统层软件开发" aria-label="Permalink to &quot;系统层软件开发&quot;">​</a></h1><p>学习系统层软件开发，意味着开发者需要</p><ul><li>在上层：编写<strong>系统服务软件</strong>，简化<strong>系统层接口</strong>的调用流程，提供系统辅助服务，优化用户体验</li><li>向上：为<strong>用户层软件</strong>编写系统层接口和调用，满足上层应用的业务需求</li><li>在本层：编写组成系统功能的各个模块，并协调模块之间的交互</li><li>向下：使用硬件接口，编写<strong>驱动程序</strong>，从而直接操控硬件，抽象、封装、管理硬件资源</li></ul><blockquote><ul><li>系统层软件：属于操作系统的一部分，CPU 运行在内核态或者特权级别，拥有直接控制硬件的能力</li><li>用户层软件：通过操作系统封装的进程，间接访问内存和运行指令，且 CPU 运行在用户态或者受限级别，无法直接操作硬件</li><li>系统服务软件：运行在用户空间，直接对接系统层提供给用户层软件的接口，并做进一步的封装，简化用户层软件的调用流程，优化用户体验。</li></ul></blockquote><h2 id="linux-系统开发" tabindex="-1">linux 系统开发 <a class="header-anchor" href="#linux-系统开发" aria-label="Permalink to &quot;linux 系统开发&quot;">​</a></h2><p>linux 系统是一个高度模块化的软件系统，由开源社区维护。系统开发者可以充分参与其中开发，并以之为基础定制属于自己的操作系统。</p><h2 id="用户态核心软件" tabindex="-1">用户态核心软件 <a class="header-anchor" href="#用户态核心软件" aria-label="Permalink to &quot;用户态核心软件&quot;">​</a></h2><p>一些运行在用户态的软件承担着较为底层的基础工作，并且需要具有极高的运行性能，编写这些软件也需要在一定程度上理解系统技术，例如：</p><ul><li>模拟器，用于模拟和虚拟化硬件平台，从在一个操作系统上运行另一个独立的操作系统。QEMU、VirtualBox、VMWare...</li><li>编译器/运行时，用于将一个语言的源码文件编译成另一种语言，并可以执行，GCC、MSVC、汇编器、V8、JVM...</li><li>数据库，用于高效管理磁盘数据，并对外提供数据服务，MySQL、Redis...</li><li>浏览器，用于实现 Web 标准和渲染 Web 程序，Chrome、FireFox、Safari...</li><li>游戏引擎，用于提供复杂的游戏渲染和一站式开发能力，Unity、Unreal、Godot...</li><li>AI框架，用于训练和驱动 AI 模型，Pytorh...</li></ul>',9)]))}const p=l(r,[["render",o]]);export{h as __pageData,p as default};
