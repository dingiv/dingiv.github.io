import{_ as l,c as e,o,ae as t}from"./chunks/framework.Cthp9TdA.js";const I=JSON.parse('{"title":"io","description":"","frontmatter":{},"headers":[],"relativePath":"client/js/io.md","filePath":"client/js/io.md"}'),a={name:"client/js/io.md"};function r(s,i,n,c,_,d){return o(),e("div",null,i[0]||(i[0]=[t('<h1 id="io" tabindex="-1">io <a class="header-anchor" href="#io" aria-label="Permalink to &quot;io&quot;">​</a></h1><p>在前端应用中，涉及的 io 对象主要有如下内容，在实际的使用中，这些 API 往往以命令式的代码进行操作，这与函数编程所使用的声明式编程风格不符，因此需要使用高级框架对其进行封装。同时，这些 io 操作一般会涉及异步操作，因此，为了让 API 变得优雅，必须使用响应式编程的思想来优化 API 风格，提高框架的使用体验。</p><ol><li>有持久化能力的 Web API，例如： <ul><li>Cookies</li><li>SessionStorage</li><li>LocalStorage</li><li>Indexed DB</li><li>History API</li><li>Clipboard API</li><li>File API</li></ul></li><li>Web Worker API</li><li>Http 和 WebSockets 纯粹的手动请求还远远不能满足实际的开发需要，一些高级特性也需要支持 <ul><li>声明式编程风格</li><li>响应式能力、响应式数据封装</li><li>io 抽象、数据预处理、校验、拼装、多请求封装</li><li>缓存、持久化</li><li>限流、防抖</li><li>Mock</li><li>请求拦截、重定向、逻辑代理</li><li>SSR 支持</li><li>UI 框架无关、IO 目标无关或多重支持</li></ul></li></ol>',3)]))}const P=l(a,[["render",r]]);export{I as __pageData,P as default};
