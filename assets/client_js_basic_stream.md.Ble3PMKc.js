import{_ as s}from"./chunks/stream.DjHHdJNE.js";import{_ as i,c as e,o as l,ae as t}from"./chunks/framework.Dh1jimFm.js";const g=JSON.parse('{"title":"Stream API","description":"","frontmatter":{},"headers":[],"relativePath":"client/js/basic/stream.md","filePath":"client/js/basic/stream.md"}'),n={name:"client/js/basic/stream.md"};function h(r,a,p,k,d,o){return l(),e("div",null,a[0]||(a[0]=[t(`<h1 id="stream-api" tabindex="-1">Stream API <a class="header-anchor" href="#stream-api" aria-label="Permalink to &quot;Stream API&quot;">​</a></h1><h2 id="readablestream" tabindex="-1">ReadableStream <a class="header-anchor" href="#readablestream" aria-label="Permalink to &quot;ReadableStream&quot;">​</a></h2><h3 id="获得生产者" tabindex="-1">获得生产者 <a class="header-anchor" href="#获得生产者" aria-label="Permalink to &quot;获得生产者&quot;">​</a></h3><ol><li>构造函数<div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ReadableStream</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    start</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">?</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">ctrl</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      ctrl.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">enqueue</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(data)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    },</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    pull</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">?</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">ctrl</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">){ }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span></code></pre></div></li><li>从其他API获得</li></ol><h3 id="使用生产者" tabindex="-1">使用生产者 <a class="header-anchor" href="#使用生产者" aria-label="Permalink to &quot;使用生产者&quot;">​</a></h3><ul><li>对接至 WriteableStream，rs.pipeTo(ws)</li><li>调用 reader，手动消费， reader=rs.getReader() reader.read().then((res)=&gt;process(res))</li></ul><h2 id="writeablestream-消费者" tabindex="-1">WriteableStream：消费者 <a class="header-anchor" href="#writeablestream-消费者" aria-label="Permalink to &quot;WriteableStream：消费者&quot;">​</a></h2><h3 id="获得消费者" tabindex="-1">获得消费者 <a class="header-anchor" href="#获得消费者" aria-label="Permalink to &quot;获得消费者&quot;">​</a></h3><ul><li>构造函数</li></ul><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> WriteableStream</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    write</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">data</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">){ }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span></code></pre></div><h3 id="使用消费者" tabindex="-1">使用消费者 <a class="header-anchor" href="#使用消费者" aria-label="Permalink to &quot;使用消费者&quot;">​</a></h3><ul><li>让Readable对接</li><li>手动调用writer， writer=ws.getWriter() writer.ready.write()</li></ul><h2 id="node-stream-readable" tabindex="-1">node:stream.Readable <a class="header-anchor" href="#node-stream-readable" aria-label="Permalink to &quot;node:stream.Readable&quot;">​</a></h2><h3 id="获得生产者-1" tabindex="-1">获得生产者 <a class="header-anchor" href="#获得生产者-1" aria-label="Permalink to &quot;获得生产者&quot;">​</a></h3><ul><li>构造函数</li></ul><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Readable</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  read</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(){</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">push</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(chunk)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span></code></pre></div><ul><li>从其他API获得，文件流，标准流，网络流，压缩流</li><li>从可迭代对象获取，Readable.from(iterable)</li></ul><h3 id="使用生产者-1" tabindex="-1">使用生产者 <a class="header-anchor" href="#使用生产者-1" aria-label="Permalink to &quot;使用生产者&quot;">​</a></h3><ul><li>对接至 Writeable，rs.pipe(ws)</li><li>监听 data 事件</li><li>监听 readable事件，并且手动调用 rs.read() 方法消费值，这种情况下，流式静止的，必须循环调用 read()</li><li>使用 node:stream/promise 的 pipeline()，流编排函数</li></ul><p>生产者有静止状态、流动状态和关闭状态，初始为静止状态，在调用了pipe和被监听了data事件后变为流动状态</p><h2 id="node-stream-writeable" tabindex="-1">node:stream.Writeable <a class="header-anchor" href="#node-stream-writeable" aria-label="Permalink to &quot;node:stream.Writeable&quot;">​</a></h2><h3 id="获得消费者-1" tabindex="-1">获得消费者 <a class="header-anchor" href="#获得消费者-1" aria-label="Permalink to &quot;获得消费者&quot;">​</a></h3><ul><li>构造函数</li></ul><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Writeable</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  write</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">chunk</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">encoding</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">cb</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">){</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    process</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(chunk)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    cb</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span></code></pre></div><ul><li>从其他API获得，文件流，标准流，网络流，压缩流</li></ul><h3 id="使用消费者-1" tabindex="-1">使用消费者 <a class="header-anchor" href="#使用消费者-1" aria-label="Permalink to &quot;使用消费者&quot;">​</a></h3><ul><li>让Readable对接</li><li>监听drain事件</li><li>监听writeable事件，手动调用ws.write()生产值</li><li>pipeline</li></ul><p>消费者有静止状态、流动状态和关闭状态，初始为静止状态，被对接pipe和被监听了drain事件后变为流动状态 <img src="`+s+'" alt="alt text"></p><h2 id="生成器" tabindex="-1">生成器 <a class="header-anchor" href="#生成器" aria-label="Permalink to &quot;生成器&quot;">​</a></h2><p>生成器函数 <code>function* generator()</code>，调用后返回一个生成器，生成器可以间断执行生成器函数中的代码。在生成器函数中，可以使用 <code>yield</code> 关键字进行分割代码，将一个大型的任务切割成一个个小的任务，特别是非常多次的循环任务，在循环中使用 yield，可以将循环拆分成多次子任务。生成器是一个迭代器，同时又是一个可迭代对象，因为生成器的[Symbol.iterator]键值指向了自身。生成器函数语法是可读流和可写流的语法糖，甚至是上位替代。</p>',30)]))}const b=i(n,[["render",h]]);export{g as __pageData,b as default};
