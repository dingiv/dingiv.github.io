import{_ as a,c as i,o as t,ae as l}from"./chunks/framework.BHrE6nLq.js";const h=JSON.parse('{"title":"MVC","description":"","frontmatter":{},"headers":[],"relativePath":"design/mvc/index.md","filePath":"design/mvc/index.md"}'),r={name:"design/mvc/index.md"};function o(n,e,d,c,s,m){return t(),i("div",null,e[0]||(e[0]=[l('<h1 id="mvc" tabindex="-1">MVC <a class="header-anchor" href="#mvc" aria-label="Permalink to &quot;MVC&quot;">​</a></h1><p>MVC架构是传统而经典的程序设计模式，它通过将视图和数据进行分离之后，使得程序的各个部分功能更加集中，职责明确，使得程序更加容易维护。</p><h2 id="mvc架构" tabindex="-1">MVC架构 <a class="header-anchor" href="#mvc架构" aria-label="Permalink to &quot;MVC架构&quot;">​</a></h2><p>MVC架构将程序分为三个部分：模型（Model）、视图（View）和控制器（Controller）。</p><ul><li>模型（Model）：负责处理数据和业务逻辑，包括数据的获取、存储、更新等操作。</li><li>视图（View）：负责展示数据，包括数据的展示方式、样式等。</li><li>控制器（Controller）：负责接收用户的输入，并根据用户的输入调用模型和视图进行处理。</li></ul><h2 id="mvc架构的优点" tabindex="-1">MVC架构的优点 <a class="header-anchor" href="#mvc架构的优点" aria-label="Permalink to &quot;MVC架构的优点&quot;">​</a></h2><ul><li>代码结构清晰，职责明确，易于维护和扩展。</li><li>可以实现视图和数据的分离，使得视图和数据的修改互不影响。</li></ul>',7)]))}const p=a(r,[["render",o]]);export{h as __pageData,p as default};
