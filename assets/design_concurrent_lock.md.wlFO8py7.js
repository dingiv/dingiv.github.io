import{_ as i,c as a,o as t,ae as n}from"./chunks/framework.CBTkueSR.js";const c=JSON.parse('{"title":"同步原语","description":"","frontmatter":{},"headers":[],"relativePath":"design/concurrent/lock.md","filePath":"design/concurrent/lock.md"}'),h={name:"design/concurrent/lock.md"};function l(e,s,p,k,d,r){return t(),a("div",null,[...s[0]||(s[0]=[n(`<h1 id="同步原语" tabindex="-1">同步原语 <a class="header-anchor" href="#同步原语" aria-label="Permalink to &quot;同步原语&quot;">​</a></h1><p>同步原语（synchronization primitives）是用于协调多个线程或进程对共享资源的访问，防止数据竞争和状态不一致的关键工具。同步原语分为线程级和进程级，进程级往往需要内核的支持。</p><p>大多数语言都是 C 语言系的，C 语言中的锁为上层高级语言提供底层支持。</p><h2 id="线程同步原语" tabindex="-1">线程同步原语 <a class="header-anchor" href="#线程同步原语" aria-label="Permalink to &quot;线程同步原语&quot;">​</a></h2><p>线程同步原语（Linux 下基于 <code>pthread</code>）。这些原语定义在 <code>&lt;pthread.h&gt;</code> 中，仅在线程之间共享内存的环境下使用。</p><h3 id="互斥锁" tabindex="-1">互斥锁 <a class="header-anchor" href="#互斥锁" aria-label="Permalink to &quot;互斥锁&quot;">​</a></h3><p>作用：实现互斥访问，<strong>一次只允许一个线程进入临界区</strong>。 常用函数：</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">pthread_mutex_init</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">pthread_mutex_lock</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">pthread_mutex_unlock</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">pthread_mutex_destroy</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span></code></pre></div><h3 id="自旋锁" tabindex="-1">自旋锁 <a class="header-anchor" href="#自旋锁" aria-label="Permalink to &quot;自旋锁&quot;">​</a></h3><ul><li>比互斥锁更轻量，在锁短时间持有时效率更高。</li><li><strong>线程会忙等（不断循环）直到获得锁</strong>，适合嵌入式或无调度环境。</li><li>函数：</li></ul><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">pthread_spin_init</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">pthread_spin_lock</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">pthread_spin_unlock</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">pthread_spin_destroy</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span></code></pre></div><h3 id="读写锁" tabindex="-1">读写锁 <a class="header-anchor" href="#读写锁" aria-label="Permalink to &quot;读写锁&quot;">​</a></h3><ul><li>允许多个线程同时读，但写操作必须独占。</li><li>用于读多写少的场景。</li><li>函数：</li></ul><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">pthread_rwlock_init</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">pthread_rwlock_rdlock</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">pthread_rwlock_wrlock</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">pthread_rwlock_unlock</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span></code></pre></div><h3 id="条件变量" tabindex="-1">条件变量 <a class="header-anchor" href="#条件变量" aria-label="Permalink to &quot;条件变量&quot;">​</a></h3><ul><li>用于线程之间的<strong>等待/通知</strong>机制，配合互斥锁使用。</li><li>类似于“事件队列”中的 wait/signal。</li><li>函数：</li></ul><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">pthread_cond_wait</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">pthread_cond_signal</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">pthread_cond_broadcast</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span></code></pre></div><h3 id="屏障" tabindex="-1">屏障 <a class="header-anchor" href="#屏障" aria-label="Permalink to &quot;屏障&quot;">​</a></h3><ul><li>使一组线程在某个点<strong>同步并等待</strong>，直到所有线程都到达屏障。</li><li>用于阶段性分批执行的线程协作。</li></ul><h2 id="乐观锁" tabindex="-1">乐观锁 <a class="header-anchor" href="#乐观锁" aria-label="Permalink to &quot;乐观锁&quot;">​</a></h2><p>尝试拿锁，如果拿不到就再次尝试，如果再拿不到直接放弃操作，返回失败。乐观锁是一种设计思维，而不是固定的</p><table tabindex="0"><thead><tr><th>特点</th><th>乐观锁</th><th>悲观锁</th></tr></thead><tbody><tr><td>加锁方式</td><td>不加锁，更新时检测冲突</td><td>加锁，访问时就互斥</td></tr><tr><td>冲突代价</td><td>冲突时失败或重试，代价较高</td><td>冲突时阻塞等待</td></tr><tr><td>并发性能</td><td>并发高，适合读多写少</td><td>并发低，适合写多或强一致性</td></tr><tr><td>实现方式</td><td>版本号 / 时间戳 / CAS</td><td>显式锁（mutex）/ 行锁 / 表锁</td></tr></tbody></table><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">CREATE</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> TABLE</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> product</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    id </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">INT</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> PRIMARY KEY</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    stock </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">INT</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    version</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> INT</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">-- A 线程</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">UPDATE</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> product </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">SET</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> stock </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 9</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">version</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 6</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> WHERE</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> id </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> AND</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> version</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">-- B 线程，失败，因为 version 不正确</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">UPDATE</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> product </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">SET</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> stock </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 9</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">version</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 6</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> WHERE</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> id </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> AND</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> version</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre></div><h2 id="原子操作原语" tabindex="-1">原子操作原语 <a class="header-anchor" href="#原子操作原语" aria-label="Permalink to &quot;原子操作原语&quot;">​</a></h2><p>定义在 <code>&lt;stdatomic.h&gt;</code> 或 GCC 内建函数中，<strong>无需加锁，使用 CPU 指令实现并发安全</strong>。</p><p><code>atomic_int</code>、<code>atomic_bool</code>、<code>atomic_flag</code> 等</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">atomic_int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> count </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">atomic_fetch_add</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">count</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><p>用于无锁队列、自旋锁等高性能场景。</p><h2 id="进程间同步原语" tabindex="-1">进程间同步原语 <a class="header-anchor" href="#进程间同步原语" aria-label="Permalink to &quot;进程间同步原语&quot;">​</a></h2><p>用于<strong>多个进程之间同步/通信</strong>，多数涉及内核支持：</p><h3 id="信号量" tabindex="-1">信号量 <a class="header-anchor" href="#信号量" aria-label="Permalink to &quot;信号量&quot;">​</a></h3><ul><li>头文件：<code>&lt;semaphore.h&gt;</code></li><li>区分为<strong>线程间同步</strong>（无名信号量）与<strong>进程间同步</strong>（命名信号量或放在共享内存中）</li><li>函数：</li></ul><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sem_init</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sem_wait</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sem_post</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sem_destroy</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span></code></pre></div><h3 id="futex-fast-userspace-mutex-linux-特有" tabindex="-1">futex（Fast Userspace Mutex Linux 特有） <a class="header-anchor" href="#futex-fast-userspace-mutex-linux-特有" aria-label="Permalink to &quot;futex（Fast Userspace Mutex Linux 特有）&quot;">​</a></h3><ul><li>系统调用级别的原语，允许<strong>用户态等待锁竞争失败时才进入内核态</strong>，用于构建高性能锁。</li><li>原型：</li></ul><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> futex</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">uaddr</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> op</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> struct</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> timespec </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">timeout</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">uaddr2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> val3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><p>通常不直接调用 <code>futex()</code>，而是由 <code>pthread</code>、glibc、Rust、Go 等线程库内部使用。</p><h2 id="使用对比表" tabindex="-1">使用对比表 <a class="header-anchor" href="#使用对比表" aria-label="Permalink to &quot;使用对比表&quot;">​</a></h2><table tabindex="0"><thead><tr><th>原语</th><th>用于</th><th>粒度</th><th>需要内核支持</th><th>适合场景</th></tr></thead><tbody><tr><td><code>mutex</code></td><td>线程</td><td>中等</td><td>否（用户空间）</td><td>常规临界区保护</td></tr><tr><td><code>rwlock</code></td><td>线程</td><td>中等</td><td>否</td><td>多读少写的资源</td></tr><tr><td><code>cond</code></td><td>线程</td><td>中等</td><td>是（可能休眠）</td><td>等待事件或条件发生</td></tr><tr><td><code>atomic</code></td><td>线程/进程</td><td>小</td><td>否</td><td>简单数值/标志更新</td></tr><tr><td><code>spinlock</code></td><td>线程</td><td>小</td><td>否</td><td>短时间争用</td></tr><tr><td><code>barrier</code></td><td>线程</td><td>中等</td><td>否</td><td>多线程阶段同步</td></tr><tr><td><code>sem_t</code></td><td>线程/进程</td><td>中等</td><td>是</td><td>计数信号量场景</td></tr><tr><td><code>futex</code></td><td>线程/进程</td><td>高级</td><td>是</td><td>构建低延迟锁机制</td></tr></tbody></table>`,39)])])}const E=i(h,[["render",l]]);export{c as __pageData,E as default};
