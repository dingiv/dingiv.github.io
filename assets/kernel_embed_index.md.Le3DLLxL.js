import{_ as d,c as e,o as a,ae as r}from"./chunks/framework.CBTkueSR.js";const c=JSON.parse('{"title":"嵌入式","description":"","frontmatter":{"title":"嵌入式","order":30},"headers":[],"relativePath":"kernel/embed/index.md","filePath":"kernel/embed/index.md"}'),o={name:"kernel/embed/index.md"};function n(l,t,i,h,s,_){return a(),e("div",null,[...t[0]||(t[0]=[r('<h1 id="嵌入式系统开发" tabindex="-1">嵌入式系统开发 <a class="header-anchor" href="#嵌入式系统开发" aria-label="Permalink to &quot;嵌入式系统开发&quot;">​</a></h1><p>在微型计算系统中，嵌入式开发通常面临资源受限的环境。开发者需要针对特定硬件进行应用程序设计，这些应用程序可能直接运行在裸机上，也可能运行在低资源实时操作系统（RTOS）上，或者在资源稍高的平台运行嵌入式 Linux。</p><p>嵌入式开发强调对系统层的控制，包括硬件接口管理、驱动开发、实时任务调度、通信协议实现、固件开发与移植等。与通用计算不同，嵌入式系统的开发者必须兼顾性能、功耗和可靠性，常常需要直接操作寄存器、中断和外设。</p><p>在开发语言上，C 语言仍然是主流，汇编用于性能关键或底层初始化场景。在高性能嵌入式平台，C++ 也被广泛使用，尤其是在图形界面和应用框架开发中。</p><h2 id="平台分级" tabindex="-1">平台分级 <a class="header-anchor" href="#平台分级" aria-label="Permalink to &quot;平台分级&quot;">​</a></h2><p>嵌入式平台根据性能规格、资源容量和生态环境有明显差异。不同平台适合不同的开发方式和软件生态，主要可以按 RAM、Flash 和 CPU 性能划分如下：</p><table tabindex="0"><thead><tr><th>级别</th><th>RAM</th><th>Flash</th><th>CPU 类型</th><th>典型应用实例</th></tr></thead><tbody><tr><td>裸机级</td><td>&lt; 1 MB</td><td>&lt; 10 MB</td><td>8/16/32 位低频 MCU，几十到几百 MHz</td><td>传感器、简单控制器（温控器、智能开关）、LED、工业仪表</td></tr><tr><td>RTOS 级</td><td>1 ~ 16 MB</td><td>&lt; 128 MB</td><td>32 位 MCU /低端 SoC，几十到几百 MHz</td><td>工业 HMI、手持设备、传感器网关、智能家电、轻量 GUI（LVGL）</td></tr><tr><td>嵌入式 Linux 级</td><td>16 ~ 128 MB</td><td>&lt; 1 GB</td><td>ARM Cortex-A5/A7/A8 或类似中端 SoC</td><td>framebuffer GUI、Qt Embedded、SDL2 应用、网络服务、触摸屏 HMI</td></tr><tr><td>Linux 级</td><td>&gt; 128MB</td><td>&gt; 1GB</td><td>ARM Cortex-A53/A72、x86 SoC</td><td>高端 HMI、工业平板、Flutter/Qt GUI、视频播放、多任务处理</td></tr></tbody></table>',7)])])}const M=d(o,[["render",n]]);export{c as __pageData,M as default};
