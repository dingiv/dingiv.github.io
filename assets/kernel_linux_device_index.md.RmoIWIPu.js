import{_ as i,c as a,o as n,ae as t}from"./chunks/framework.Dgg8-8ov.js";const g=JSON.parse('{"title":"设备管理","description":"","frontmatter":{"title":"设备管理","order":50},"headers":[],"relativePath":"kernel/linux/device/index.md","filePath":"kernel/linux/device/index.md"}'),h={name:"kernel/linux/device/index.md"};function l(k,s,p,e,r,d){return n(),a("div",null,s[0]||(s[0]=[t(`<h1 id="设备管理" tabindex="-1">设备管理 <a class="header-anchor" href="#设备管理" aria-label="Permalink to &quot;设备管理&quot;">​</a></h1><p>硬件设备管理是操作系统的核心职责之一。在冯诺依曼架构下，设备主要就是 <strong>CPU、内存和外设</strong>。CPU 和内存会采用一些单独的管理机制，对此之外的其他设备，采用一种较为统一的管理机制，即<strong>驱动</strong>。</p><h2 id="设备管理分层" tabindex="-1">设备管理分层 <a class="header-anchor" href="#设备管理分层" aria-label="Permalink to &quot;设备管理分层&quot;">​</a></h2><p>Linux 设备管理包括从上层虚拟文件接口到底层硬件的整套链路。</p><ul><li>设备抽象层</li><li>设备驱动层</li><li>物理硬件层</li></ul><h2 id="物理硬件层" tabindex="-1">物理硬件层 <a class="header-anchor" href="#物理硬件层" aria-label="Permalink to &quot;物理硬件层&quot;">​</a></h2><p>物理硬件层，操作系统需要使用<strong>硬件接口</strong>来完成对硬件的管理和数据传输，无须关心硬件内部的具体实现。从硬件接口类型来看，设备的类型主要有两种：<strong>总线设备和平台设备</strong>。总线设备的硬件接口和平台设备的硬件接口有所不同，总线设备的硬件接口需要通过<strong>总线协议</strong>来定义，而平台设备的硬件接口通过<strong>内核自定义</strong>，具体是通过<strong>通过设备树或 ACPI</strong> 来描述。</p><h3 id="总线设备" tabindex="-1"><a href="/kernel/embed/bus/">总线设备</a> <a class="header-anchor" href="#总线设备" aria-label="Permalink to &quot;[总线设备](/kernel/embed/bus/)&quot;">​</a></h3><p>总线设备：通过标准总线协议（如 PCI、USB、I2C、SPI）连接的硬件设备，由总线驱动管理，支持动态探测和枚举。正如其他协议一样，协议的出现可以明确双发通信的流程，使得流程规范化、共识化。</p><p>理解总线设备硬件接口，需要结合总线协议规定的硬件行为（设备探测、设备枚举、资源配置等）来理解，在此之上操作才知道如何控制总线设备。但幸运的是，总线设备往往配有一个总线控制器，该控制器实现硬件级别的设备管理，操作系统无需关心过多的设备管理功能，只需要安装总线控制器的驱动，从而调用总线的驱动，让总线控制器来帮忙管理总线设备即可，简化了操作系统的复杂度。</p><h3 id="平台设备" tabindex="-1"><a href="/kernel/embed/bus/platform">平台设备</a> <a class="header-anchor" href="#平台设备" aria-label="Permalink to &quot;[平台设备](/kernel/embed/bus/platform)&quot;">​</a></h3><p>平台设备：SoC 集成或非标准协议的硬件设备（如 UART、GPIO），通过设备树或 ACPI 静态描述，不支持动态枚举。</p><blockquote><p><strong>设备树</strong>是一个 Linux 内核提供的一个自定义硬件接口的机制，多见于 arm 平台和嵌入式设备，通过编写一个特殊的 dts 文件，然后在内核启动的时候加载进入内核，作为内核启动配置来让内核识别自定义的硬件设备的接口。</p><p><strong>ACPI</strong> 是一种标准化规范，通过表格（如 DSDT、SSDT）文件描述硬件配置、电源管理和设备关系，主要用于 x86 和部分 ARM 系统，同样在内核启动的时候加载到内核中，用于作为配置让内核识别自定义的硬件。</p></blockquote><p>平台设备的管理依赖于特定硬件实现，很多硬件厂商自研了专有硬件，嵌入到了特定的平台上，此时使用原版的 Linux 是无法探测这些这些硬件的，所有需要为 Linux 编写<strong>设备树</strong>，使得 Linux 知道该硬件，即在物理内存地址空间的某一段上存在着一个怎样的硬件。</p><h3 id="数据传输" tabindex="-1">数据传输 <a class="header-anchor" href="#数据传输" aria-label="Permalink to &quot;数据传输&quot;">​</a></h3><p>数据面的数据传输机制决定设备数据面编程方式和通信性能。平台设备往往更加现代和规范，其使用较为先进的 MMIO 方式，可以将设备的寄存器空间映射到物理内存空间中，从而让操作系统以访问内存的方式来访问设备，简化了操作系统的复杂度。</p><table tabindex="0"><thead><tr><th>设备类型</th><th>MMIO</th><th>Port I/O</th></tr></thead><tbody><tr><td>总线设备</td><td>广泛使用（如 PCIe、USB、I2C）</td><td>老式设备（如 ISA、传统 PCI）</td></tr><tr><td>平台设备</td><td>主要接口（如 UART、GPIO）</td><td>极少使用（仅 x86 特定场景）</td></tr></tbody></table><h2 id="设备驱动层" tabindex="-1">设备驱动层 <a class="header-anchor" href="#设备驱动层" aria-label="Permalink to &quot;设备驱动层&quot;">​</a></h2><p>驱动是操作系统定义的一套 <a href="./driver">SPI（Service Provider Interface）</a>。linux 定义了一套驱动程序的规范，要求驱动程序应该长什么样。硬件厂商如果希望 linux 系统能够管理他们生产的硬件，那么就需要实现 linux 定义的 SPI。操作系统无需关心硬件接口的细节，而通过驱动来间接访问和管理设备，而驱动程序则以内核模块的方式加载进内核。</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">struct</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> device_driver {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    const</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> char</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">name;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">probe)(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">struct</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> device </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">dev);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span></code></pre></div><h2 id="设备抽象层" tabindex="-1">设备抽象层 <a class="header-anchor" href="#设备抽象层" aria-label="Permalink to &quot;设备抽象层&quot;">​</a></h2><p>硬件设备管理的主要工作是使用系统定义的 C 语言数据结构来抽象物理设备，并且将设备的驱动关联到数据结构之上，系统操作设备的时候无须直接访问硬件，而是通过驱动来间接访问。结构化抽象的主要目标是硬件的描述信息和设备支持的操作函数。</p><p>内核提供统一的<strong>设备模型</strong>管理框架，用于管理设备，并其绑定驱动，提供设备发现、绑定和资源管理的结构化方式。Linux 中的设备使用一个树形结构来保存，驻留在内存中，以 <code>struct device</code> 结构作为一个树节点，支持树的正反向遍历，可以将其称为<strong>设备模型树</strong>。</p><blockquote><p>注意这个设备模型树和用于设备探测的设备树配置文件不是一个东西。</p></blockquote><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">struct</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> device {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    struct</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> device </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">parent;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">     // 父设备（如总线或控制器）</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    struct</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> bus_type </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">bus;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">      // 所属总线（如 PCI、USB）</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    struct</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> device_driver </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">driver;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // 关联驱动</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    void</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">platform_data;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">       // 平台数据</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    struct</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> list_head bus_list;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // 总线设备链表</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span></code></pre></div><p>根据设备的访问方式，主要有三种设备类型，三种类型最终都需要关联成一个 device，然后纳入到设备模型树中管理。</p><ul><li>字符设备：只支持顺序访问（如 /dev/ttyS0），使用 <code>struct cdev</code> 定义。由于字符设备只支持顺序访问，所以字符设备可以直接被看作是一个文件，然后可以直接对其进行读写操作，但是不可以进行文件指针的移动，也就是不支持 <code>lseek</code> 操作。</li><li>块设备：随机访问（如 /dev/sda），使用 <code>struct block_device</code> 定义。一个块设备可以支持随机访问，并且包含多个文件，我们可以随机访问其中的某一个文件，并对单个文件使用 lseek 操作。</li><li>网络设备：如 eth0，使用 <code>struct net_device</code> 定义。一个网络设备上游调用者不是直接来自于</li></ul><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 总线设备，通过总线设备的驱动来管理这条总线上的所有设备</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">struct</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> bus_type {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    const</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> char</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">name;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">      // 总线名称</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">match)(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">struct</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> device </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">dev, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">struct</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> device_driver </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">drv);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 字符设备</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">struct</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> cdev {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    struct</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> kobject kobj;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    struct</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> module </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">owner;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    const</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> struct</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> file_operations </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ops;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">struct</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> file_operations {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    struct</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> module </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">owner;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    ssize_t</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">read)(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">struct</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> file </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">char</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> __user </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">size_t</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">loff_t</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    ssize_t</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">write)(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">struct</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> file </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> char</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> __user </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">size_t</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">loff_t</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">open)(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">struct</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> inode </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">struct</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> file </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">release)(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">struct</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> inode </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">struct</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> file </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 还有 ioctl、mmap、poll 等等</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span></code></pre></div><p>使用抽象，操作系统还可以定义虚拟设备，即使操作系统没看到真实的物理设备，也可以假装有一个，然后使用软件的实现来模拟底层硬件的行为。其中虚拟网卡便是非常典型的例子，虚拟磁盘就是非常典型的例子。</p>`,29)]))}const c=i(h,[["render",l]]);export{g as __pageData,c as default};
