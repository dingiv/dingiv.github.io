import{_ as l,c as e,o as i,ae as a}from"./chunks/framework.Cthp9TdA.js";const s=JSON.parse('{"title":"开机流程","description":"","frontmatter":{},"headers":[],"relativePath":"kernel/linux/boot.md","filePath":"kernel/linux/boot.md"}'),t={name:"kernel/linux/boot.md"};function r(d,o,p,n,u,c){return i(),e("div",null,o[0]||(o[0]=[a('<h1 id="开机流程" tabindex="-1">开机流程 <a class="header-anchor" href="#开机流程" aria-label="Permalink to &quot;开机流程&quot;">​</a></h1><h2 id="_1-供电" tabindex="-1">1. 供电 <a class="header-anchor" href="#_1-供电" aria-label="Permalink to &quot;1. 供电&quot;">​</a></h2><p>在系统通电时，主板等周边设备上的小型专用处理器将优先工作。其中挂载在CPU总线上的小型控制器EC（Embedded Controller）负责计算机的电源管理工作。EC控制电源供应单元为硬件系统供电，系统各部分进入各自的供电流程，包括CPU、内存、南北桥芯片等。</p><blockquote><p>周边设备的控制器芯片不承担主要的计算任务，但会帮助协调各个硬件之间的工作。</p></blockquote><p>各个硬件的供电顺序有所先后，一般顺序是：CPU、内存、南北桥、扩展卡和外围设备、启动存储等。电源控制单元在确保电源供应一切顺利后，向EC发出信号表示供电完毕。供电成功后，EC通知主板上的各个芯片组，正式开启计算机的启动流程。</p><p>首先，南北桥进行交互：</p><ol><li>南桥向北桥发出正常信号</li><li>北桥收到南桥信号，并向CPU发送正常信号</li><li>CPU开始工作</li></ol><blockquote><p>供电单元可以进行交流电到直流电的转化，并保持电源电压的稳定。</p></blockquote><h2 id="_2-bios-uefi-寻找-boot-loader" tabindex="-1">2. BIOS/UEFI 寻找 Boot Loader <a class="header-anchor" href="#_2-bios-uefi-寻找-boot-loader" aria-label="Permalink to &quot;2. BIOS/UEFI 寻找 Boot Loader&quot;">​</a></h2><p>CPU开始工作后的第一个程序是BIOS/UEFI程序，它是主板上的固件。BIOS程序会：</p><ol><li>扫描和检查设备</li><li>初始化硬件系统（主板、内存、CPU、显卡等）</li><li>确保设备能够正常工作（POST - Power-On Self Test）</li><li>为内存条和MMIO设备分配地址空间</li><li>将地址空间连成连续的数组空间（地址位数取决于机器位宽，通常为32位或64位）</li></ol><p>在硬件检查完毕后，BIOS/UEFI程序尝试依次从多个外部存储设备中加载Boot Loader程序到内存中。如果某个设备中没有找到，则尝试从下一个存储设备加载。一旦加载成功，计算机的执行权就移交给Boot Loader。</p><p>BIOS加载Boot Loader时，从外部存储设备的启动扇区（MBR - Master Boot Record）加载，并将其放置到内存中的约定区域。</p><p>BIOS查找Boot Loader程序的顺序可能如下：</p><ul><li>硬盘</li><li>USB</li><li>CDROM</li><li>网卡（pxe启动）</li></ul><p>BIOS通常提供基于终端的配置界面，允许用户自定义引导过程，例如修改启动介质的优先级。</p><blockquote><p>一些硬件层面的功能（如网卡的SR-IOV功能）不一定会被启用。如需启用，需要重启机器并提前修改BIOS配置。</p></blockquote><h2 id="_3-boot-loader-加载操作系统" tabindex="-1">3. Boot Loader 加载操作系统 <a class="header-anchor" href="#_3-boot-loader-加载操作系统" aria-label="Permalink to &quot;3. Boot Loader 加载操作系统&quot;">​</a></h2><p>Boot Loader是存放在操作系统镜像盘中约定区域的一段程序。它被BIOS程序加载并执行，负责：</p><ol><li>把操作系统的文件加载到内存中</li><li>初始化操作系统</li><li>将计算机的执行权移交给操作系统</li></ol><blockquote><p>Boot Loader执行时，CPU处于Real模式，只能访问1MB的内存空间，没有内存保护。Boot Loader利用硬盘的分区表、文件系统信息和操作系统核心文件，实现从实模式到保护模式的切换，以及从硬盘到内存的数据传输。</p></blockquote><p>Boot Loader根据MBR中的磁盘分区信息，找到活动分区（操作系统文件所在的分区），然后：</p><ol><li>找到操作系统可执行文件</li><li>加载操作系统到指定的内存区域</li><li>跳转CPU到该区域，开始执行操作系统</li></ol><p>常见的Boot Loader实现包括：</p><ul><li>GRUB（广泛用于Linux系统）</li><li>LILO</li><li>NTLDR</li><li>BOOTMGR</li></ul><p>在Linux文件系统中，Boot Loader通常位于<code>/boot</code>目录下。</p><h2 id="_4-操作系统启动" tabindex="-1">4. 操作系统启动 <a class="header-anchor" href="#_4-操作系统启动" aria-label="Permalink to &quot;4. 操作系统启动&quot;">​</a></h2><p>以Linux系统为例，当系统启动时：</p><ol><li>BIOS/UEFI程序在上电时对设备进行扫描检查和初始化</li><li>为内存条和MMIO设备分配地址空间</li><li>将地址空间连成连续的数组空间</li><li>操作系统接管硬件管理</li></ol>',29)]))}const b=l(t,[["render",r]]);export{s as __pageData,b as default};
