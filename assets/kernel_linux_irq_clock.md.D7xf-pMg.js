import{_ as s,c as a,o as l,ae as t}from"./chunks/framework.Dgg8-8ov.js";const d=JSON.parse('{"title":"时钟","description":"","frontmatter":{},"headers":[],"relativePath":"kernel/linux/irq/clock.md","filePath":"kernel/linux/irq/clock.md"}'),e={name:"kernel/linux/irq/clock.md"};function n(h,i,r,p,k,o){return l(),a("div",null,i[0]||(i[0]=[t(`<h1 id="时钟" tabindex="-1">时钟 <a class="header-anchor" href="#时钟" aria-label="Permalink to &quot;时钟&quot;">​</a></h1><p>Linux 的时钟系统是内核管理时间的核心机制，用于跟踪系统时间、调度任务、处理定时器和支持设备驱动。以下是简洁直接的讲解，聚焦 Linux 时钟系统的核心组件、实现和与设备管理的联系，符合你的“简短直接”要求，适合深入理解内核开发者视角。</p><hr><h3 id="_1-时钟系统概述" tabindex="-1">1. <strong>时钟系统概述</strong> <a class="header-anchor" href="#_1-时钟系统概述" aria-label="Permalink to &quot;1. **时钟系统概述**&quot;">​</a></h3><ul><li><strong>作用</strong>: <ul><li>提供系统时间（wall time）和单调时间（monotonic time）。</li><li>支持任务调度、定时器、中断和设备驱动（如 RTC、定时器设备）。</li></ul></li><li><strong>核心组件</strong>: <ul><li><strong>硬件时钟</strong>: 如 RTC（实时时钟）、HPET（高精度事件定时器）、TSC（时间戳计数器）。</li><li><strong>软件时钟</strong>: 内核中的时间管理代码（如 <code>jiffies</code>、高精度定时器 hrtimer）。</li><li><strong>时间接口</strong>: 用户空间通过系统调用（如 <code>clock_gettime()</code>）访问。</li></ul></li></ul><hr><h3 id="_2-硬件时钟" tabindex="-1">2. <strong>硬件时钟</strong> <a class="header-anchor" href="#_2-硬件时钟" aria-label="Permalink to &quot;2. **硬件时钟**&quot;">​</a></h3><ul><li><strong>RTC（实时时钟）</strong>: <ul><li>硬件设备，电池供电，保存系统时间（即使关机）。</li><li>Linux 驱动：<code>drivers/rtc/</code>，设备文件 <code>/dev/rtc0</code>。</li><li>例：读取 RTC：<div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">hwclock</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --show</span></span></code></pre></div></li></ul></li><li><strong>HPET</strong>: <ul><li>高精度定时器，提供纳秒级精度。</li><li>驱动：<code>drivers/char/hpet.c</code>，替代老式 PIT（可编程中断定时器）。</li></ul></li><li><strong>TSC</strong>: <ul><li>CPU 时间戳计数器，基于 CPU 时钟周期。</li><li>例：读取 TSC：<div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">u64 tsc </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> rdtsc</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span></code></pre></div></li></ul></li><li><strong>ACPI PM 定时器</strong>: <ul><li>用于低精度计时，常见于 x86 系统。</li></ul></li></ul><hr><h3 id="_3-软件时钟" tabindex="-1">3. <strong>软件时钟</strong> <a class="header-anchor" href="#_3-软件时钟" aria-label="Permalink to &quot;3. **软件时钟**&quot;">​</a></h3><ul><li><strong>jiffies</strong>: <ul><li>全局计数器，基于定时器中断（<code>CONFIG_HZ</code> 定义频率，如 1000 Hz）。</li><li>例：访问当前 jiffies：<div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">unsigned</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> long</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> jiffies;</span></span></code></pre></div></li></ul></li><li><strong>hrtimer（高精度定时器）</strong>: <ul><li>纳秒级精度，替代 jiffies 用于高精度场景。</li><li>例：创建 hrtimer：<div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">struct</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> hrtimer timer;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">hrtimer_init</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">timer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, CLOCK_MONOTONIC, HRTIMER_MODE_REL);</span></span></code></pre></div></li></ul></li><li><strong>clocksource</strong>: <ul><li>抽象硬件时钟源（如 TSC、HPET），提供统一接口。</li><li>例：查看当前时钟源：<div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">cat</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /sys/devices/system/clocksource/clocksource0/current_clocksource</span></span></code></pre></div></li></ul></li><li><strong>clockevent</strong>: <ul><li>管理定时器中断，驱动调度和定时器。</li><li>例：注册 clockevent 设备：<div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">struct</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> clock_event_device dev;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">clockevents_config_and_register</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">dev</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, freq, min_delta, max_delta);</span></span></code></pre></div></li></ul></li></ul><hr><h3 id="_4-时间管理机制" tabindex="-1">4. <strong>时间管理机制</strong> <a class="header-anchor" href="#_4-时间管理机制" aria-label="Permalink to &quot;4. **时间管理机制**&quot;">​</a></h3><ul><li><strong>时间获取</strong>: <ul><li>内核通过 <code>clocksource</code> 读取硬件时间（如 TSC）。</li><li>用户空间：<code>clock_gettime(CLOCK_REALTIME)</code>（壁钟时间）或 <code>CLOCK_MONOTONIC</code>（单调时间）。</li></ul></li><li><strong>定时器</strong>: <ul><li><strong>软定时器</strong>：基于 jiffies，延迟执行任务。<div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">struct</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> timer_list timer;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setup_timer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">timer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, callback, data);</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">mod_timer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">timer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, jiffies </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> msecs_to_jiffies</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1000</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">));</span></span></code></pre></div></li><li><strong>高精度定时器</strong>：hrtimer，纳秒级精度。</li></ul></li><li><strong>时间同步</strong>: <ul><li>NTP（网络时间协议）或 PTP（精确时间协议）同步系统时间。</li><li>例：同步时间：<div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ntpd</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -q</span></span></code></pre></div></li></ul></li></ul><hr><h3 id="_5-linux-内核实现" tabindex="-1">5. <strong>Linux 内核实现</strong> <a class="header-anchor" href="#_5-linux-内核实现" aria-label="Permalink to &quot;5. **Linux 内核实现**&quot;">​</a></h3><ul><li><strong>核心代码</strong>: <ul><li><code>kernel/time/</code>：管理 jiffies、hrtimer、clocksource。</li><li><code>arch/*/time.c</code>：架构特定的时钟初始化（如 x86 的 <code>tsc.c</code>）。</li></ul></li><li><strong>clocksource 框架</strong>: <ul><li>抽象硬件时钟，优先选择高精度时钟（如 TSC &gt; HPET &gt; PIT）。</li><li>例：注册时钟源：<div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">struct</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> clocksource cs </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    .name </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;tsc&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    .read </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> read_tsc,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">clocksource_register_hz</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">cs</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, freq);</span></span></code></pre></div></li></ul></li><li><strong>tick 机制</strong>: <ul><li>定时器中断（tick）驱动调度器和时间更新。</li><li>支持动态 tick（<code>CONFIG_NO_HZ</code>）降低功耗。</li></ul></li><li><strong>sysfs 集成</strong>: <ul><li>时钟信息暴露在 <code>/sys/devices/system/clocksource</code>。</li></ul></li></ul><hr><h3 id="_6-与设备管理的联系" tabindex="-1">6. <strong>与设备管理的联系</strong> <a class="header-anchor" href="#_6-与设备管理的联系" aria-label="Permalink to &quot;6. **与设备管理的联系**&quot;">​</a></h3><ul><li><strong>RTC 设备</strong>: <ul><li>字符设备（<code>/dev/rtc0</code>），提供时间读取和设置。</li><li>驱动与 udev 协作，动态创建设备文件。</li></ul></li><li><strong>定时器设备</strong>: <ul><li>HPET、PIT 驱动为设备提供高精度中断。</li><li>例：HPET 驱动注册：<div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">hpet_register</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">hpet_dev</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, hpet_base, freq);</span></span></code></pre></div></li></ul></li><li><strong>设备驱动</strong>: <ul><li>使用定时器（如 hrtimer）实现超时、轮询。</li><li>例：USB 驱动使用定时器处理 URB 超时：<div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">hrtimer_start</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">urb</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">timer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ktime_set</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, timeout), HRTIMER_MODE_REL);</span></span></code></pre></div></li></ul></li></ul><hr><h3 id="_7-总结" tabindex="-1">7. <strong>总结</strong> <a class="header-anchor" href="#_7-总结" aria-label="Permalink to &quot;7. **总结**&quot;">​</a></h3><ul><li><strong>硬件时钟</strong>: RTC（持久时间）、HPET/TSC（高精度）。</li><li><strong>软件时钟</strong>: jiffies（低精度）、hrtimer（高精度）、clocksource（抽象）。</li><li><strong>功能</strong>: 时间获取、定时器、调度、时间同步。</li><li><strong>设备管理</strong>: RTC 作为字符设备，定时器支持驱动中断和超时。</li></ul><p>如果你想深入某部分（如 hrtimer 实现、TSC 校准）或需要代码示例、图表，请告诉我！</p>`,24)]))}const g=s(e,[["render",n]]);export{d as __pageData,g as default};
