import{_ as e,c as i,o as a,ae as r}from"./chunks/framework.BtEkjhVd.js";const l="/assets/types-transform.DoZFzVlZ.png",m=JSON.parse('{"title":"隐式类型转换","description":"","frontmatter":{},"headers":[],"relativePath":"client/js/basic/type-transform.md","filePath":"client/js/basic/type-transform.md"}'),o={name:"client/js/basic/type-transform.md"};function d(n,t,s,c,p,u){return a(),i("div",null,t[0]||(t[0]=[r('<h1 id="隐式类型转换" tabindex="-1">隐式类型转换 <a class="header-anchor" href="#隐式类型转换" aria-label="Permalink to &quot;隐式类型转换&quot;">​</a></h1><p>7 种基本类型：</p><ul><li>boolean</li><li>number(0、NaN、Infinity)</li><li>string</li><li>bigint</li><li>symbol</li><li>undefined</li><li>null</li></ul><p>前五个为实值，后两个为空值</p><h2 id="四种类型转换方法" tabindex="-1">四种类型转换方法 <a class="header-anchor" href="#四种类型转换方法" aria-label="Permalink to &quot;四种类型转换方法&quot;">​</a></h2><ol><li><p>toBoolean： undefined、null、0、NaN、&#39;&#39;，会被转化为 false，其它为 true；</p><p>推荐触发方式：<code>!()</code></p></li><li><p>toNumber：</p><table tabindex="0"><thead><tr><th>原值</th><th>转化值</th></tr></thead><tbody><tr><td>undefined</td><td>NaN</td></tr><tr><td>null</td><td>0</td></tr><tr><td>NaN</td><td>NaN</td></tr><tr><td>Infinity</td><td>Infinity</td></tr><tr><td>&#39;&#39;</td><td>0</td></tr><tr><td>true</td><td>1</td></tr><tr><td>false</td><td>0</td></tr><tr><td>&#39;42&#39;</td><td>42（此处与 parseFloat 不同，字符串解析失败为 NaN）</td></tr></tbody></table><p>推荐触发：<code>+()</code></p></li><li><p>toString： 调用 <code>toString()</code> 方法将任意一个值转换为 string， 推荐触发方式：<code>() + &#39;&#39;</code></p></li><li><p>toPrimitive：（潜在） 先调用 <code>valueOf()</code> 方法，如果得到了一个基本类型，则返回，否则调用 toString()，强制转换为 string 类型</p></li></ol><h2 id="隐式类型转换位置" tabindex="-1">隐式类型转换位置 <a class="header-anchor" href="#隐式类型转换位置" aria-label="Permalink to &quot;隐式类型转换位置&quot;">​</a></h2><ol><li>在一个需要单个 bool 值的地方，if()、while()、!()、for、&amp;&amp;、|| 等，发生 toBoolean 转换。</li><li>被 -、*、/ 单或双操作作用时，和 + 单操作作用时，（1）如果有引用类型则先发生 toPrimitive 转换；（2）而后发生 toNumber 转换。</li><li>被 + 双操作作用时，（1）如果有引用类型则进行 toPrimitive 转换；（2）如果其中一侧是 String 类型，那么另一侧就会发生 toString 转换；（3）否则，发生 toNumber 转换。</li><li>在 == 操作符作用时， （1）如果两侧为引用类型，则比较指针，指针相同返回 true，不同为 false。 （2）如果一侧为引用类型一侧为基本类型，则引用类型发生 toPrimitive 转换。 （3）如果为不同类型，则将其中的实值进行 toNumber 转换。 （4）比较，实值实值直接比，实值比空值为 false，空值比空值为 true。 （注意：<code>undefined == null</code> 为 true，<code>NaN == NaN</code> 为 false）</li></ol><p><img src="'+l+'" alt="alt text"></p>',9)]))}const h=e(o,[["render",d]]);export{m as __pageData,h as default};
