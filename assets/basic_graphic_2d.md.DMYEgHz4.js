import{_ as e,c as t,o as i,ae as l}from"./chunks/framework.CBTkueSR.js";const u=JSON.parse('{"title":"2D 图形","description":"","frontmatter":{},"headers":[],"relativePath":"basic/graphic/2d.md","filePath":"basic/graphic/2d.md"}'),s={name:"basic/graphic/2d.md"};function n(o,a,r,d,c,h){return i(),t("div",null,[...a[0]||(a[0]=[l(`<h1 id="_2d-图形" tabindex="-1">2D 图形 <a class="header-anchor" href="#_2d-图形" aria-label="Permalink to &quot;2D 图形&quot;">​</a></h1><h2 id="_2d-表达" tabindex="-1">2D 表达 <a class="header-anchor" href="#_2d-表达" aria-label="Permalink to &quot;2D 表达&quot;">​</a></h2><p>计算机上的平面图片可以简单看作是一个 u32 类型的数组，每一个 u32 代表了图片上的一个像素的颜色值，从左到右，从上到下，依次排列，一个尺寸为 800*600 的图片，大小就是 <code>480_000 * 4 byte = 1.83 MB</code>，不讨论压缩。一个 u32 数据中的每 8 位代表一个颜色通道的值，一般的，颜色通道模型使用的是 RGBA，各自取值范围都是 0-255，值越大表示该通道的值的颜色混入的越多，对于透明度通道则是，0 的时候代表完全透明，255 的时候代表不透明。在计算机上呈现一个图片需要做的主要工作就是提供一个 u32 颜色数组，从而让其在屏幕的某个矩形区域内进行显示。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>R        G        B        α</span></span>
<span class="line"><span>00000000 00000000 00000000 00000000</span></span>
<span class="line"><span>255      255      255      255</span></span></code></pre></div><h2 id="图片压缩" tabindex="-1">图片压缩 <a class="header-anchor" href="#图片压缩" aria-label="Permalink to &quot;图片压缩&quot;">​</a></h2><p>一个 800*600 的图片消耗的存储空间竟然高达 1.8 MB，这对于计算机的存储是非常不友好的。为了缩减图形大小，往往需要对图片进行压缩。常见的图片压缩算法分为无损压缩和有损压缩两大类：</p><h3 id="无损压缩" tabindex="-1">无损压缩 <a class="header-anchor" href="#无损压缩" aria-label="Permalink to &quot;无损压缩&quot;">​</a></h3><ul><li>PNG（Portable Network Graphics）：采用 DEFLATE 算法（结合 LZ77 和哈夫曼编码），能够在不损失任何图像信息的前提下有效压缩图片，适用于对图像质量要求极高的场合，如图标、界面元素、插画等。</li><li>RLE（Run-Length Encoding）游程编码：通过记录连续相同像素的长度来压缩数据，适合色块单一、重复度高的图片。</li><li>LZW（Lempel-Ziv-Welch）：广泛用于 GIF 格式，通过字典编码方式压缩数据，适合动画、简单色彩图像。</li></ul><h3 id="有损压缩" tabindex="-1">有损压缩 <a class="header-anchor" href="#有损压缩" aria-label="Permalink to &quot;有损压缩&quot;">​</a></h3><ul><li>JPEG（Joint Photographic Experts Group）：通过离散余弦变换（DCT）将图像分块处理，去除人眼不敏感的高频信息，实现高压缩比，适用于照片、写实图片等对细节损失不敏感的场景。</li><li>WebP：由 Google 推出的现代图片格式，支持有损和无损压缩，结合了预测编码、变换编码等多种技术，压缩效率高，适合网页图片。</li></ul><p>选择合适的压缩算法，可以在保证视觉质量的前提下，大幅减少图片的存储和传输成本。</p><h2 id="图片优化" tabindex="-1">图片优化 <a class="header-anchor" href="#图片优化" aria-label="Permalink to &quot;图片优化&quot;">​</a></h2>`,12)])])}const _=e(s,[["render",n]]);export{u as __pageData,_ as default};
