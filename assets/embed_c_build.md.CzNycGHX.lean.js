import{_ as e,c as i,a0 as l,o}from"./chunks/framework.p2VkXzrt.js";const m=JSON.parse('{"title":"构建系统","description":"","frontmatter":{},"headers":[],"relativePath":"embed/c/build.md","filePath":"embed/c/build.md"}'),t={name:"embed/c/build.md"};function n(r,a,d,s,h,c){return o(),i("div",null,a[0]||(a[0]=[l('<h1 id="构建系统" tabindex="-1">构建系统 <a class="header-anchor" href="#构建系统" aria-label="Permalink to &quot;构建系统&quot;">​</a></h1><h2 id="构建平台和编译器" tabindex="-1">构建平台和编译器 <a class="header-anchor" href="#构建平台和编译器" aria-label="Permalink to &quot;构建平台和编译器&quot;">​</a></h2><h3 id="windows" tabindex="-1">Windows <a class="header-anchor" href="#windows" aria-label="Permalink to &quot;Windows&quot;">​</a></h3><ul><li>MSVC：windows 默认编译器，原生结合 Visual Studio 使用</li><li>MinGW：GCC 在 Windows 上的移植版本，需要手动安装</li></ul><h3 id="linux" tabindex="-1">Linux <a class="header-anchor" href="#linux" aria-label="Permalink to &quot;Linux&quot;">​</a></h3><ul><li>Make：Linux 默认构建系统</li><li>GCC：GCC 9.3.0</li><li>Clang：Clang 10.0.0</li></ul><h3 id="macos" tabindex="-1">MacOS <a class="header-anchor" href="#macos" aria-label="Permalink to &quot;MacOS&quot;">​</a></h3><ul><li>Clang：MacOS 默认编译器</li></ul><h2 id="跨平台构建系统" tabindex="-1">跨平台构建系统 <a class="header-anchor" href="#跨平台构建系统" aria-label="Permalink to &quot;跨平台构建系统&quot;">​</a></h2><h3 id="cmake" tabindex="-1">CMake <a class="header-anchor" href="#cmake" aria-label="Permalink to &quot;CMake&quot;">​</a></h3><h3 id="meson" tabindex="-1">Meson <a class="header-anchor" href="#meson" aria-label="Permalink to &quot;Meson&quot;">​</a></h3>',11)]))}const b=e(t,[["render",n]]);export{m as __pageData,b as default};
