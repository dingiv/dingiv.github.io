import{_ as e,c as l,o as a,ae as r}from"./chunks/framework.BtEkjhVd.js";const _=JSON.parse('{"title":"驱动","description":"","frontmatter":{},"headers":[],"relativePath":"kernel/linux/driver/index.md","filePath":"kernel/linux/driver/index.md"}'),t={name:"kernel/linux/driver/index.md"};function o(n,i,d,u,p,s){return a(),l("div",null,i[0]||(i[0]=[r('<h1 id="驱动" tabindex="-1">驱动 <a class="header-anchor" href="#驱动" aria-label="Permalink to &quot;驱动&quot;">​</a></h1><h3 id="io设备" tabindex="-1">IO设备 <a class="header-anchor" href="#io设备" aria-label="Permalink to &quot;IO设备&quot;">​</a></h3><p>操作系统内核不直接操作设备：</p><ul><li>通过调用设备的驱动程序完成对设备的读写</li><li>驱动程序由硬件厂商实现</li><li>使用设备时，将驱动程序以内核模块方式加载进内核</li><li>操作系统声明统一的SPI（Service Program Interface），由硬件厂商实现</li></ul><h3 id="可编程io-dma" tabindex="-1">可编程IO/DMA <a class="header-anchor" href="#可编程io-dma" aria-label="Permalink to &quot;可编程IO/DMA&quot;">​</a></h3><p>根据数据传输过程是否需要CPU参与，IO分为两类：</p><ol><li><p>可编程IO</p><ul><li>操作系统通过读写IO设备寄存器控制设备</li><li>分为两种类型： <ul><li>PMIO（Port-Mapped Input/Output）：通过访问IO端口控制设备</li><li>MMIO（Memory-Mapped Input/Output）：设备寄存器和缓冲区映射到物理内存中</li></ul></li></ul></li><li><p>DMA（Direct Memory Access）</p><ul><li>外设与内存之间交换数据的接口技术</li><li>数据传输过程无须CPU控制</li><li>数据拷贝和搬运由外设专用处理器完成</li><li>操作系统通过驱动程序提前告知外设数据拷贝位置</li><li>外设直接访问内存，将数据放到指定位置</li><li>完成后发起中断通知CPU</li></ul></li></ol>',7)]))}const h=e(t,[["render",o]]);export{_ as __pageData,h as default};
