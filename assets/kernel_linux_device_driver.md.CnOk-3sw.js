import{_ as s,c as a,o as e,ae as t}from"./chunks/framework.Cd-3tpCq.js";const o=JSON.parse('{"title":"驱动接口","description":"","frontmatter":{},"headers":[],"relativePath":"kernel/linux/device/driver.md","filePath":"kernel/linux/device/driver.md"}'),n={name:"kernel/linux/device/driver.md"};function l(h,i,p,k,d,r){return e(),a("div",null,i[0]||(i[0]=[t(`<h1 id="驱动接口" tabindex="-1">驱动接口 <a class="header-anchor" href="#驱动接口" aria-label="Permalink to &quot;驱动接口&quot;">​</a></h1><p>Linux 驱动程序是操作系统与硬件之间的桥梁。它们通过一套标准接口（SPI，Service Provider Interface）与内核交互，由硬件厂商或开发者实现，保证了内核对各种硬件的统一管理和访问。</p><blockquote><p>在软件开发中，API（Application Programming Interface）通常由库的实现者定义，供调用者使用；而 SPI（Service Provider Interface）则由库的使用者定义，要求第三方实现者按照规范实现接口。Linux 驱动开发中的 SPI 由内核定义，硬件厂商实现，保证了驱动的可插拔和标准化。</p><p>驱动也是内核软件开发中，最为常见的需求，硬件厂商可以为自己的硬件实现驱动，内核开发者也可以通过</p></blockquote><p>驱动根据设备类型进行分类，字符设备驱动、块设备驱动、网络设备，大多数时候开发者需要开发的是字符设备驱动。因此，本文将主要介绍字符设备驱动的编写。</p><table tabindex="0"><thead><tr><th>设备类型</th><th>字符设备驱动</th><th>块设备驱动</th><th>网络设备驱动</th></tr></thead><tbody><tr><td>典型设备</td><td>串口、按键、LED 等</td><td>硬盘、SD 卡</td><td>网卡</td></tr><tr><td>数据模型</td><td>顺序读写，适合初学者和大多数的定制硬件</td><td>支持随机访问和缓冲</td><td>面向数据包，与协议栈紧密结合</td></tr><tr><td>复杂度</td><td>最常见，开发简单，需求广泛</td><td>接口复杂，复杂度高，较少见</td><td>最少见，专业性强</td></tr><tr><td>开发者</td><td>多为自定义硬件开发者</td><td>多由存储厂商开发</td><td>通常由网卡厂商主导</td></tr><tr><td>上层</td><td>VFS</td><td>块设备子系统</td><td>网络协议栈</td></tr></tbody></table><p>驱动注册是驱动开发的第一步。以字符设备为例，驱动需要实现一组 <code>file_operations</code> 操作函数，并通过 <code>register_chrdev()</code> 或 <code>cdev_add()</code> 注册到内核。块设备和网络设备也有类似的注册流程，分别通过 <code>register_blkdev()</code>、<code>register_netdev()</code> 等接口完成注册。</p><h2 id="字符设备驱动" tabindex="-1">字符设备驱动 <a class="header-anchor" href="#字符设备驱动" aria-label="Permalink to &quot;字符设备驱动&quot;">​</a></h2><ol><li><p>实现 file_operations</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#include</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &lt;linux/module.h&gt;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#include</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &lt;linux/fs.h&gt;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#include</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &lt;linux/uaccess.h&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">static</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> my_open</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">struct</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> inode </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">inode</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">struct</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> file </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">file</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">static</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> ssize_t</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> my_read</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">struct</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> file </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">file</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">char</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> __user </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">buf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">size_t</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> count</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">loff_t</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">ppos</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 示例：返回一个字符</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    char</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> data </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;A&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">copy_to_user</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(buf, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">data, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">return</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> -</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">EFAULT;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">static</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> struct</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> file_operations my_fops </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    .owner </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> THIS_MODULE,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    .open </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> my_open,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    .read </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> my_read,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span></code></pre></div><p>file_operations 是供 vfs 层的 inode 来调用的接口，开发者需要实现几个基本的文件操作，然后当用户访问字符设备的时候就会触发相应的处理函数。</p></li><li><p>注册和卸载驱动</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#define</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> MY_MAJOR</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 240</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">static</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> __init </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">my_init</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">void</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> register_chrdev</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(MY_MAJOR, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;mychardev&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">my_fops);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">static</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> void</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> __exit </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">my_exit</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">void</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    unregister_chrdev</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(MY_MAJOR, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;mychardev&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">module_init</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(my_init);</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">module_exit</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(my_exit);</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">MODULE_LICENSE</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;GPL&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><p>使用 <code>module_init</code>，<code>module_exit</code> 等宏来注册设备驱动的初始化函数和卸载函数，当驱动被内核加载的时候会调用初始化函数，开发者可以在这个钩子中完成组件的初始化工作，同理卸载函数完成资源清理和注销。</p></li><li><p>编译与加载</p><ul><li>编译：<code>make</code></li><li>加载模块：<code>sudo insmod mychardev.ko</code></li><li>卸载模块：<code>sudo rmmod mychardev</code></li><li>创建设备节点：<code>sudo mknod /dev/mychardev c 240 0</code></li><li>读测试：<code>cat /dev/mychardev</code></li></ul><p>这样就完成了一个最基础的 Linux 字符设备驱动的编写和测试流程。实际开发中可根据硬件需求扩展 open、read、write、ioctl 等接口。</p></li></ol><h2 id="生命周期钩子" tabindex="-1">生命周期钩子 <a class="header-anchor" href="#生命周期钩子" aria-label="Permalink to &quot;生命周期钩子&quot;">​</a></h2><p>内核为驱动提供了丰富的接口函数和生命周期钩子，帮助开发者管理驱动的加载、运行和卸载过程。</p><h3 id="模块加载与卸载" tabindex="-1">模块加载与卸载 <a class="header-anchor" href="#模块加载与卸载" aria-label="Permalink to &quot;模块加载与卸载&quot;">​</a></h3><ul><li><code>module_init(init_func)</code>：指定驱动模块加载时调用的初始化函数。</li><li><code>module_exit(exit_func)</code>：指定驱动模块卸载时调用的清理函数。</li><li><code>MODULE_LICENSE(&quot;GPL&quot;)</code>：声明模块许可证，避免内核加载警告。</li></ul><h3 id="设备注册与注销" tabindex="-1">设备注册与注销 <a class="header-anchor" href="#设备注册与注销" aria-label="Permalink to &quot;设备注册与注销&quot;">​</a></h3><ul><li><code>register_chrdev()</code> / <code>unregister_chrdev()</code>：注册/注销字符设备。</li><li><code>cdev_init()</code> / <code>cdev_add()</code> / <code>cdev_del()</code>：初始化、添加、删除 cdev 结构体。</li><li><code>register_blkdev()</code> / <code>unregister_blkdev()</code>：注册/注销块设备。</li><li><code>register_netdev()</code> / <code>unregister_netdev()</code>：注册/注销网络设备。</li></ul><h3 id="文件操作钩子-file-operations" tabindex="-1">文件操作钩子（file_operations） <a class="header-anchor" href="#文件操作钩子-file-operations" aria-label="Permalink to &quot;文件操作钩子（file_operations）&quot;">​</a></h3><p>驱动通过实现 <code>struct file_operations</code> 结构体，定义 open、read、write、ioctl 等操作方法。这些方法为用户空间提供了一种以访问文件的方式来访问硬件的接口。</p><ul><li><code>.open</code>：打开设备文件时调用。</li><li><code>.release</code>：关闭设备文件时调用。</li><li><code>.read</code>：从设备读取数据时调用。</li><li><code>.write</code>：向设备写入数据时调用。</li><li><code>.ioctl</code> / <code>.unlocked_ioctl</code>：设备控制命令处理。</li><li><code>.mmap</code>：内存映射支持。</li><li><code>.poll</code> / <code>.llseek</code> 等：其他高级操作。</li></ul><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">struct</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> file_operations my_fops </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    .open </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> my_open,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    .read </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> my_read,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    .write </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> my_write,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    .release </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> my_release,</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 还可以有 ioctl、mmap、poll 等</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span></code></pre></div><h3 id="设备探测与移除" tabindex="-1">设备探测与移除 <a class="header-anchor" href="#设备探测与移除" aria-label="Permalink to &quot;设备探测与移除&quot;">​</a></h3><ul><li><code>probe(struct platform_device *pdev)</code>：设备被发现时自动调用，常用于平台设备和总线设备。</li><li><code>remove(struct platform_device *pdev)</code>：设备被移除时调用。</li></ul><h3 id="中断与定时器" tabindex="-1">中断与定时器 <a class="header-anchor" href="#中断与定时器" aria-label="Permalink to &quot;中断与定时器&quot;">​</a></h3><ul><li><code>request_irq()</code> / <code>free_irq()</code>：注册/释放中断处理函数。</li><li><code>tasklet_init()</code> / <code>tasklet_schedule()</code>：软中断与下半部处理。</li><li><code>timer_setup()</code> / <code>add_timer()</code> / <code>del_timer()</code>：定时器相关。</li></ul><p>许多硬件事件通过中断通知驱动。驱动通过 <code>request_irq()</code> 注册中断处理函数，中断处理函数负责响应硬件事件，完成数据采集、状态更新等任务。</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">request_irq</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(irq, handler, IRQF_SHARED, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;my_device&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">NULL</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><h3 id="电源管理钩子" tabindex="-1">电源管理钩子 <a class="header-anchor" href="#电源管理钩子" aria-label="Permalink to &quot;电源管理钩子&quot;">​</a></h3><ul><li><code>suspend()</code> / <code>resume()</code>：设备挂起与唤醒时调用，常用于节能和休眠。</li></ul>`,26)]))}const c=s(n,[["render",l]]);export{o as __pageData,c as default};
