import{_ as e,c as t,o as r,ae as n}from"./chunks/framework.Dgg8-8ov.js";const l="/assets/syscall.6k2T9StR.png",u=JSON.parse('{"title":"系统调用","description":"","frontmatter":{},"headers":[],"relativePath":"kernel/linux/syscall/index.md","filePath":"kernel/linux/syscall/index.md"}'),s={name:"kernel/linux/syscall/index.md"};function i(o,a,c,d,_,h){return r(),t("div",null,a[0]||(a[0]=[n('<h1 id="系统调用" tabindex="-1">系统调用 <a class="header-anchor" href="#系统调用" aria-label="Permalink to &quot;系统调用&quot;">​</a></h1><p>系统调用存储在进程的内存的内核空间中，而进程间共享内核空间。进程需要通过执行一个特殊的提权指令触发用户态向内核态的切换，使得 CPU 的权限级别上升，从而访问特权指令和进行敏感操作。用户态的进程只有有限的两种合法方式去访问高级的指令和操作，一个是系统调用，另一个是触发错误处理。 <img src="'+l+'" alt=""></p><p>系统调用也是系统给予上层的功能封装，上层无需关注硬件管理、内存、网络通信等繁琐细节，直接使用系统能力，即可完成功能的实现。</p><p>Linux 用户进程如果希望访问内核空间代码，只能够通过系统调用，但是系统调用的接口是有限的</p><p>以每个子系统为模块，每个模块都提供相关的系统调用，常见的系统调用如下：</p><h2 id="内存管理" tabindex="-1">内存管理 <a class="header-anchor" href="#内存管理" aria-label="Permalink to &quot;内存管理&quot;">​</a></h2><h2 id="文件管理" tabindex="-1">文件管理 <a class="header-anchor" href="#文件管理" aria-label="Permalink to &quot;文件管理&quot;">​</a></h2><h2 id="" tabindex="-1"><a class="header-anchor" href="#" aria-label="Permalink to &quot;&quot;">​</a></h2>',8)]))}const m=e(s,[["render",i]]);export{u as __pageData,m as default};
