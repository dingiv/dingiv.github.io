import{_ as i,c as a,o as l,ae as t}from"./chunks/framework.Dgg8-8ov.js";const c=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"kernel/linux/device/d.md","filePath":"kernel/linux/device/d.md"}'),e={name:"kernel/linux/device/d.md"};function n(h,s,d,p,o,r){return l(),a("div",null,s[0]||(s[0]=[t(`<h1 id="" tabindex="-1"><a class="header-anchor" href="#" aria-label="Permalink to &quot;&quot;">​</a></h1><p>Linux 设备管理是内核开发者的核心知识领域，涵盖设备驱动、设备文件、资源管理和硬件交互等内容。以下是内核开发者需要了解的关键主题，简洁直接，聚焦核心点，适合深入学习 Linux 设备管理。如果需要更详细的解释、代码示例或图表，请告诉我！</p><hr><h3 id="_1-设备模型与总线" tabindex="-1">1. <strong>设备模型与总线</strong> <a class="header-anchor" href="#_1-设备模型与总线" aria-label="Permalink to &quot;1. **设备模型与总线**&quot;">​</a></h3><ul><li><strong>设备模型</strong>：内核的统一设备模型（<code>struct device</code>、<code>struct device_driver</code>），管理设备和驱动的绑定。</li><li><strong>总线</strong>：PCI/PCIe、USB、I2C、SPI 等总线机制，设备发现与枚举。 <ul><li>例：PCI 设备探测：<div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">struct</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> pci_driver my_driver </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    .probe </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> my_probe,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    .id_table </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> my_id_table,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span></code></pre></div></li></ul></li><li><strong>sysfs</strong>：<code>/sys</code> 文件系统，暴露设备和驱动信息。 <ul><li>例：查看设备信息：<div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">cat</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /sys/class/tty/ttyS0/device/uevent</span></span></code></pre></div></li></ul></li></ul><hr><h3 id="_2-设备驱动开发" tabindex="-1">2. <strong>设备驱动开发</strong> <a class="header-anchor" href="#_2-设备驱动开发" aria-label="Permalink to &quot;2. **设备驱动开发**&quot;">​</a></h3><ul><li><strong>驱动类型</strong>： <ul><li>字符设备：顺序访问（如 <code>/dev/ttyS0</code>），使用 <code>struct cdev</code>。</li><li>块设备：随机访问（如 <code>/dev/sda</code>），使用 <code>struct block_device</code>。</li><li>网络设备：如 <code>eth0</code>，使用 <code>struct net_device</code>.</li></ul></li><li><strong>驱动框架</strong>： <ul><li>注册设备和驱动：<div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">register_chrdev</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(major, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;my_device&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">fops</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div></li><li>文件操作：实现 <code>open</code>、<code>read</code>、<code>write</code>、<code>ioctl</code> 等。</li><li>中断处理：注册 IRQ 处理程序：<div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">request_irq</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(irq, handler, IRQF_SHARED, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;my_device&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">NULL</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div></li></ul></li><li><strong>模块开发</strong>：使用 <code>module_init</code>、<code>module_exit</code> 编写可加载模块。</li></ul><hr><h3 id="_3-设备文件与用户空间交互" tabindex="-1">3. <strong>设备文件与用户空间交互</strong> <a class="header-anchor" href="#_3-设备文件与用户空间交互" aria-label="Permalink to &quot;3. **设备文件与用户空间交互**&quot;">​</a></h3><ul><li><strong>设备文件</strong>：<code>/dev</code> 目录中的块设备和字符设备文件（如 <code>/dev/sda</code>、<code>/dev/ttyS0</code>）。</li><li><strong>udev</strong>：动态创建设备文件，处理热插拔事件。 <ul><li>例：检查 udev 规则：<div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">cat</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /etc/udev/rules.d/</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span></span></code></pre></div></li></ul></li><li><strong>VFS 集成</strong>：设备文件通过 VFS（虚拟文件系统）与用户空间交互，调用驱动的 <code>file_operations</code>。</li></ul><hr><h3 id="_4-硬件访问机制" tabindex="-1">4. <strong>硬件访问机制</strong> <a class="header-anchor" href="#_4-硬件访问机制" aria-label="Permalink to &quot;4. **硬件访问机制**&quot;">​</a></h3><ul><li><strong>MMIO（Memory-Mapped I/O）</strong>： <ul><li>映射设备寄存器到内核虚拟地址：<div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">void</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> __iomem </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">regs </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ioremap</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">0x</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">fe900000</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">0x</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1000</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div></li></ul></li><li><strong>端口 I/O</strong>：x86 架构的 <code>inb</code>、<code>outb</code> 访问 I/O 端口。</li><li><strong>DMA</strong>：直接内存访问，使用 <code>dma_alloc_coherent()</code> 分配一致性内存。</li><li><strong>中断</strong>：管理硬件中断，处理 IRQ 冲突和共享。</li></ul><hr><h3 id="_5-物理内存与虚拟地址管理" tabindex="-1">5. <strong>物理内存与虚拟地址管理</strong> <a class="header-anchor" href="#_5-物理内存与虚拟地址管理" aria-label="Permalink to &quot;5. **物理内存与虚拟地址管理**&quot;">​</a></h3><ul><li><strong>物理内存</strong>： <ul><li>使用 <code>mem_map</code> 和 <code>struct page</code> 跟踪物理页面。</li><li>Buddy 分配器分配连续页面：<div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">struct</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> page </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">page </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> alloc_pages</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(GFP_KERNEL, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div></li></ul></li><li><strong>虚拟地址</strong>： <ul><li>直接映射区（<code>PAGE_OFFSET</code>）、<code>vmalloc</code> 区域、MMIO 映射。</li><li>页表管理，CR3 存储物理基地址。</li></ul></li><li><strong>内存区域</strong>：<code>ZONE_DMA</code>、<code>ZONE_NORMAL</code>、<code>ZONE_HIGHMEM</code>。</li></ul><hr><h3 id="_6-设备资源管理" tabindex="-1">6. <strong>设备资源管理</strong> <a class="header-anchor" href="#_6-设备资源管理" aria-label="Permalink to &quot;6. **设备资源管理**&quot;">​</a></h3><ul><li><strong>资源分配</strong>： <ul><li>管理 IRQ、MMIO 地址、I/O 端口：<div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">request_mem_region</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">0x</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">fe900000</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">0x</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1000</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;my_device&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div></li></ul></li><li><strong>设备树</strong>：嵌入式系统中通过设备树（Device Tree）描述硬件。</li><li><strong>ACPI</strong>：x86 系统中通过 ACPI 表获取硬件资源。</li></ul><hr><h3 id="_7-电源管理" tabindex="-1">7. <strong>电源管理</strong> <a class="header-anchor" href="#_7-电源管理" aria-label="Permalink to &quot;7. **电源管理**&quot;">​</a></h3><ul><li><strong>PM 框架</strong>：支持设备的挂起（Suspend）、恢复（Resume）。 <ul><li>例：实现驱动的电源管理：<div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">static</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> struct</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> dev_pm_ops my_pm_ops </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    .suspend </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> my_suspend,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    .resume </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> my_resume,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span></code></pre></div></li></ul></li><li><strong>Runtime PM</strong>：动态管理设备电源状态，降低能耗。</li></ul><hr><h3 id="_8-并发与同步" tabindex="-1">8. <strong>并发与同步</strong> <a class="header-anchor" href="#_8-并发与同步" aria-label="Permalink to &quot;8. **并发与同步**&quot;">​</a></h3><ul><li><strong>锁机制</strong>： <ul><li>自旋锁（<code>spinlock_t</code>）：用于中断上下文。</li><li>互斥锁（<code>mutex</code>）：用于进程上下文。</li><li>例：<div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">DEFINE_SPINLOCK</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(my_lock);</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">spin_lock</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">my_lock</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div></li></ul></li><li><strong>原子操作</strong>：如 <code>atomic_t</code> 用于计数。</li><li><strong>中断上下文</strong>：区分中断上下文和进程上下文，避免睡眠操作。</li></ul><hr><h3 id="_9-调试与工具" tabindex="-1">9. <strong>调试与工具</strong> <a class="header-anchor" href="#_9-调试与工具" aria-label="Permalink to &quot;9. **调试与工具**&quot;">​</a></h3><ul><li><strong>调试工具</strong>： <ul><li><code>dmesg</code>：查看内核日志。</li><li><code>crash</code>：分析内核内存和页表。</li><li><code>ftrace</code>：跟踪驱动调用。</li></ul></li><li><strong>调试选项</strong>： <ul><li><code>CONFIG_DEBUG_KERNEL</code>、<code>CONFIG_DEBUG_PAGEALLOC</code> 等。</li><li>例：检查分配器日志：<div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">dmesg</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> |</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> grep</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> slab</span></span></code></pre></div></li></ul></li></ul><hr><h3 id="_10-子系统与设备管理" tabindex="-1">10. <strong>子系统与设备管理</strong> <a class="header-anchor" href="#_10-子系统与设备管理" aria-label="Permalink to &quot;10. **子系统与设备管理**&quot;">​</a></h3><ul><li><strong>TTY 子系统</strong>：管理终端设备（如 <code>/dev/ttyS0</code>）。</li><li><strong>帧缓冲子系统</strong>：管理显示设备（如 <code>/dev/fb0</code>）。</li><li><strong>输入子系统</strong>：处理键盘、鼠标等输入设备。</li><li><strong>网络子系统</strong>：管理网卡和协议栈。</li></ul><hr><h3 id="_11-内核模块与动态加载" tabindex="-1">11. <strong>内核模块与动态加载</strong> <a class="header-anchor" href="#_11-内核模块与动态加载" aria-label="Permalink to &quot;11. **内核模块与动态加载**&quot;">​</a></h3><ul><li><strong>模块开发</strong>： <ul><li>编写可加载驱动模块，动态扩展内核功能。</li><li>例：简单模块：<div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">static</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> __init </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">my_init</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">void</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) { </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; }</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">module_init</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(my_init);</span></span></code></pre></div></li></ul></li><li><strong>加载与卸载</strong>：<div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">modprobe</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> my_driver</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">rmmod</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> my_driver</span></span></code></pre></div></li></ul><hr><h3 id="_12-热插拔与设备发现" tabindex="-1">12. <strong>热插拔与设备发现</strong> <a class="header-anchor" href="#_12-热插拔与设备发现" aria-label="Permalink to &quot;12. **热插拔与设备发现**&quot;">​</a></h3><ul><li><strong>热插拔</strong>： <ul><li>通过 <code>udev</code> 处理设备插入/移除事件。</li><li>例：USB 设备插入触发：<div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">udevadm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> monitor</span></span></code></pre></div></li></ul></li><li><strong>设备枚举</strong>： <ul><li>总线驱动（如 PCI、USB）自动探测设备，匹配驱动。</li></ul></li></ul><hr><h3 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;总结&quot;">​</a></h3><p>内核开发者需要掌握：</p><ul><li>设备模型与总线机制。</li><li>驱动开发与硬件访问（MMIO、DMA、中断）。</li><li>设备文件与用户空间交互。</li><li>内存管理（<code>mem_map</code>、页表、分配器）。</li><li>资源分配、电源管理、并发控制。</li><li>调试工具与子系统（如 TTY、帧缓冲）。</li></ul><p>如果你想深入某主题（如驱动开发流程、MMIO 优化），或需要代码示例、图表，请告诉我！</p>`,43)]))}const g=i(e,[["render",n]]);export{c as __pageData,g as default};
