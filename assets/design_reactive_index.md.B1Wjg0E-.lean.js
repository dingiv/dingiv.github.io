import{_ as n,c as r,o as i,j as e,a as t}from"./chunks/framework.Dh1jimFm.js";const f=JSON.parse('{"title":"响应式编程","description":"","frontmatter":{},"headers":[],"relativePath":"design/reactive/index.md","filePath":"design/reactive/index.md"}'),l={name:"design/reactive/index.md"};function s(d,a,o,c,p,m){return i(),r("div",null,a[0]||(a[0]=[e("h1",{id:"响应式编程",tabindex:"-1"},[t("响应式编程 "),e("a",{class:"header-anchor",href:"#响应式编程","aria-label":'Permalink to "响应式编程"'},"​")],-1),e("p",null,"是一种基于函数式编程的编程范式，它强调数据同步的自动化，从而简化程序的编写过程，提高程序的可维护性。",-1),e("p",null,"进一步讲，响应式编程意味着副作用的自动化。",-1),e("ul",null,[e("li",null,"对于程序中的变量而言，变量之间存在依赖关系，当一个变量是从一个变量衍生出来的时候，那么上游的变量发生了变化的时候，同时就需要重新计算下游变量，进行数据的同步。在非响应式的环境中，这个同步数据的动作往往是手动实现的，而在响应式的环境中，这个动作由状态容器来完成。"),e("li",null,"对于 IO 操作而言，其向进程外同步数据，当一个变量发生变化的时候，需要向外界进行状态同步，那么这个操作在响应式的环境中，依然是由容器来完成。同时，接受外界的、上游的进程，进行的数据推送。")],-1),e("h2",{id:"js实现",tabindex:"-1"},[t("js实现 "),e("a",{class:"header-anchor",href:"#js实现","aria-label":'Permalink to "js实现"'},"​")],-1)]))}const h=n(l,[["render",s]]);export{f as __pageData,h as default};
