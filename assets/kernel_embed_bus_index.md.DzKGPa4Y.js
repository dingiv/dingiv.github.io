import{_ as s,c as a,o as l,ae as t}from"./chunks/framework.Dgg8-8ov.js";const c=JSON.parse('{"title":"总线协议","description":"","frontmatter":{},"headers":[],"relativePath":"kernel/embed/bus/index.md","filePath":"kernel/embed/bus/index.md"}'),e={name:"kernel/embed/bus/index.md"};function n(h,i,p,k,d,r){return l(),a("div",null,i[0]||(i[0]=[t(`<h1 id="总线协议" tabindex="-1">总线协议 <a class="header-anchor" href="#总线协议" aria-label="Permalink to &quot;总线协议&quot;">​</a></h1><h2 id="硬件行为" tabindex="-1">硬件行为 <a class="header-anchor" href="#硬件行为" aria-label="Permalink to &quot;硬件行为&quot;">​</a></h2><ul><li>设备探测：操作系统识别系统中存在硬件设备的过程，通过扫描总线来发现设备，支持热插拔特性，即支持动态探测；</li><li>设备枚举：为设备分配总线唯一标识（如地址、设备号），使其可被操作系统和驱动使用，一般是设备探测后的进一步过程；</li><li>资源配置：设置设备寄存器、分配资源，通常在设备枚举完成后，由总线驱动或内核在设备初始化（probe 阶段）时执行，包括： <ul><li>中断号（IRQ）</li><li>内存映射 I/O（MMIO）地址</li><li>I/O 端口</li><li>DMA 通道</li></ul></li><li>设备拔出：总线设备支持热插拔，即在操作系统不重启的情况下，动态添加和移除硬件设备；</li><li>电源管理：控制设备电源状态，使得设备进入休眠状态；</li><li>数据传输：设备成功配置，设备进入工作阶段，通过驱动程序中的数据传输函数进行数据读写数据；</li><li>中断处理：主要用于监听硬件事件，实现硬件级别的异步回调机制，包括数据接收、DMA 功能、错误处理等；</li></ul><h2 id="总线协议-1" tabindex="-1">总线协议 <a class="header-anchor" href="#总线协议-1" aria-label="Permalink to &quot;总线协议&quot;">​</a></h2><p>不同的设备通过各自的总线挂载到系统上，总线协议定义了硬件设备与 CPU、内存之间的通信规则，包括数据传输、设备发现、资源分配等生命周期的内容。这是硬件层面的内容，但它也提示了操作系统，应当以怎样的逻辑来管理这个总线上的硬件。</p><p>目前的硬件总线主要包括：PCI、USB、I2S 等，对于部分设备无挂载总线，使用自定义的方式进行注册；</p><h2 id="生命周期" tabindex="-1">生命周期 <a class="header-anchor" href="#生命周期" aria-label="Permalink to &quot;生命周期&quot;">​</a></h2><ul><li>设备发现</li><li>资源分配</li><li>数据传输</li></ul><h2 id="pci" tabindex="-1">PCI <a class="header-anchor" href="#pci" aria-label="Permalink to &quot;PCI&quot;">​</a></h2><h2 id="usb" tabindex="-1">USB <a class="header-anchor" href="#usb" aria-label="Permalink to &quot;USB&quot;">​</a></h2><h2 id="i2c" tabindex="-1">I2C <a class="header-anchor" href="#i2c" aria-label="Permalink to &quot;I2C&quot;">​</a></h2><h3 id="_1-总线" tabindex="-1">1. <strong>总线</strong> <a class="header-anchor" href="#_1-总线" aria-label="Permalink to &quot;1. **总线**&quot;">​</a></h3><p><strong>定义</strong>: 总线是 Linux 内核中用于连接和管理硬件设备与 CPU 的抽象模型，负责设备发现、资源分配和驱动绑定。常见总线包括 PCI/PCIe、USB、I2C、SPI、Platform等。</p><p><strong>核心功能</strong>:</p><ul><li><strong>设备发现</strong>: <ul><li>扫描硬件设备，识别设备 ID（如 PCI 的 Vendor/Device ID）。</li><li>例: PCI 总线扫描设备：<div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">struct</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> pci_dev </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">dev </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> pci_get_device</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(vendor, device, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">NULL</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div></li></ul></li><li><strong>资源管理</strong>: <ul><li>分配 IRQ、MMIO 地址、I/O 端口等。</li><li>例: 查看 PCI 资源：<div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">lspci</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -v</span></span></code></pre></div>输出：<div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>Region 0: Memory at fe900000 (64-bit, non-prefetchable) [size=1M]</span></span></code></pre></div></li></ul></li><li><strong>驱动绑定</strong>: <ul><li>匹配设备与驱动，调用驱动的 <code>probe</code> 函数。</li></ul></li><li><strong>层次结构</strong>: <ul><li>设备通过 <code>struct device</code> 组织为树状结构，父节点为总线或控制器。</li></ul></li></ul><p><strong>常见总线</strong>:</p><ul><li><strong>PCI/PCIe</strong>: 高性能设备（如网卡、GPU）。</li><li><strong>USB</strong>: 外设（如键盘、U盘）。</li><li><strong>I2C/SPI</strong>: 嵌入式低速设备（如传感器、EEPROM）。</li><li><strong>Platform</strong>: 非标准总线设备（如 SoC 集成外设）。</li></ul><hr><h3 id="_2-总线驱动" tabindex="-1">2. <strong>总线驱动</strong> <a class="header-anchor" href="#_2-总线驱动" aria-label="Permalink to &quot;2. **总线驱动**&quot;">​</a></h3><p><strong>定义</strong>: 总线驱动是内核模块，管理特定总线类型的设备探测、资源分配和驱动匹配，基于 Linux 设备模型（<code>struct bus_type</code>）实现。</p><p><strong>核心组件</strong>:</p><ul><li><strong>struct bus_type</strong>: <ul><li>定义总线类型，包含匹配和探测逻辑。</li><li>例: PCI 总线定义：<div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">struct</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> bus_type pci_bus_type </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    .name </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;pci&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    .match </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> pci_bus_match,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    .probe </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> pci_device_probe,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span></code></pre></div></li></ul></li><li><strong>struct device</strong>: <ul><li>表示总线上的设备，包含资源信息（如 MMIO 地址、IRQ）。</li></ul></li><li><strong>struct device_driver</strong>: <ul><li>表示驱动，定义 <code>probe</code>、<code>remove</code> 等操作。</li><li>例: PCI 驱动：<div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">struct</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> pci_driver my_driver </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    .name </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;my_driver&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    .id_table </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> my_id_table,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    .probe </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> my_probe,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span></code></pre></div></li></ul></li></ul><p><strong>工作机制</strong>:</p><ol><li><strong>设备探测</strong>: <ul><li>总线驱动扫描硬件（如 PCI 枚举），创建 <code>struct device</code>。</li><li>例: PCI 枚举：<div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">pci_register_driver</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">my_driver</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div></li></ul></li><li><strong>驱动匹配</strong>: <ul><li>总线通过 <code>bus_type.match</code> 比较设备 ID 和驱动的 <code>id_table</code>。</li><li>例: PCI ID 表：<div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">static</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> const</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> struct</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> pci_device_id my_id_table</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">[]</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    { </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">PCI_DEVICE</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">0x</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">8086</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">0x</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1234</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    { </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span></code></pre></div></li></ul></li><li><strong>资源分配</strong>: <ul><li>分配 IRQ、MMIO 地址等，存储在 <code>struct resource</code>。</li><li>例: 请求 MMIO：<div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">request_mem_region</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">0x</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">fe900000</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">0x</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1000</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;my_device&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div></li></ul></li><li><strong>驱动绑定</strong>: <ul><li>调用驱动的 <code>probe</code> 函数初始化设备。</li><li>例:<div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">static</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> my_probe</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">struct</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> pci_dev </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">dev</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> struct</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> pci_device_id </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">id</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></li></ul></li></ol><p><strong>典型需求</strong>:</p><ul><li>实现新总线驱动（如自定义 SoC 总线）。</li><li>支持热插拔（如 USB 设备插入）。</li><li>优化资源分配（如 DMA 通道）。</li></ul><hr><h3 id="_3-总线与总线驱动的关系" tabindex="-1">3. <strong>总线与总线驱动的关系</strong> <a class="header-anchor" href="#_3-总线与总线驱动的关系" aria-label="Permalink to &quot;3. **总线与总线驱动的关系**&quot;">​</a></h3><ul><li><strong>总线</strong>: <ul><li>提供硬件连接和通信协议（如 PCI 的 BAR 寄存器）。</li><li>定义设备模型的层次结构（<code>/sys/bus</code>）。</li></ul></li><li><strong>总线驱动</strong>: <ul><li>实现总线协议，管理设备发现、资源分配和驱动绑定。</li><li>通过 <code>sysfs</code> 暴露设备信息，供 udev 使用。</li><li>例: 查看 USB 设备：<div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ls</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /sys/bus/usb/devices</span></span></code></pre></div></li></ul></li></ul><hr><h3 id="_4-总结" tabindex="-1">4. <strong>总结</strong> <a class="header-anchor" href="#_4-总结" aria-label="Permalink to &quot;4. **总结**&quot;">​</a></h3><ul><li><strong>总线</strong>: 硬件与内核的连接抽象，负责设备发现、资源管理和层次组织。</li><li><strong>总线驱动</strong>: 内核模块，实现总线协议，管理设备探测、驱动匹配和资源分配。</li><li><strong>关系</strong>: 总线定义硬件接口，总线驱动实现内核管理，与设备模型和 udev 协作。</li></ul><p>如果你想深入某总线（如 PCI 的枚举流程、SPI 驱动实现）或需要代码示例、图表，请告诉我！</p><h2 id="io-管理" tabindex="-1">IO 管理 <a class="header-anchor" href="#io-管理" aria-label="Permalink to &quot;IO 管理&quot;">​</a></h2><p>IO 设备拥有独立的控制处理器，现代 IO 设备通过 MMIO 方式将自身寄存器地址空间映射到物理内存空间中，让 CPU 通过直接读写物理地址空间来控制 IO 设备。</p><h3 id="设备挂载" tabindex="-1">设备挂载 <a class="header-anchor" href="#设备挂载" aria-label="Permalink to &quot;设备挂载&quot;">​</a></h3><ol><li><p>设备识别和驱动加载</p><ul><li>识别设备：操作系统检测设备并分配设备文件（Linux 中通常位于<code>/dev/</code>目录下）</li><li>加载驱动：操作系统加载适当的驱动程序支持设备操作</li></ul></li><li><p>设备格式化</p><ul><li>存储设备需要经过格式化才能使用</li><li>格式化将物理存储空间划分为存储区域</li><li>为这些区域建立文件系统</li><li>未格式化的存储设备不能直接存储文件和数据</li></ul><p>文件系统格式化：</p><ul><li>文件系统是操作系统管理磁盘上文件的方式</li><li>不同操作系统使用不同的文件系统格式（ext4、NTFS、FAT32、exFAT 等）</li><li>分区表（MBR 或 GPT）定义设备上不同部分的布局和大小</li></ul><p>例如，在 Linux 中格式化磁盘分区：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sudo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> mkfs.ext4</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /dev/sda1</span></span></code></pre></div></li><li><p>挂载存储设备</p><ul><li>格式化后，存储设备的文件系统才可用</li><li>挂载操作将设备上的文件系统与操作系统的目录结构连接</li><li>用户可以通过路径访问存储设备的内容</li></ul><p>在 Linux 中挂载设备：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sudo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> mount</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /dev/sda1</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /mnt</span></span></code></pre></div></li><li><p>文件系统检查与修复</p><ul><li>文件系统可能因突然断电或设备损坏而不一致</li><li>操作系统执行文件系统检查（fsck）修复问题</li></ul><p>在 Linux 中手动运行文件系统检查：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sudo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> fsck</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /dev/sda1</span></span></code></pre></div></li><li><p>挂载配置（可选）</p><ul><li>可以将存储设备配置为系统启动时自动挂载</li><li>通过编辑<code>/etc/fstab</code>文件完成配置</li></ul><p>例如，添加以下行将设备<code>/dev/sda1</code>挂载到<code>/mnt</code>：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">/dev/sda1</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /mnt</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ext4</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> defaults</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2</span></span></code></pre></div></li></ol>`,37)]))}const g=s(e,[["render",n]]);export{c as __pageData,g as default};
