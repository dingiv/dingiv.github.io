import{_ as s,c as a,o as l,ae as n}from"./chunks/framework.Cthp9TdA.js";const o=JSON.parse('{"title":"渲染周期","description":"","frontmatter":{},"headers":[],"relativePath":"client/browser/render.md","filePath":"client/browser/render.md"}'),t={name:"client/browser/render.md"};function h(p,i,e,k,r,E){return l(),a("div",null,i[0]||(i[0]=[n(`<h1 id="渲染周期" tabindex="-1">渲染周期 <a class="header-anchor" href="#渲染周期" aria-label="Permalink to &quot;渲染周期&quot;">​</a></h1><p>本文详细介绍网页从用户输入URL到页面完全加载、交互、最终关闭的整个生命周期过程，深入剖析浏览器是如何工作的。</p><h2 id="页面生命周期概览" tabindex="-1">页面生命周期概览 <a class="header-anchor" href="#页面生命周期概览" aria-label="Permalink to &quot;页面生命周期概览&quot;">​</a></h2><p>一个网页的完整生命周期包括以下几个阶段：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>输入URL → 导航 → 请求/响应 → 解析 → 渲染 → 交互 → 关闭</span></span></code></pre></div><h2 id="导航阶段" tabindex="-1">导航阶段 <a class="header-anchor" href="#导航阶段" aria-label="Permalink to &quot;导航阶段&quot;">​</a></h2><h3 id="_1-用户输入处理" tabindex="-1">1. 用户输入处理 <a class="header-anchor" href="#_1-用户输入处理" aria-label="Permalink to &quot;1. 用户输入处理&quot;">​</a></h3><p>当用户在地址栏输入URL时：</p><ol><li><p><strong>输入分析</strong></p><ul><li>浏览器解析输入内容</li><li>判断是URL、搜索关键词还是其他类型</li><li>对于不完整URL，添加默认协议（如http://）</li></ul></li><li><p><strong>地址栏建议</strong></p><ul><li>根据历史记录、书签和预设搜索引擎提供建议</li><li>可能进行DNS预取或预连接以优化响应速度</li></ul></li><li><p><strong>URL解析</strong></p><ul><li>分解URL为组件（协议、域名、路径、查询参数等）</li><li>执行URL编码/解码</li><li>检查和应用同源策略</li></ul></li></ol><h3 id="_2-导航决策" tabindex="-1">2. 导航决策 <a class="header-anchor" href="#_2-导航决策" aria-label="Permalink to &quot;2. 导航决策&quot;">​</a></h3><p>一旦确定了目标URL：</p><ol><li><p><strong>检查缓存</strong></p><ul><li>查找上一次访问记录</li><li>检查导航缓存</li><li>确定是前进/后退导航还是新导航</li></ul></li><li><p><strong>页面卸载准备</strong></p><ul><li>当前页面触发beforeunload事件</li><li>用户可能需要确认离开（如有未保存的表单数据）</li><li>当前页面可能发送信标(beacon)请求</li></ul></li><li><p><strong>进程/线程准备</strong></p><ul><li>决定是否复用现有渲染进程</li><li>或创建新的渲染进程</li><li>分配必要的系统资源</li></ul></li></ol><h2 id="网络请求阶段" tabindex="-1">网络请求阶段 <a class="header-anchor" href="#网络请求阶段" aria-label="Permalink to &quot;网络请求阶段&quot;">​</a></h2><h3 id="_1-dns解析" tabindex="-1">1. DNS解析 <a class="header-anchor" href="#_1-dns解析" aria-label="Permalink to &quot;1. DNS解析&quot;">​</a></h3><p>将域名转换为IP地址：</p><ol><li><p><strong>缓存查询</strong></p><ul><li>检查浏览器DNS缓存</li><li>检查操作系统DNS缓存</li><li>检查路由器DNS缓存</li></ul></li><li><p><strong>递归查询</strong></p><ul><li>联系本地DNS服务器</li><li>如果需要，执行完整DNS解析过程</li><li>获取目标服务器IP地址</li></ul></li></ol><h3 id="_2-连接建立" tabindex="-1">2. 连接建立 <a class="header-anchor" href="#_2-连接建立" aria-label="Permalink to &quot;2. 连接建立&quot;">​</a></h3><p>通过网络连接到服务器：</p><ol><li><p><strong>TCP连接</strong></p><ul><li>执行TCP三次握手</li><li>建立可靠的连接</li><li>协商连接参数</li></ul></li><li><p><strong>TLS/SSL握手</strong> (对于HTTPS)</p><ul><li>协商加密参数</li><li>验证服务器证书</li><li>建立加密通道</li></ul></li></ol><h3 id="_3-http交互" tabindex="-1">3. HTTP交互 <a class="header-anchor" href="#_3-http交互" aria-label="Permalink to &quot;3. HTTP交互&quot;">​</a></h3><p>发送请求并接收响应：</p><ol><li><p><strong>发送HTTP请求</strong></p><ul><li>构建HTTP请求头（包含User-Agent、Accept、Cookie等）</li><li>添加请求体（如适用）</li><li>通过网络发送请求</li></ul></li><li><p><strong>服务器处理</strong></p><ul><li>服务器接收并处理请求</li><li>执行必要的逻辑（路由、认证等）</li><li>生成响应</li></ul></li><li><p><strong>接收HTTP响应</strong></p><ul><li>接收状态行和响应头</li><li>接收响应体</li><li>处理可能的重定向（3xx状态码）</li></ul></li></ol><h2 id="解析阶段" tabindex="-1">解析阶段 <a class="header-anchor" href="#解析阶段" aria-label="Permalink to &quot;解析阶段&quot;">​</a></h2><h3 id="_1-html解析" tabindex="-1">1. HTML解析 <a class="header-anchor" href="#_1-html解析" aria-label="Permalink to &quot;1. HTML解析&quot;">​</a></h3><p>将HTML文本转换为DOM树：</p><ol><li><p><strong>字节流解码</strong></p><ul><li>根据指定编码（如UTF-8）将字节转换为字符</li><li>处理字符编码问题</li></ul></li><li><p><strong>标记化（Tokenization）</strong></p><ul><li>将字符流分解为标记（tokens）</li><li>识别开始标签、结束标签、属性等</li></ul></li><li><p><strong>构建DOM树</strong></p><ul><li>基于标记创建DOM节点</li><li>建立节点之间的层次关系</li><li>处理嵌套结构</li></ul></li></ol><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// DOM树的简化表示</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  nodeType</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">9</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Document</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  children</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: [</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      nodeType: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Element</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      tagName: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;html&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      children: [</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">          nodeType: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">          tagName: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;head&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">          // ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">          nodeType: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">          tagName: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;body&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">          // ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      ]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  ]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="_2-子资源加载" tabindex="-1">2. 子资源加载 <a class="header-anchor" href="#_2-子资源加载" aria-label="Permalink to &quot;2. 子资源加载&quot;">​</a></h3><p>处理HTML中引用的资源：</p><ol><li><p><strong>预加载扫描</strong></p><ul><li>快速扫描HTML以发现关键资源（CSS、JavaScript、字体等）</li><li>尽早启动资源请求</li></ul></li><li><p><strong>资源优先级划分</strong></p><ul><li>CSS和阻塞渲染的JavaScript获得高优先级</li><li>图片和非关键资源获得低优先级</li></ul></li><li><p><strong>资源加载与处理</strong></p><ul><li>并行请求多个资源（受HTTP协议和浏览器限制）</li><li>处理不同类型的资源（解析CSS、编译JavaScript等）</li></ul></li></ol><h3 id="_3-javascript执行" tabindex="-1">3. JavaScript执行 <a class="header-anchor" href="#_3-javascript执行" aria-label="Permalink to &quot;3. JavaScript执行&quot;">​</a></h3><p>解析和执行脚本：</p><ol><li><p><strong>解析</strong></p><ul><li>将JavaScript源码解析为抽象语法树(AST)</li><li>检查语法错误</li></ul></li><li><p><strong>编译</strong></p><ul><li>将AST转换为字节码或机器码</li><li>应用优化（JIT编译、内联等）</li></ul></li><li><p><strong>执行</strong></p><ul><li>运行代码</li><li>可能修改DOM或CSSOM</li><li>可能触发额外的网络请求</li></ul></li></ol><h3 id="_4-css处理" tabindex="-1">4. CSS处理 <a class="header-anchor" href="#_4-css处理" aria-label="Permalink to &quot;4. CSS处理&quot;">​</a></h3><p>解析样式信息：</p><ol><li><p><strong>CSS解析</strong></p><ul><li>解析CSS规则</li><li>处理@import、媒体查询等</li></ul></li><li><p><strong>构建CSSOM</strong></p><ul><li>创建CSS对象模型</li><li>解析选择器和属性</li><li>计算级联和继承</li></ul></li></ol><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// CSSOM树的简化表示</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  rules</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: [</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      selectorText: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;body&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      style: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        color: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;black&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        fontSize: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;16px&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      selectorText: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;.header&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      style: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        backgroundColor: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;blue&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  ]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h2 id="渲染阶段" tabindex="-1">渲染阶段 <a class="header-anchor" href="#渲染阶段" aria-label="Permalink to &quot;渲染阶段&quot;">​</a></h2><h3 id="_1-渲染树构建" tabindex="-1">1. 渲染树构建 <a class="header-anchor" href="#_1-渲染树构建" aria-label="Permalink to &quot;1. 渲染树构建&quot;">​</a></h3><p>将DOM和CSSOM组合：</p><ol><li><p><strong>合并DOM和CSSOM</strong></p><ul><li>遍历DOM树</li><li>应用匹配的样式规则</li><li>考虑继承和层叠</li></ul></li><li><p><strong>过滤不可见元素</strong></p><ul><li>排除不渲染的元素（如display:none、script、meta）</li><li>考虑媒体查询</li></ul></li><li><p><strong>构建渲染树</strong></p><ul><li>包含所有可见内容及其计算样式</li><li>准备进行布局</li></ul></li></ol><h3 id="_2-布局-layout" tabindex="-1">2. 布局（Layout） <a class="header-anchor" href="#_2-布局-layout" aria-label="Permalink to &quot;2. 布局（Layout）&quot;">​</a></h3><p>计算元素的精确位置和大小：</p><ol><li><p><strong>初始布局</strong></p><ul><li>计算视口大小</li><li>确定元素的尺寸和位置</li><li>处理盒模型、浮动、定位等</li></ul></li><li><p><strong>布局计算</strong></p><ul><li>自上而下流式布局</li><li>处理相对和绝对定位</li><li>计算盒子的精确几何信息</li></ul></li><li><p><strong>布局树生成</strong></p><ul><li>创建包含位置和尺寸信息的布局树</li><li>为绘制阶段做准备</li></ul></li></ol><h3 id="_3-绘制-paint" tabindex="-1">3. 绘制（Paint） <a class="header-anchor" href="#_3-绘制-paint" aria-label="Permalink to &quot;3. 绘制（Paint）&quot;">​</a></h3><p>将布局转换为屏幕上的像素：</p><ol><li><p><strong>绘制顺序确定</strong></p><ul><li>创建绘制记录</li><li>确定绘制顺序（z-index层叠）</li></ul></li><li><p><strong>分层（Layer）</strong></p><ul><li>将内容分为多个图层</li><li>识别需要单独合成的部分（如具有transform、opacity的元素）</li></ul></li><li><p><strong>光栅化（Rasterization）</strong></p><ul><li>将矢量信息转换为位图（像素）</li><li>可能使用GPU加速</li></ul></li></ol><h3 id="_4-合成-compositing" tabindex="-1">4. 合成（Compositing） <a class="header-anchor" href="#_4-合成-compositing" aria-label="Permalink to &quot;4. 合成（Compositing）&quot;">​</a></h3><p>将各个层组合成最终画面：</p><ol><li><p><strong>图层合成</strong></p><ul><li>将所有层按正确的顺序合并</li><li>应用变换和效果</li></ul></li><li><p><strong>显示合成结果</strong></p><ul><li>将最终图像发送到显示器</li><li>处理高刷新率和动画</li></ul></li></ol><h2 id="交互阶段" tabindex="-1">交互阶段 <a class="header-anchor" href="#交互阶段" aria-label="Permalink to &quot;交互阶段&quot;">​</a></h2><h3 id="_1-初始交互响应" tabindex="-1">1. 初始交互响应 <a class="header-anchor" href="#_1-初始交互响应" aria-label="Permalink to &quot;1. 初始交互响应&quot;">​</a></h3><p>页面首次可交互：</p><ol><li><p><strong>关键渲染路径完成</strong></p><ul><li>首次内容绘制（FCP）</li><li>首次有意义绘制（FMP）</li><li>可交互时间（TTI）</li></ul></li><li><p><strong>事件监听器激活</strong></p><ul><li>JavaScript事件监听器开始响应</li><li>用户可以与页面元素交互</li></ul></li></ol><h3 id="_2-用户交互处理" tabindex="-1">2. 用户交互处理 <a class="header-anchor" href="#_2-用户交互处理" aria-label="Permalink to &quot;2. 用户交互处理&quot;">​</a></h3><p>处理用户输入：</p><ol><li><p><strong>事件捕获与冒泡</strong></p><ul><li>事件从根节点传播到目标</li><li>然后从目标冒泡回根节点</li></ul></li><li><p><strong>事件处理</strong></p><ul><li>执行关联的事件处理函数</li><li>可能修改DOM</li><li>可能触发重新渲染</li></ul></li></ol><h3 id="_3-渲染更新" tabindex="-1">3. 渲染更新 <a class="header-anchor" href="#_3-渲染更新" aria-label="Permalink to &quot;3. 渲染更新&quot;">​</a></h3><p>响应DOM变化：</p><ol><li><p><strong>增量布局</strong></p><ul><li>计算DOM变化的影响</li><li>尽量只重新布局受影响的部分</li></ul></li><li><p><strong>重绘</strong></p><ul><li>更新受影响区域的像素</li><li>避免全页面重绘</li></ul></li><li><p><strong>合成更新</strong></p><ul><li>只更新变化的图层</li><li>优化性能</li></ul></li></ol><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 高效的DOM操作示例</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 1. 批量更新</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> fragment</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> document.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">createDocumentFragment</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1000</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; i</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">++</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> el</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> document.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">createElement</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;div&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  el.textContent </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> \`Item \${</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">i</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">}\`</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  fragment.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">appendChild</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(el);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">document.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getElementById</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;container&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">appendChild</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(fragment);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 2. 避免强制同步布局</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">requestAnimationFrame</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> width</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> element.offsetWidth; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 读取</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  elements.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">forEach</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">el</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    el.style.width </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> width </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;px&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 写入</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  });</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span></code></pre></div><h2 id="页面生命周期事件" tabindex="-1">页面生命周期事件 <a class="header-anchor" href="#页面生命周期事件" aria-label="Permalink to &quot;页面生命周期事件&quot;">​</a></h2><p>浏览器提供了一系列事件来跟踪页面生命周期：</p><ol><li><p><strong>导航事件</strong></p><ul><li><code>DOMContentLoaded</code>：DOM完全加载和解析</li><li><code>load</code>：页面及所有资源加载完成</li><li><code>beforeunload</code>：用户即将离开页面</li><li><code>unload</code>：用户离开页面</li></ul></li><li><p><strong>可见性事件</strong></p><ul><li><code>visibilitychange</code>：页面可见性变化</li><li><code>pageshow</code>：页面显示</li><li><code>pagehide</code>：页面隐藏</li></ul></li><li><p><strong>资源事件</strong></p><ul><li><code>readystatechange</code>：document加载状态变化</li><li><code>loadstart</code>、<code>progress</code>、<code>loadend</code>等：资源加载过程</li></ul></li></ol><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 生命周期事件监听示例</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">document.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">addEventListener</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;DOMContentLoaded&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;DOM已加载，可以操作DOM元素&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">window.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">addEventListener</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;load&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;页面完全加载，包括所有依赖资源&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">document.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">addEventListener</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;visibilitychange&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (document.visibilityState </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">===</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;hidden&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;页面不可见，暂停非必要操作&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">else</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;页面可见，恢复操作&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">window.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">addEventListener</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;beforeunload&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">event</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // 提示用户确认离开</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  event.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">preventDefault</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  event.returnValue </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span></code></pre></div><h2 id="页面关闭阶段" tabindex="-1">页面关闭阶段 <a class="header-anchor" href="#页面关闭阶段" aria-label="Permalink to &quot;页面关闭阶段&quot;">​</a></h2><h3 id="_1-触发关闭" tabindex="-1">1. 触发关闭 <a class="header-anchor" href="#_1-触发关闭" aria-label="Permalink to &quot;1. 触发关闭&quot;">​</a></h3><p>页面关闭可由多种原因引起：</p><ol><li><p><strong>用户操作</strong></p><ul><li>关闭标签页/窗口</li><li>导航到其他页面</li><li>刷新页面</li></ul></li><li><p><strong>程序性关闭</strong></p><ul><li>JavaScript调用<code>window.close()</code></li><li>页面重定向</li></ul></li><li><p><strong>浏览器/系统行为</strong></p><ul><li>浏览器关闭</li><li>系统关机</li></ul></li></ol><h3 id="_2-资源清理" tabindex="-1">2. 资源清理 <a class="header-anchor" href="#_2-资源清理" aria-label="Permalink to &quot;2. 资源清理&quot;">​</a></h3><p>浏览器执行清理工作：</p><ol><li><p><strong>事件处理</strong></p><ul><li>触发<code>beforeunload</code>事件</li><li>触发<code>unload</code>事件</li><li>执行已注册的清理函数</li></ul></li><li><p><strong>状态保存</strong></p><ul><li>保存会话历史</li><li>保存滚动位置（用于前进/后退导航）</li><li>可能发送信标请求（统计数据）</li></ul></li><li><p><strong>资源释放</strong></p><ul><li>取消待处理的网络请求</li><li>释放内存</li><li>终止后台线程和Service Workers（根据需要）</li></ul></li></ol><h3 id="_3-进程清理" tabindex="-1">3. 进程清理 <a class="header-anchor" href="#_3-进程清理" aria-label="Permalink to &quot;3. 进程清理&quot;">​</a></h3><p>根据浏览器架构执行最终清理：</p><ol><li><p><strong>渲染进程处理</strong></p><ul><li>终止所有JavaScript执行</li><li>释放图形和内存资源</li></ul></li><li><p><strong>浏览器进程处理</strong></p><ul><li>更新历史记录和UI</li><li>释放相关系统资源</li></ul></li></ol><h2 id="性能优化关键点" tabindex="-1">性能优化关键点 <a class="header-anchor" href="#性能优化关键点" aria-label="Permalink to &quot;性能优化关键点&quot;">​</a></h2><p>针对页面生命周期的各个阶段优化：</p><h3 id="_1-导航和请求阶段" tabindex="-1">1. 导航和请求阶段 <a class="header-anchor" href="#_1-导航和请求阶段" aria-label="Permalink to &quot;1. 导航和请求阶段&quot;">​</a></h3><ul><li>使用DNS预解析和预连接</li><li>实施有效的缓存策略</li><li>利用CDN减少服务器响应时间</li></ul><h3 id="_2-解析和渲染阶段" tabindex="-1">2. 解析和渲染阶段 <a class="header-anchor" href="#_2-解析和渲染阶段" aria-label="Permalink to &quot;2. 解析和渲染阶段&quot;">​</a></h3><ul><li>最小化关键渲染路径</li><li>延迟加载非关键资源</li><li>优化JavaScript执行</li><li>避免渲染阻塞</li></ul><h3 id="_3-交互阶段" tabindex="-1">3. 交互阶段 <a class="header-anchor" href="#_3-交互阶段" aria-label="Permalink to &quot;3. 交互阶段&quot;">​</a></h3><ul><li>实现响应式设计</li><li>优化事件处理</li><li>使用防抖和节流</li><li>异步处理长任务</li></ul><h3 id="_4-关闭阶段" tabindex="-1">4. 关闭阶段 <a class="header-anchor" href="#_4-关闭阶段" aria-label="Permalink to &quot;4. 关闭阶段&quot;">​</a></h3><ul><li>优雅处理页面卸载</li><li>保存关键用户状态</li><li>避免阻塞beforeunload事件</li></ul><h2 id="诊断与监控工具" tabindex="-1">诊断与监控工具 <a class="header-anchor" href="#诊断与监控工具" aria-label="Permalink to &quot;诊断与监控工具&quot;">​</a></h2><p>用于分析页面生命周期的工具：</p><ol><li><p><strong>浏览器开发者工具</strong></p><ul><li>Performance面板：分析渲染性能</li><li>Network面板：监控资源加载</li><li>Memory面板：跟踪内存使用</li></ul></li><li><p><strong>性能API</strong></p><ul><li>Navigation Timing API：测量导航和加载性能</li><li>Resource Timing API：测量资源加载时间</li><li>Performance Observer：监控性能事件</li></ul></li><li><p><strong>Web Vitals指标</strong></p><ul><li>LCP（Largest Contentful Paint）：最大内容绘制</li><li>FID（First Input Delay）：首次输入延迟</li><li>CLS（Cumulative Layout Shift）：累积布局偏移</li></ul></li></ol><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 使用Performance API测量页面加载性能</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">window.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">addEventListener</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;load&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> perfData</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> window.performance.timing;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> pageLoadTime</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> perfData.loadEventEnd </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> perfData.navigationStart;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">\`页面加载时间: \${</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">pageLoadTime</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">}ms\`</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> domReadyTime</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> perfData.domComplete </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> perfData.domLoading;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">\`DOM处理时间: \${</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">domReadyTime</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">}ms\`</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span></code></pre></div>`,89)]))}const g=s(t,[["render",h]]);export{o as __pageData,g as default};
