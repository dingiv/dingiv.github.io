import{_ as i,c as a,o as t,ae as n}from"./chunks/framework.Dgg8-8ov.js";const g=JSON.parse('{"title":"内存映射","description":"","frontmatter":{},"headers":[],"relativePath":"kernel/linux/mm/mmap.md","filePath":"kernel/linux/mm/mmap.md"}'),h={name:"kernel/linux/mm/mmap.md"};function l(p,s,e,k,r,d){return t(),a("div",null,s[0]||(s[0]=[n(`<h1 id="内存映射" tabindex="-1">内存映射 <a class="header-anchor" href="#内存映射" aria-label="Permalink to &quot;内存映射&quot;">​</a></h1><p>由于 CPU 访问内存必须经历 MMU，操作系统控制需要 MMU 将使用的内存页映射到一个真实的物理内页上。</p><h2 id="直接映射" tabindex="-1">直接映射 <a class="header-anchor" href="#直接映射" aria-label="Permalink to &quot;直接映射&quot;">​</a></h2><p>因为 MMU 的存在，操作系统也不可以直接访问物理内存，所以<strong>操作系统在访问物理内存的时候依然需要进行映射</strong>，由此形成<strong>内核地址空间</strong>。为了简单，操作系统内核态的虚拟地址直接使用线性映射即可。</p><p>线性映射的时候，操作系统的虚拟地址空间可能是分段组合的，每个分段只与物理地址空间有一个常数偏移量。</p><p>另外，由于物理空间本身是由硬件平台所决定的，而且物理地址空间中有很多的空洞，操作系统可以使用内核地址将分散的空间连缀起来，从而简化操作系统的内核空间内存管理。</p><h2 id="虚拟内存映射" tabindex="-1">虚拟内存映射 <a class="header-anchor" href="#虚拟内存映射" aria-label="Permalink to &quot;虚拟内存映射&quot;">​</a></h2><p>物理内存和虚拟内存之间存在映射关系：</p><ul><li>映射以一块连续的内存为单位（通常为 4096 Byte）</li><li>一块虚拟内存对应一块真实的物理内存</li><li>这个单位称为内存分页</li><li>操作系统通过页表（多级数组数据结构）维护映射关系</li></ul><p>操作系统需要将进程的虚拟内存空间中的内存页映射到一个真实的物理内页上。其具体操作就是修改和维护 task_struct 中的 mm_struct 字段，创建一个虚拟内存表项，并标记为不存在。当用户态调用 mmap 接口的时候进行映射操作。</p><p>在进程首次申请内存的时候，操作系统会先建立表项，申明虚拟内存页到真实物理页的映射关系，但是不会真正的去进行内存分配，只有当进程真正去访问某个虚拟页的时候，并触发缺页异常时，操作系统才会开始为这个页去分配真实的物理页。</p><h2 id="共享内存" tabindex="-1">共享内存 <a class="header-anchor" href="#共享内存" aria-label="Permalink to &quot;共享内存&quot;">​</a></h2><p>操作系统创建一段能够在不同的进程中访问的内存空间，并且允许不同的进程打开它。linux 系统往往会将共享内存放置在 <code>/dev/shm</code> 目录下，呈现为一个设备文件，例如 <code>/dev/shm/my_shm</code>，不同的进程如果可以直接访问这个设备，那么就可以打开它，并使用 mmap 操作文件描述符，从而映射同一块物理内存空间，从而实现进程间的高速、大规模数据交换。</p><h3 id="自定义内存映射" tabindex="-1">自定义内存映射 <a class="header-anchor" href="#自定义内存映射" aria-label="Permalink to &quot;自定义内存映射&quot;">​</a></h3><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#include</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &lt;sys/mman.h&gt;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/**</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">@param</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> addr</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> 可以是 NULL，由操作系统自行分配</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">@param</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> fd</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> 需要映射的文件</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">@param</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> offset</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> 偏移量</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> */</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">void</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">mmap</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">void</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">addr</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">size_t</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> length</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> prot</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> flags</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> fd</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">off_t</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> offset</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><p>mmap 函数将文件 fd 中的内容映射到当前进程的内存空间中 addr 位置处，大小为 length，通过 prot 参数控制内存访问权限，通过 flags 提供更多配置选项。</p>`,16)]))}const m=i(h,[["render",l]]);export{g as __pageData,m as default};
