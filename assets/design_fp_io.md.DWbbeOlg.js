import{_ as i,c as e,ae as l,o}from"./chunks/framework.BzDBnRMZ.js";const d=JSON.parse('{"title":"IO","description":"","frontmatter":{},"headers":[],"relativePath":"design/fp/io.md","filePath":"design/fp/io.md"}'),t={name:"design/fp/io.md"};function r(n,a,p,I,s,O){return o(),e("div",null,a[0]||(a[0]=[l('<h1 id="io" tabindex="-1">IO <a class="header-anchor" href="#io" aria-label="Permalink to &quot;IO&quot;">​</a></h1><p>冯诺依曼机器的工作模式，是 CPU 和 内存作为数据计算的核心，IO 设备是数据输入输出的外围设备。其基本工作模式是：</p><ol><li>从 IO 设备中的输入通道读取数据到内存</li><li>CPU 处理内存中的数据</li><li>将处理后的数据写到 IO 设备中的输出通道</li></ol><p>这些工作由操作系统来控制协调，但上层的应用程序也是基于类似的工作流程对数据进行处理，只不过上层的程序不会直接操作硬件，而是通过操作系统和应用程序标准库提供的程序接口进行操作。</p><p>根据 C 语言生态的程序特性，一个程序往往可以被抽象成一个 main 函数，main 函数接受两个参数，分别是 int 类型的 argc 和 char** 类型的 argv，并有一个 int 类型的返回值。main 函数的返回值表示程序执行的结果，argc 表示命令行参数的数量，argv 是一个字符串数组，表示命令行参数的值。这个输入输出的接口，是 C 语言程序的标准接口，也是操作系统和应用程序标准库提供的接口，被称为程序的标准输入输出接口。</p><p>一个程序除了标准输入和标准输出，往往需要处理其他的 IO 设备，和多个 IO 设备进行交互。操作系统和应用程序标准库需要提供一套接口，让上层程序可以方便地进行 IO 调用。</p><h2 id="io-接口" tabindex="-1">IO 接口 <a class="header-anchor" href="#io-接口" aria-label="Permalink to &quot;IO 接口&quot;">​</a></h2><p>一个程序有标准输入输出接口，还有其他 IO 接口。一个程序如果只是对于标准输入输出进行操作，那么这个程序一般就是一个控制台程序，但是现代的程序，往往是一个 GUI 程序或者 Web 服务器，需要和多个 IO 设备进行交互，比如磁盘、网卡、显示器、鼠标键盘等。程序的数据流，往往是从一个 IO 设备中持续读取数据，经过处理，再写入到另一个 IO 设备中。此时，程序的不止一个标准流，而是多条流。</p><p>典型的流有：</p><ul><li>标准 IO 流</li><li>UI 交互流 (键盘鼠标 -&gt; 显示器流)</li><li>socket 网络流</li><li>磁盘文件流</li></ul><blockquote><p>前端程序中的 IO 流</p><ul><li>键盘鼠标-&gt;显示器流</li><li>网络流</li><li>文件流</li></ul><p>其中，前端框架帮助我们处理了键盘鼠标-&gt;显示器流，极大地简化了前端管理页面的难度。</p></blockquote><h2 id="声明式-io" tabindex="-1">声明式 IO <a class="header-anchor" href="#声明式-io" aria-label="Permalink to &quot;声明式 IO&quot;">​</a></h2><p>声明式 IO，程序员无需进行具体的 IO 操作，只需要声明需要从外界获得一个怎样的数据，并且声明一定的描述信息，框架会自动处理 IO 操作，将数据返回给程序员。由于 IO 操作往往是命令式的，而其是异步的，进行这些操作是非常不纯的操作，在函数式编程中，我们需要采取特定的手段来处理这些不纯的操作。</p><h2 id="数据驱动-io" tabindex="-1">数据驱动 IO <a class="header-anchor" href="#数据驱动-io" aria-label="Permalink to &quot;数据驱动 IO&quot;">​</a></h2><p>将一个 IO 行为与一个状态关联起来，当状态改变时，IO 行为自动执行。是响应式编程的一个子集。</p>',15)]))}const h=i(t,[["render",r]]);export{d as __pageData,h as default};
