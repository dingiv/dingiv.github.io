import{_ as e,c as t,o as r,ae as o}from"./chunks/framework.CBTkueSR.js";const u=JSON.parse('{"title":"调度","description":"","frontmatter":{},"headers":[],"relativePath":"basic/os/schd.md","filePath":"basic/os/schd.md"}'),i={name:"basic/os/schd.md"};function h(s,a,l,n,d,c){return r(),t("div",null,[...a[0]||(a[0]=[o('<h1 id="调度" tabindex="-1">调度 <a class="header-anchor" href="#调度" aria-label="Permalink to &quot;调度&quot;">​</a></h1><p>系统调度的目的是完成多进程的并发能力，营造一个同时进行的假象；并且也是为了让多个进程充分利用 CPU，减少 IO 阻塞的等待时间。</p><h2 id="抢占式调度" tabindex="-1">抢占式调度 <a class="header-anchor" href="#抢占式调度" aria-label="Permalink to &quot;抢占式调度&quot;">​</a></h2><h2 id="调度策略" tabindex="-1">调度策略 <a class="header-anchor" href="#调度策略" aria-label="Permalink to &quot;调度策略&quot;">​</a></h2><h3 id="最短完成时间优先" tabindex="-1">最短完成时间优先 <a class="header-anchor" href="#最短完成时间优先" aria-label="Permalink to &quot;最短完成时间优先&quot;">​</a></h3><h3 id="时间片轮转" tabindex="-1">时间片轮转 <a class="header-anchor" href="#时间片轮转" aria-label="Permalink to &quot;时间片轮转&quot;">​</a></h3><h3 id="多级反馈队列" tabindex="-1">多级反馈队列 <a class="header-anchor" href="#多级反馈队列" aria-label="Permalink to &quot;多级反馈队列&quot;">​</a></h3><h2 id="多核调度" tabindex="-1">多核调度 <a class="header-anchor" href="#多核调度" aria-label="Permalink to &quot;多核调度&quot;">​</a></h2><p>两级调度</p><p>亲和性</p>',10)])])}const b=e(i,[["render",h]]);export{u as __pageData,b as default};
