import{_ as a,c as s,o as t,ae as r}from"./chunks/framework.BtEkjhVd.js";const l="/assets/syscall.6k2T9StR.png",h=JSON.parse('{"title":"系统调用","description":"","frontmatter":{},"headers":[],"relativePath":"kernel/linux/process/syscall.md","filePath":"kernel/linux/process/syscall.md"}'),o={name:"kernel/linux/process/syscall.md"};function n(c,e,i,_,p,d){return t(),s("div",null,e[0]||(e[0]=[r('<h1 id="系统调用" tabindex="-1">系统调用 <a class="header-anchor" href="#系统调用" aria-label="Permalink to &quot;系统调用&quot;">​</a></h1><p>系统调用存储在进程的内存的内核空间中，而进程间共享内核空间。进程需要通过执行一个特殊的提权指令触发用户态向内核态的切换，使得 CPU 的权限级别上升，从而访问特权指令和进行敏感操作。用户态的进程只有有限的两种合法方式去访问高级的指令和操作，一个是系统调用，另一个是触发错误处理。 <img src="'+l+'" alt=""></p><p>系统调用也是系统给予上层的功能封装，上层无需关注硬件管理、内存、网络通信等繁琐细节，直接使用系统能力，即可完成功能的实现。</p><h2 id="常见系统调用" tabindex="-1">常见系统调用 <a class="header-anchor" href="#常见系统调用" aria-label="Permalink to &quot;常见系统调用&quot;">​</a></h2>',4)]))}const u=a(o,[["render",n]]);export{h as __pageData,u as default};
