import{_ as a,c as i,o as e,ae as s}from"./chunks/framework.Dgg8-8ov.js";const n="/assets/buddy.dio.BuwpSLRT.svg",u=JSON.parse('{"title":"物理内存管理","description":"","frontmatter":{},"headers":[],"relativePath":"kernel/linux/mm/pmm.md","filePath":"kernel/linux/mm/pmm.md"}'),p={name:"kernel/linux/mm/pmm.md"};function t(o,l,r,c,d,h){return e(),i("div",null,l[0]||(l[0]=[s('<h1 id="物理内存管理" tabindex="-1">物理内存管理 <a class="header-anchor" href="#物理内存管理" aria-label="Permalink to &quot;物理内存管理&quot;">​</a></h1><p>主板和 BIOS 程序在上电时：</p><ol><li>检查和扫描设备</li><li>初始化各种设备（内存条和各种 IO 设备的寄存器和缓冲区）</li><li>将这些存储空间拼接成连贯的物理内存空间</li></ol><p>物理内存空间可以看作是一个地址数组，每个地址的大小取决于计算机的位数（32 位、64 位等）。在操作系统引导时，BIOS 将物理内存空间信息告知操作系统，包括：内存地址的分区和各个硬件设备的地址范围；操作系统可以在其中确定内存条设备的内存范围从而得知主内存的范围。</p><h2 id="主内存管理" tabindex="-1">主内存管理 <a class="header-anchor" href="#主内存管理" aria-label="Permalink to &quot;主内存管理&quot;">​</a></h2><h3 id="位图方法" tabindex="-1">位图方法 <a class="header-anchor" href="#位图方法" aria-label="Permalink to &quot;位图方法&quot;">​</a></h3><p>将物理内存条划分为<strong>头+体</strong>的两块，头使用 bit 位标记了体中的某一块内存是否被分配使用，体中的某块内存可以直接与上层的内存页大小保持一致，采用 4k 为一块进行管理和分配；该算法实现简单，但是在新增分配的时候需要使用 O(n) 时间查找目标，时间效率不高。</p><h3 id="伙伴系统" tabindex="-1">伙伴系统 <a class="header-anchor" href="#伙伴系统" aria-label="Permalink to &quot;伙伴系统&quot;">​</a></h3><p>buddy system 使用多级链表数组管理空闲块，是一种用于分配连续物理页框的算法。可以用于解决位图方法在分配内存时的速度问题。内核为分配页框调用 __get_free_pages()、alloc_pages() 等接口时，就会走这个算法。当释放的两个“伙伴”空闲块连续时，可以合并为更大的块。</p><p>系统将空闲页面分组为 11 个块链表，每个块链表分别包含大小为1、2、4、8、16、32、64、128、256、512和1024个连续页框的页块。最大可以申请 1024 个连续页框，对应 4MB 大小的内存。</p><p><img src="'+n+`" alt=""></p><p>分配过程：</p><ol><li>根据请求大小，找到对应的块链表</li><li>如果链表为空，则向更大的块链表申请</li><li>将大块分割成两个小块，一个用于分配，另一个加入较小的块链表</li><li>如果仍然没有合适的块，则继续向更大的块链表申请</li></ol><p>分配过程：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>空闲块（1024KB）  </span></span>
<span class="line"><span>→ 分配 128KB 时 → 找不到正好128KB，就分成两个 512KB → 再分两个 256KB → 再分两个 128KB</span></span>
<span class="line"><span></span></span>
<span class="line"><span>分配成功：128KB</span></span>
<span class="line"><span>其“伙伴”：另一个 128KB 仍空闲</span></span>
<span class="line"><span></span></span>
<span class="line"><span>当释放该 128KB，如果它的“伙伴”也空闲，则两者合并为 256KB，继续向上尝试合并。</span></span></code></pre></div><p>释放过程：</p><ol><li>将释放的块加入对应的块链表</li><li>检查是否有相邻的空闲块</li><li>如果有，则合并成更大的块，并加入更大的块链表</li><li>重复步骤2-3，直到无法继续合并</li></ol><p>优点：，快速分配和释放，有效减少内存碎片，支持大块内存分配；缺点：，可能造成内部碎片，合并操作可能较慢，不适合小块内存分配。</p><h3 id="slab-分配器" tabindex="-1">SLAB 分配器 <a class="header-anchor" href="#slab-分配器" aria-label="Permalink to &quot;SLAB 分配器&quot;">​</a></h3><p>SLAB 分配器是 Linux 内核中用于管理小块内存的分配器，主要用于内核对象的分配和释放。它基于以下思想：内核对象在创建和销毁时，需要频繁地分配和释放内存，如果每次都使用伙伴系统，会造成很大的开销。</p><p>SLAB分配器的主要特点：</p><ol><li>对象缓存，为每种对象类型创建专用缓存，缓存中保存已分配但未使用的对象，避免频繁的内存分配和释放</li><li>内存着色，通过偏移对象在缓存中的位置，提高CPU缓存的命中率，减少缓存行冲突</li><li>三级结构，缓存描述符（kmem_cache），SLAB描述符（slab），对象数组</li><li>分配策略，首先从部分满的SLAB中分配，如果没有，则从空的SLAB中分配，如果都没有，则创建新的SLAB</li></ol><p>对于小于一页的内存分配请求，Linux提供了以下机制：</p><ol><li>kmalloc，基于SLAB分配器，支持不同大小的缓存，支持内存对齐要求，适用于内核对象</li><li>vmalloc，分配虚拟内存，不保证物理内存连续，适用于大块内存，性能较低</li><li>内存池，预分配内存块，快速分配和释放，减少内存碎片，适用于特定场景</li></ol><h3 id="内存管理策略" tabindex="-1">内存管理策略 <a class="header-anchor" href="#内存管理策略" aria-label="Permalink to &quot;内存管理策略&quot;">​</a></h3><ol><li>内存回收 <ul><li>页面回收</li><li>缓存回收</li><li>交换机制</li><li>OOM killer</li></ul></li><li>内存压缩 <ul><li>页面压缩</li><li>内存碎片整理</li><li>提高内存利用率</li></ul></li><li>内存监控 <ul><li>内存使用统计</li><li>内存压力检测</li><li>性能分析</li><li>问题诊断</li></ul></li><li>内存调优 <ul><li>参数配置</li><li>性能优化</li><li>资源限制</li><li>负载均衡</li></ul></li></ol>`,26)]))}const _=a(p,[["render",t]]);export{u as __pageData,_ as default};
