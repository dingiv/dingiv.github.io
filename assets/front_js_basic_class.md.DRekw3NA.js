import{_ as e,c as t,o as c,j as s,a as r}from"./chunks/framework.BHrE6nLq.js";const _=JSON.parse('{"title":"面向对象","description":"","frontmatter":{},"headers":[],"relativePath":"front/js/basic/class.md","filePath":"front/js/basic/class.md"}'),l={name:"front/js/basic/class.md"};function o(n,a,i,d,p,f){return c(),t("div",null,a[0]||(a[0]=[s("h1",{id:"面向对象",tabindex:"-1"},[r("面向对象 "),s("a",{class:"header-anchor",href:"#面向对象","aria-label":'Permalink to "面向对象"'},"​")],-1),s("p",null,"class语法拥有面向对象的概念，封装、继承和多态，同时可以使用接口达到类型组合的效果 class应当具有原子性，不应当尝试从class中解构方法为一个函数，不应当从class中解构一个getter为一个函数 由于js中this的不确定性，减少class语法的使用，除非你确定要封装一个具有原子性的数据实体",-1),s("p",null,"closure通过函数临时生成一个平对象或者高阶函数，能够将scope中的数据向外共享，从而达到简单的数据封装的目的 使用closure是函数一等公民的语言的买点，它允许用户快速创建并封装一个简单的数据结构，它具有比class更少的功能和更轻量的特点， 但是，闭包创建的对象是一个平对象，它每次调用都会重复地创建闭包函数，相较于class的方法，只会在原型对象上创建一次",-1)]))}const u=e(l,[["render",o]]);export{_ as __pageData,u as default};
