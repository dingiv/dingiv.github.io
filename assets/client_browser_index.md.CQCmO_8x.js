import{_ as i,c as a,o as t,ae as e}from"./chunks/framework.BtEkjhVd.js";const p=JSON.parse('{"title":"浏览器","description":"","frontmatter":{"title":"浏览器","order":40},"headers":[],"relativePath":"client/browser/index.md","filePath":"client/browser/index.md"}'),r={name:"client/browser/index.md"};function o(n,l,d,s,h,c){return t(),a("div",null,l[0]||(l[0]=[e('<h1 id="浏览器" tabindex="-1">浏览器 <a class="header-anchor" href="#浏览器" aria-label="Permalink to &quot;浏览器&quot;">​</a></h1><p>浏览器是现代 Web 应用的运行环境，与普通的 GUI 程序不同，浏览器包含着众多的组件，需要经过复杂的实现逻辑。</p><h2 id="架构与组成" tabindex="-1">架构与组成 <a class="header-anchor" href="#架构与组成" aria-label="Permalink to &quot;架构与组成&quot;">​</a></h2><p>现代浏览器采用多进程架构，并至少包含几个核心组件</p><table tabindex="0"><thead><tr><th>组件</th><th>功能</th><th>例子</th></tr></thead><tbody><tr><td>web 渲染引擎</td><td>实现 HTML 和 CSS 语言，解析二者的代码，生成渲染指令，绘制 HTML 元素</td><td>Blink(下层基于 Skia)</td></tr><tr><td>JavaScript 引擎</td><td>实现 JavaScript 语言</td><td>V8</td></tr><tr><td>网络协议客户端</td><td>实现各种网络协议的客户端逻辑</td><td>Http(s), WebSocket</td></tr><tr><td>客户端数据存储</td><td>实现 Web 客户端数据持久化标准</td><td>Cookie, LocalStorage, IndexedDB</td></tr><tr><td>浏览器主应用</td><td>封装和整合所有组件，并提供浏览器自身的 GUI</td><td>chromium</td></tr></tbody></table><p>除此之外，还有一些其他的模块需要处理：例如：实现 Webgl/WebGPU 图形 API 标准、Web 媒体资源编码和压缩、HTML 的 SVG 语法扩展等等</p><h3 id="主流浏览器及其内核" tabindex="-1">主流浏览器及其内核 <a class="header-anchor" href="#主流浏览器及其内核" aria-label="Permalink to &quot;主流浏览器及其内核&quot;">​</a></h3><table tabindex="0"><thead><tr><th>特性</th><th>Gecko</th><th>Blink (Chrome)</th><th>WebKit (Safari)</th></tr></thead><tbody><tr><td>所属项目</td><td>Mozilla Firefox</td><td>Chromium 项目</td><td>Apple Safari</td></tr><tr><td>JS 引擎</td><td>SpiderMonkey</td><td>V8</td><td>JavaScriptCore</td></tr><tr><td>样式计算</td><td>Stylo（Rust）</td><td>Blink（C++）</td><td>WebCore</td></tr><tr><td>多进程支持</td><td>支持</td><td>支持</td><td>Safari 支持</td></tr><tr><td>渲染架构</td><td>WebRender + GPU</td><td>Skia</td><td>CoreGraphics</td></tr><tr><td>开源许可</td><td>MPL</td><td>BSD-like</td><td>LGPL/MPL 兼容</td></tr></tbody></table><h3 id="事件循环-event-loop" tabindex="-1">事件循环（Event Loop） <a class="header-anchor" href="#事件循环-event-loop" aria-label="Permalink to &quot;事件循环（Event Loop）&quot;">​</a></h3><ol><li><strong>调用栈（Call Stack）</strong>：记录函数调用顺序</li><li><strong>任务队列（Task Queue）</strong>：存储待执行的宏任务</li><li><strong>微任务队列（Microtask Queue）</strong>：存储待执行的微任务</li><li><strong>事件循环（Event Loop）</strong>：不断检查调用栈是否为空，为空则先执行所有微任务，然后执行一个宏任务</li></ol><h2 id="浏览器缓存" tabindex="-1">浏览器缓存 <a class="header-anchor" href="#浏览器缓存" aria-label="Permalink to &quot;浏览器缓存&quot;">​</a></h2><h3 id="浏览器缓存机制" tabindex="-1">浏览器缓存机制 <a class="header-anchor" href="#浏览器缓存机制" aria-label="Permalink to &quot;浏览器缓存机制&quot;">​</a></h3><ol><li>强缓存：浏览器在本地缓存中查找资源，如果找到且未过期，则直接使用缓存资源，否则继续请求服务器。</li><li>协商缓存：浏览器在本地缓存中查找资源，如果找到且未过期，则向服务器发送请求，服务器验证资源是否更新，如果更新则返回新资源，否则返回304状态码，浏览器使用本地缓存资源。</li></ol><h3 id="浏览器缓存策略" tabindex="-1">浏览器缓存策略 <a class="header-anchor" href="#浏览器缓存策略" aria-label="Permalink to &quot;浏览器缓存策略&quot;">​</a></h3><ol><li>Cache-Control：控制缓存的策略，如max-age、no-cache、no-store等。 <ol><li>max-age：指定缓存的过期时间，单位为秒。</li><li>no-cache：表示每次请求都需要验证缓存是否有效。</li><li>no-store：表示不缓存资源。</li></ol></li><li>Expires：指定缓存的过期时间，格式为GMT时间。</li><li>ETag：资源的唯一标识符，用于验证缓存是否有效。</li><li>Last-Modified：资源的最后修改时间，用于验证缓存是否有效。</li><li>If-None-Match：客户端发送的ETag值，服务器根据该值判断资源是否更新。</li><li>If-Modified-Since：客户端发送的Last-Modified值，服务器根据该值判断资源是否更新。</li><li>Cache-Control优先级高于Expires，ETag优先级高于Last-Modified。</li><li>浏览器会根据Cache-Control、Expires、ETag、Last-Modified等字段来判断资源是否有效，如果有效则使用缓存资源，否则向服务器请求新资源。</li></ol><h2 id="浏览器存储" tabindex="-1">浏览器存储 <a class="header-anchor" href="#浏览器存储" aria-label="Permalink to &quot;浏览器存储&quot;">​</a></h2><p>浏览器提供了多种存储机制，用于在客户端保存数据。</p><h3 id="cookie" tabindex="-1">Cookie <a class="header-anchor" href="#cookie" aria-label="Permalink to &quot;Cookie&quot;">​</a></h3><ul><li>最早的浏览器存储机制</li><li>容量限制：通常为4KB</li><li>会随HTTP请求一起发送</li><li>可设置过期时间、域名范围等</li><li>通过设置HttpOnly和Secure提高安全性</li></ul><h3 id="localstorage" tabindex="-1">LocalStorage <a class="header-anchor" href="#localstorage" aria-label="Permalink to &quot;LocalStorage&quot;">​</a></h3><ul><li>永久存储机制，除非手动清除</li><li>容量限制：通常为5MB</li><li>不会随HTTP请求发送</li><li>仅支持字符串存储</li><li>同源访问限制</li></ul><h3 id="sessionstorage" tabindex="-1">SessionStorage <a class="header-anchor" href="#sessionstorage" aria-label="Permalink to &quot;SessionStorage&quot;">​</a></h3><ul><li>会话级存储，关闭标签页后清除</li><li>容量限制：通常为5MB</li><li>不会随HTTP请求发送</li><li>仅支持字符串存储</li><li>同源且同标签页访问限制</li></ul><h3 id="indexeddb" tabindex="-1">IndexedDB <a class="header-anchor" href="#indexeddb" aria-label="Permalink to &quot;IndexedDB&quot;">​</a></h3><ul><li>结构化存储机制，支持复杂数据类型</li><li>容量大，通常&gt;50MB</li><li>异步API，不阻塞主线程</li><li>支持事务和索引</li><li>同源访问限制</li></ul><h3 id="web-storage-api" tabindex="-1">Web Storage API <a class="header-anchor" href="#web-storage-api" aria-label="Permalink to &quot;Web Storage API&quot;">​</a></h3><ul><li>localStorage和sessionStorage的统一接口</li><li>提供setItem、getItem、removeItem、clear等方法</li><li>支持storage事件监听变化</li></ul><h2 id="浏览器安全" tabindex="-1">浏览器安全 <a class="header-anchor" href="#浏览器安全" aria-label="Permalink to &quot;浏览器安全&quot;">​</a></h2><h3 id="浏览器安全机制" tabindex="-1">浏览器安全机制 <a class="header-anchor" href="#浏览器安全机制" aria-label="Permalink to &quot;浏览器安全机制&quot;">​</a></h3><ol><li>同源策略：限制一个origin（协议+域名+端口）的文档或脚本如何与另一个源的资源进行交互。同源策略可以防止恶意文档，通过恶意脚本窃取数据。</li><li>跨站脚本攻击（XSS）：攻击者通过在网页中插入恶意脚本，窃取用户数据或执行恶意操作。</li><li>跨站请求伪造（CSRF）：攻击者通过诱导用户点击恶意链接或表单，以用户身份执行恶意操作。</li><li>内容安全策略（CSP）：通过设置HTTP头部的Content-Security-Policy，限制网页可以加载和执行的资源，防止XSS攻击。</li><li>HTTPS：通过加密通信，防止中间人攻击和数据窃取。</li><li>Cookie安全：通过设置HttpOnly和Secure标志，防止Cookie被JavaScript访问和窃取。</li><li>安全沙箱：浏览器为每个标签页或iframe创建一个独立的沙箱环境，限制其访问其他标签页或iframe的资源。</li><li>安全更新：定期更新浏览器和插件，修复已知的安全漏洞。</li><li>安全测试：定期进行安全测试，发现和修复安全漏洞。</li></ol><h3 id="跨域解决方案" tabindex="-1">跨域解决方案 <a class="header-anchor" href="#跨域解决方案" aria-label="Permalink to &quot;跨域解决方案&quot;">​</a></h3><ol><li><p><strong>CORS（跨域资源共享）</strong></p><ul><li>服务器设置Access-Control-Allow-Origin等响应头</li><li>支持简单请求和预检请求</li><li>可控制是否发送凭证信息</li></ul></li><li><p><strong>JSONP</strong></p><ul><li>利用script标签不受同源策略限制</li><li>只支持GET请求</li><li>有安全风险</li></ul></li><li><p><strong>代理服务器</strong></p><ul><li>在同源服务器上设置代理</li><li>转发请求到目标服务器</li><li>返回响应给客户端</li></ul></li><li><p><strong>WebSocket</strong></p><ul><li>建立持久连接</li><li>不受同源策略限制</li><li>支持双向通信</li></ul></li></ol><h2 id="浏览器性能优化" tabindex="-1">浏览器性能优化 <a class="header-anchor" href="#浏览器性能优化" aria-label="Permalink to &quot;浏览器性能优化&quot;">​</a></h2><h3 id="关键渲染路径优化" tabindex="-1">关键渲染路径优化 <a class="header-anchor" href="#关键渲染路径优化" aria-label="Permalink to &quot;关键渲染路径优化&quot;">​</a></h3><ol><li><p><strong>减少关键资源</strong></p><ul><li>减少阻塞渲染的CSS和JavaScript</li><li>内联关键CSS</li><li>异步加载非关键JavaScript</li></ul></li><li><p><strong>减少资源大小</strong></p><ul><li>压缩HTML、CSS、JavaScript</li><li>使用Gzip/Brotli压缩</li><li>图片优化</li></ul></li><li><p><strong>减少请求数量</strong></p><ul><li>合并CSS和JavaScript文件</li><li>使用CSS Sprite</li><li>使用字体图标或SVG</li></ul></li><li><p><strong>优化加载顺序</strong></p><ul><li>CSS放在head中</li><li>JavaScript放在body底部</li><li>使用async/defer属性</li></ul></li></ol><h3 id="渲染性能优化" tabindex="-1">渲染性能优化 <a class="header-anchor" href="#渲染性能优化" aria-label="Permalink to &quot;渲染性能优化&quot;">​</a></h3><ol><li><p><strong>减少回流（Reflow）</strong></p><ul><li>批量修改DOM</li><li>使用document fragment</li><li>避免频繁读取布局信息</li></ul></li><li><p><strong>减少重绘（Repaint）</strong></p><ul><li>使用CSS transform和opacity代替修改位置和可见性</li><li>使用will-change提示浏览器</li><li>合理使用GPU加速</li></ul></li><li><p><strong>帧率优化</strong></p><ul><li>使用requestAnimationFrame</li><li>避免长任务阻塞主线程</li><li>使用Web Workers分担计算密集型任务</li></ul></li></ol><h3 id="网络优化" tabindex="-1">网络优化 <a class="header-anchor" href="#网络优化" aria-label="Permalink to &quot;网络优化&quot;">​</a></h3><ol><li><p><strong>资源预加载</strong></p><ul><li>preload关键资源</li><li>prefetch可能需要的资源</li><li>preconnect提前建立连接</li></ul></li><li><p><strong>HTTP优化</strong></p><ul><li>使用HTTP/2多路复用</li><li>使用HTTP/3 QUIC协议</li><li>合理设置缓存策略</li></ul></li><li><p><strong>CDN加速</strong></p><ul><li>使用CDN分发静态资源</li><li>选择离用户最近的节点</li><li>使用多CDN提供冗余</li></ul></li></ol><h2 id="浏览器开发者工具" tabindex="-1">浏览器开发者工具 <a class="header-anchor" href="#浏览器开发者工具" aria-label="Permalink to &quot;浏览器开发者工具&quot;">​</a></h2><p>现代浏览器提供了强大的开发者工具，帮助开发者调试和优化Web应用。</p><h3 id="elements-元素" tabindex="-1">Elements（元素） <a class="header-anchor" href="#elements-元素" aria-label="Permalink to &quot;Elements（元素）&quot;">​</a></h3><ul><li>检查和修改DOM结构</li><li>实时编辑CSS样式</li><li>查看事件监听器</li><li>断点调试DOM变化</li></ul><h3 id="console-控制台" tabindex="-1">Console（控制台） <a class="header-anchor" href="#console-控制台" aria-label="Permalink to &quot;Console（控制台）&quot;">​</a></h3><ul><li>输出调试信息</li><li>执行JavaScript代码</li><li>查看错误和警告</li><li>使用console API</li></ul><h3 id="network-网络" tabindex="-1">Network（网络） <a class="header-anchor" href="#network-网络" aria-label="Permalink to &quot;Network（网络）&quot;">​</a></h3><ul><li>监控网络请求</li><li>分析资源加载时间</li><li>查看HTTP头信息</li><li>模拟网络条件</li></ul><h3 id="performance-性能" tabindex="-1">Performance（性能） <a class="header-anchor" href="#performance-性能" aria-label="Permalink to &quot;Performance（性能）&quot;">​</a></h3><ul><li>记录和分析页面性能</li><li>查看CPU和内存使用情况</li><li>识别性能瓶颈</li><li>分析帧率和渲染时间</li></ul><h3 id="memory-内存" tabindex="-1">Memory（内存） <a class="header-anchor" href="#memory-内存" aria-label="Permalink to &quot;Memory（内存）&quot;">​</a></h3><ul><li>分析内存使用情况</li><li>查找内存泄漏</li><li>查看内存分配</li><li>生成堆快照</li></ul><h3 id="application-应用" tabindex="-1">Application（应用） <a class="header-anchor" href="#application-应用" aria-label="Permalink to &quot;Application（应用）&quot;">​</a></h3><ul><li>管理本地存储</li><li>查看和修改Cookie</li><li>管理Service Worker</li><li>查看Web应用清单</li></ul><h3 id="security-安全" tabindex="-1">Security（安全） <a class="header-anchor" href="#security-安全" aria-label="Permalink to &quot;Security（安全）&quot;">​</a></h3><ul><li>检查HTTPS证书</li><li>识别混合内容问题</li><li>查看内容安全策略</li><li>分析安全漏洞</li></ul><h2 id="浏览器兼容性" tabindex="-1">浏览器兼容性 <a class="header-anchor" href="#浏览器兼容性" aria-label="Permalink to &quot;浏览器兼容性&quot;">​</a></h2><h3 id="检测和解决兼容性问题" tabindex="-1">检测和解决兼容性问题 <a class="header-anchor" href="#检测和解决兼容性问题" aria-label="Permalink to &quot;检测和解决兼容性问题&quot;">​</a></h3><ol><li><p><strong>特性检测</strong></p><ul><li>检测浏览器是否支持特定功能</li><li>根据支持情况提供不同实现</li><li>避免使用用户代理检测</li></ul></li><li><p><strong>Polyfill</strong></p><ul><li>为旧浏览器提供新功能的模拟实现</li><li>只在需要时加载</li><li>使用现代工具自动添加</li></ul></li><li><p><strong>渐进增强</strong></p><ul><li>从基本功能开始构建</li><li>逐步添加高级特性</li><li>确保核心功能在所有浏览器中可用</li></ul></li><li><p><strong>工具支持</strong></p><ul><li>Babel转译现代JavaScript</li><li>PostCSS处理CSS兼容性</li><li>Autoprefixer自动添加厂商前缀</li><li>Browserslist定义目标浏览器</li></ul></li></ol><h3 id="常见兼容性资源" tabindex="-1">常见兼容性资源 <a class="header-anchor" href="#常见兼容性资源" aria-label="Permalink to &quot;常见兼容性资源&quot;">​</a></h3><ul><li><strong>Can I use</strong>：查询特性兼容性数据</li><li><strong>MDN Web Docs</strong>：详细的API兼容性信息</li><li><strong>Modernizr</strong>：特性检测库</li><li><strong>core-js</strong>：JavaScript标准库polyfill</li></ul>',60)]))}const b=i(r,[["render",o]]);export{p as __pageData,b as default};
