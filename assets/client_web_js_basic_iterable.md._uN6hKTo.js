import{_ as s,c as i,o as e,ae as t}from"./chunks/framework.CBTkueSR.js";const c=JSON.parse('{"title":"迭代器","description":"","frontmatter":{},"headers":[],"relativePath":"client/web/js/basic/iterable.md","filePath":"client/web/js/basic/iterable.md"}'),n={name:"client/web/js/basic/iterable.md"};function l(h,a,p,r,o,d){return e(),i("div",null,[...a[0]||(a[0]=[t(`<h1 id="迭代器" tabindex="-1">迭代器 <a class="header-anchor" href="#迭代器" aria-label="Permalink to &quot;迭代器&quot;">​</a></h1><h2 id="迭代器协议" tabindex="-1">迭代器协议 <a class="header-anchor" href="#迭代器协议" aria-label="Permalink to &quot;迭代器协议&quot;">​</a></h2><p>一个具有 next 方法的对象，且 next 方法每次调用的时候都返回一个迭代结果，那么称这个对象实现了可迭代协议。</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">type</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> NextReturn</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">  value</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> any</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">  done</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> boolean</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>done 代表迭代是否是最后一次，value 代表本次迭代的值是多少。如果是最后一次，那么消费这可以知道这个 value 是最后一个值，并且不再进行进行迭代。</p><h2 id="可迭代协议" tabindex="-1">可迭代协议 <a class="header-anchor" href="#可迭代协议" aria-label="Permalink to &quot;可迭代协议&quot;">​</a></h2><p>一个实现了可迭代协议的对象叫做可迭代对象，是指拥有键值<code>[Symbol.iterator](){ }</code>的对象，该方法返回这个对象的迭代器。调用者可以使用这个迭代器来消费该对象。</p>`,7)])])}const b=s(n,[["render",l]]);export{c as __pageData,b as default};
