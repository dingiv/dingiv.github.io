import{_ as i,c as a,o as n,ae as l}from"./chunks/framework.BtEkjhVd.js";const t="/assets/inheritance.D1UMIsMU.png",o=JSON.parse('{"title":"CSS 属性","description":"","frontmatter":{},"headers":[],"relativePath":"client/css/prop.md","filePath":"client/css/prop.md"}'),h={name:"client/css/prop.md"};function e(p,s,k,r,d,E){return n(),a("div",null,s[0]||(s[0]=[l(`<h1 id="css-属性" tabindex="-1">CSS 属性 <a class="header-anchor" href="#css-属性" aria-label="Permalink to &quot;CSS 属性&quot;">​</a></h1><h2 id="层叠性" tabindex="-1">层叠性 <a class="header-anchor" href="#层叠性" aria-label="Permalink to &quot;层叠性&quot;">​</a></h2><h2 id="选择性" tabindex="-1">选择性 <a class="header-anchor" href="#选择性" aria-label="Permalink to &quot;选择性&quot;">​</a></h2><h2 id="继承性" tabindex="-1">继承性 <a class="header-anchor" href="#继承性" aria-label="Permalink to &quot;继承性&quot;">​</a></h2><p>某些 CSS 属性会自动从父元素传递到子元素，而无需在子元素中显式定义。这种行为被称为继承。继承属性通常与文本和字体相关。</p><h3 id="常见的自动继承的属性" tabindex="-1">常见的自动继承的属性： <a class="header-anchor" href="#常见的自动继承的属性" aria-label="Permalink to &quot;常见的自动继承的属性：&quot;">​</a></h3><ul><li>文本相关属性：color, font-family, font-size, font-style, font-variant, font-weight, line-height, text-align, text-indent, text-transform, visibility, white-space, word-spacing, letter-spacing</li><li>列表属性：list-style-type, list-style-position, list-style-image</li><li>表格属性：border-collapse, border-spacing, caption-side, empty-cells, table-layout</li></ul><h3 id="常见的不继承的属性" tabindex="-1">常见的不继承的属性： <a class="header-anchor" href="#常见的不继承的属性" aria-label="Permalink to &quot;常见的不继承的属性：&quot;">​</a></h3><ul><li>盒模型属性：margin, padding, border, width, height</li><li>布局属性：position, top, right, bottom, left, z-index, display, float, clear</li><li>背景属性：background-color, background-image, background-position, background-repeat, background-size</li></ul><h3 id="显式控制继承性" tabindex="-1">显式控制继承性 <a class="header-anchor" href="#显式控制继承性" aria-label="Permalink to &quot;显式控制继承性&quot;">​</a></h3><p>使用全局 CSS 常量 inherit、initial、unset 来对相应的属性进行设置即可。</p><ul><li>inherit。要继承</li><li>initial。不继承</li><li>unset。如果属性原本是可继承的，则表现为 inherit，如果原本不是可继承的，则表现为 initial</li></ul><h3 id="注意-⚠️" tabindex="-1">注意 ⚠️ <a class="header-anchor" href="#注意-⚠️" aria-label="Permalink to &quot;注意 ⚠️&quot;">​</a></h3><p>在 CSS 继承时，继承的是父元素的计算值，而不是继承 CSS 属性的指定值。 例如，一个父元素的字体大小为 16px，那么它的子元素通过指定 1.5em 的字体大小，则其计算值为 24px，而孙元素指定字体大小为 inherit，则继承父元素的字体大小 24px，如果孙元素指定其字体大小为 1.5em，其实际的字体大小将为 36px，这是因为继承的值是计算值而不是指定值。 而 line-height 为了提供稳定的行为，相对于元素自身的字体大小，而提供了纯数值的形式，这样可保证不受继承性的影响，推荐在设置 line-height 时使用无单位数值。如下为 MDN 上给的 demo。</p><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> class</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;box green&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">h1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;Avoid unexpected results by using unitless line-height.&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">h1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  length and percentage line-heights have poor inheritance behavior ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> class</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;box red&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">h1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;Avoid unexpected results by using unitless line-height.&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">h1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  length and percentage line-heights have poor inheritance behavior ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><div class="language-css vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">.green</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  line-height</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1.1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  border</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">solid</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> limegreen</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">.red</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  line-height</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1.1</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">em</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  border</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">solid</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> red</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">h1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  font-size</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">30</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">px</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">.box</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  width</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">18</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">em</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  display</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">inline-block</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  vertical-align</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">top</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  font-size</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">15</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">px</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p><img src="`+t+'" alt="执行效果"></p><h2 id="属性计算" tabindex="-1">属性计算 <a class="header-anchor" href="#属性计算" aria-label="Permalink to &quot;属性计算&quot;">​</a></h2><p>对于任意一个元素，从 CSS 源码到最终的元素属性，需要经过多个步骤，并且最终为每一个 CSS 属性计算出值，不得为空。因此，CSS 属性值分为三个阶段：<strong>指定值、计算值和实际值</strong>。</p><ul><li>指定值说的是在代码中书写的 CSS 规则，它可以有很多个。</li><li>计算值是指浏览器根据多个 CSS 规则计算出来的值，其中还要包括对于继承的属性的计算，计算值是一个精确的绝对单位的值，只有一个，例如：所有的长度和尺寸相关的 CSS 属性最终都会变成一个具体的指定具体的多少 <code>px</code>。</li><li>实际值还会考虑真正绘制到屏幕上时元素的真实效果，这个真实效果可能受到布局、显示、特效、动画的影响，从计算值到实际还需要经过实际的渲染，这个值是最终呈现在屏幕上的效果。</li></ul><h3 id="计算过程" tabindex="-1">计算过程 <a class="header-anchor" href="#计算过程" aria-label="Permalink to &quot;计算过程&quot;">​</a></h3><ol><li><p>声明，扫描和解析所有 css 源码，为该元素初始化已经被声明的属性</p></li><li><p>层叠 如果某个属性出现了多次，被重复声明和定义，那么，需要先进行重要性校验；一般地，</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>!important 修饰的浏览器样式 &gt; !important 修饰的作者样式 &gt; 普通作者样式 &gt; 普通浏览器样式</span></span></code></pre></div><p>然后，对于同一类的样式，根据选择性的 Specificity 高低来决定谁被采用；</p></li><li><p>继承，如果元素的某个属性没有被声明，那么看这个属性是否是一个可继承的属性，如果是，那么就是从父元素进行继承；</p></li><li><p>默认，如果一个属性依然没有值那么则使用 W3 标准中定义的默认值。</p></li></ol>',22)]))}const c=i(h,[["render",e]]);export{o as __pageData,c as default};
