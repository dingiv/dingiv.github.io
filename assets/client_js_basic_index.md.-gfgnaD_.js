import{_ as i}from"./chunks/types-transform.DU8T8p_6.js";import{_ as a}from"./chunks/own-p.Ch_NfHGO.js";import{_ as e,a as r}from"./chunks/class-tree.yXo4mE1M.js";import{_ as o}from"./chunks/stream.DjHHdJNE.js";import{_ as t,c as s,o as n,ae as c}from"./chunks/framework.Dh1jimFm.js";const k=JSON.parse('{"title":"JavaScript 基础知识","description":"","frontmatter":{},"headers":[],"relativePath":"client/js/basic/index.md","filePath":"client/js/basic/index.md"}'),d={name:"client/js/basic/index.md"};function u(p,l,h,m,_,b){return n(),s("div",null,l[0]||(l[0]=[c('<h1 id="javascript-基础知识" tabindex="-1">JavaScript 基础知识 <a class="header-anchor" href="#javascript-基础知识" aria-label="Permalink to &quot;JavaScript 基础知识&quot;">​</a></h1><p>本目录包含了 JavaScript 语言的基础知识，涵盖了从数据类型到异步编程等多个重要概念。这些知识是理解和使用 JavaScript 的基础。</p><h2 id="目录内容" tabindex="-1">目录内容 <a class="header-anchor" href="#目录内容" aria-label="Permalink to &quot;目录内容&quot;">​</a></h2><h3 id="_1-类型系统" tabindex="-1">1. 类型系统 <a class="header-anchor" href="#_1-类型系统" aria-label="Permalink to &quot;1. 类型系统&quot;">​</a></h3><ul><li><strong>类型转换</strong> (<code>type-transform.md</code>) <ul><li>显式类型转换</li><li>隐式类型转换</li><li>类型转换规则 <img src="'+i+'" alt="类型转换图"></li></ul></li></ul><h3 id="_2-对象系统" tabindex="-1">2. 对象系统 <a class="header-anchor" href="#_2-对象系统" aria-label="Permalink to &quot;2. 对象系统&quot;">​</a></h3><ul><li><p><strong>对象基础操作</strong> (<code>obj-base-ops.md</code>)</p><ul><li>对象创建</li><li>属性访问</li><li>方法调用</li></ul></li><li><p><strong>自有属性</strong> (<code>own-property.md</code>)</p><ul><li>属性描述符</li><li>属性枚举</li><li>属性配置 <img src="'+a+'" alt="自有属性图"></li></ul></li><li><p><strong>原型链</strong> (<code>proto.md</code>)</p><ul><li>原型继承</li><li>原型链查找 <img src="'+e+'" alt="原型链图"></li></ul></li></ul><h3 id="_3-类系统" tabindex="-1">3. 类系统 <a class="header-anchor" href="#_3-类系统" aria-label="Permalink to &quot;3. 类系统&quot;">​</a></h3><ul><li><strong>类</strong> (<code>class.md</code>) <ul><li>类定义</li><li>继承</li><li>静态成员 <img src="'+r+'" alt="类继承图"></li></ul></li></ul><h3 id="_4-异步编程" tabindex="-1">4. 异步编程 <a class="header-anchor" href="#_4-异步编程" aria-label="Permalink to &quot;4. 异步编程&quot;">​</a></h3><ul><li><strong>异步编程</strong> (<code>async.md</code>) <ul><li>Promise</li><li>async/await</li><li>事件循环</li></ul></li></ul><h3 id="_5-迭代器与流" tabindex="-1">5. 迭代器与流 <a class="header-anchor" href="#_5-迭代器与流" aria-label="Permalink to &quot;5. 迭代器与流&quot;">​</a></h3><ul><li><p><strong>可迭代对象</strong> (<code>iterable.md</code>)</p><ul><li>迭代器协议</li><li>生成器</li><li>内置可迭代对象</li></ul></li><li><p><strong>流</strong> (<code>stream.md</code>)</p><ul><li>流的概念</li><li>流的类型</li><li>流的使用 <img src="'+o+'" alt="流处理图"></li></ul></li></ul><h2 id="学习建议" tabindex="-1">学习建议 <a class="header-anchor" href="#学习建议" aria-label="Permalink to &quot;学习建议&quot;">​</a></h2><ol><li><p>建议按照以下顺序学习：</p><ul><li>先掌握类型系统和对象系统</li><li>然后学习类系统</li><li>最后学习异步编程和流</li></ul></li><li><p>每个概念都配有示例代码和图表，帮助理解</p></li><li><p>建议结合实践来学习，可以尝试修改示例代码来加深理解</p></li></ol><h2 id="注意事项" tabindex="-1">注意事项 <a class="header-anchor" href="#注意事项" aria-label="Permalink to &quot;注意事项&quot;">​</a></h2><ol><li>这些文档主要关注 ES6+ 的特性</li><li>部分内容可能需要现代浏览器支持</li><li>建议使用 Node.js 环境进行实践</li></ol>',17)]))}const S=t(d,[["render",u]]);export{k as __pageData,S as default};
