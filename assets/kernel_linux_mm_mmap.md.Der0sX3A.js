import{_ as s,c as a,o as l,ae as h}from"./chunks/framework.BtEkjhVd.js";const g=JSON.parse('{"title":"内存映射","description":"","frontmatter":{},"headers":[],"relativePath":"kernel/linux/mm/mmap.md","filePath":"kernel/linux/mm/mmap.md"}'),n={name:"kernel/linux/mm/mmap.md"};function t(e,i,p,k,r,d){return l(),a("div",null,i[0]||(i[0]=[h(`<h1 id="内存映射" tabindex="-1">内存映射 <a class="header-anchor" href="#内存映射" aria-label="Permalink to &quot;内存映射&quot;">​</a></h1><p>操作系统 通过 mmap 系统调用进行操作，mmap 操作可以将一个文件 fd 中的数据进行加载，将其数据映射到虚拟内存空间中，当读写这些内存的时候，就相当于读写这个文件的内容，可以大幅度提高文件读写的性能，同时，内存映射还支持更多的功能。</p><h2 id="直接映射" tabindex="-1">直接映射 <a class="header-anchor" href="#直接映射" aria-label="Permalink to &quot;直接映射&quot;">​</a></h2><p>操作系统可以直接访问物理内存，但是由于 CPU 访问内存必须经历 MMU，所以操作系统在访问物理内存的时候依然需要进行映射，由此形成内核地址空间。操作系统内核态地址直接使用线性映射即可。</p><h2 id="虚拟内存映射" tabindex="-1">虚拟内存映射 <a class="header-anchor" href="#虚拟内存映射" aria-label="Permalink to &quot;虚拟内存映射&quot;">​</a></h2><p>在进程申请内存的时候，操作系统并不会立即建立虚拟内存页到真实物理页的映射关系，只有当进程真正去访问某个虚拟页的时候，并触发缺页异常时，操作系统才会开始为这个页去映射真实的物理页。</p><h2 id="共享内存" tabindex="-1">共享内存 <a class="header-anchor" href="#共享内存" aria-label="Permalink to &quot;共享内存&quot;">​</a></h2><h3 id="内存映射-1" tabindex="-1">内存映射 <a class="header-anchor" href="#内存映射-1" aria-label="Permalink to &quot;内存映射&quot;">​</a></h3><p>物理内存和虚拟内存之间存在映射关系：</p><ul><li>映射以一块连续的内存为单位（通常为4000 Byte）</li><li>一块虚拟内存对应一块真实的物理内存</li><li>这个单位称为内存分页</li><li>操作系统通过页表（多级数组数据结构）维护映射关系</li></ul><p>当进程创建时，操作系统为进程创建页表，维护进程的虚拟内存到物理内存的映射。当应用程序通过系统调用进行内存分配时：</p><ol><li>调用操作系统的封装函数</li><li>操作系统分配物理内存</li><li>执行内存映射操作</li><li>返回指向虚拟内存的指针</li></ol><h3 id="自定义内存映射" tabindex="-1">自定义内存映射 <a class="header-anchor" href="#自定义内存映射" aria-label="Permalink to &quot;自定义内存映射&quot;">​</a></h3><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#include</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &lt;sys/mman.h&gt;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/**</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">@param</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> addr</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> 可以是 NULL，由操作系统自行分配</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">@param</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> fd</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> 需要映射的文件</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">@param</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> offset</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> 偏移量</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> */</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">void</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">mmap</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">void</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">addr</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">size_t</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> length</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> prot</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> flags</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> fd</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">off_t</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> offset</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><p>mmap函数将文件fd中的内容映射到当前进程的内存空间中addr位置处，大小为length，通过prot参数控制内存访问权限，通过flags提供更多配置选项。</p>`,15)]))}const m=s(n,[["render",t]]);export{g as __pageData,m as default};
