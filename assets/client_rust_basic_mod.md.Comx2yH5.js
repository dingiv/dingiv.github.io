import{_ as a,c as e,o as r,ae as d}from"./chunks/framework.CBTkueSR.js";const u=JSON.parse('{"title":"模块系统","description":"","frontmatter":{"title":"模块系统","order":20},"headers":[],"relativePath":"client/rust/basic/mod.md","filePath":"client/rust/basic/mod.md"}'),c={name:"client/rust/basic/mod.md"};function t(s,o,i,m,l,n){return r(),e("div",null,[...o[0]||(o[0]=[d('<h1 id="模块系统和包管理" tabindex="-1">模块系统和包管理 <a class="header-anchor" href="#模块系统和包管理" aria-label="Permalink to &quot;模块系统和包管理&quot;">​</a></h1><p>rust 的模块系统有三个主要抽象，package, crate, mod。理解模块是建构大型应用和复用社区生态的前提。</p><h2 id="package" tabindex="-1">package <a class="header-anchor" href="#package" aria-label="Permalink to &quot;package&quot;">​</a></h2><p>一个 rust package/project 通常是一个文件夹，内部包含一个 Cargo.toml，它是 Cargo 包管理的基本单位。一个 package 通常至少含有一个 crate。</p><h2 id="crate" tabindex="-1">crate <a class="header-anchor" href="#crate" aria-label="Permalink to &quot;crate&quot;">​</a></h2><p>一个二进制的构建单元，在编译之后，就是一个二进制的可执行文件。crate 有两种，一种是独立执行二进制，其代码入口通常是 <code>&lt;package&gt;/src/main.rs</code> 文件；另一种是链接库二进制文件，其代码入口是 <code>&lt;package&gt;/src/lib.rs</code>。往往，我们的实际工程程序入口就是 main.rs，如果我们要发布链接库，那么入口就是 lib.rs。</p><h2 id="mod" tabindex="-1">mod <a class="header-anchor" href="#mod" aria-label="Permalink to &quot;mod&quot;">​</a></h2><p>一个 mod 模块是 Rust 代码的一个逻辑单元，可以用来组织和封装功能。Rust 模块可以在 crate 内部进行嵌套和组织。</p><p>程序的编译入口是 src/main.rs 文件，这是程序的根模块。你可以在这个文件中使用 <code>mod mod_name {}</code> 关键字进行模块声明，模块定义支持嵌套。</p><h3 id="模块拆分" tabindex="-1">模块拆分 <a class="header-anchor" href="#模块拆分" aria-label="Permalink to &quot;模块拆分&quot;">​</a></h3><p>当代码量变大的时候，我们需要将模块的代码拆分到不同的文件中进行保存。如何拆分？在一个模块文件中，可以将 <code>mod mod_name {}</code> 中的实现部分，拆分到<strong>与该文件同目录</strong>中的 mod_name.rs 文件中，然后留下 <code>mod mod_name;</code>，此语句表示，模块的实现被拆分到了同目录下的 <code>mod_name.rs</code> 文件中了，编译器将自行寻找它。</p><p>嵌套拆分，如果 mod_name.rs 中的代码还是多，那么还可以继续拆分。现在，将该文件变成 <code>mod_name/mod.rs</code> 文件，然后，将 mod.rs 文件中的子模块mod_a, mod_b 使用同样的方式，拆到同目录 mod_name 中的 mod_a.rs 和 mod_b.rs 文件中。</p><blockquote><p>mod_name/mod.rs 文件类似于 JavaScript 当中的 mod_name/index.js 文件，不过，JavaScript 当中的模块不存在和目录结构捆绑的父子关系，而 rust 中，还有其他的语言，如 Java、Python、Golang 等，有这样的关系。而像 JavaScript、C 语言、C++ 就没有模块和目录的捆绑。</p></blockquote><h3 id="访问控制和模块导入" tabindex="-1">访问控制和模块导入 <a class="header-anchor" href="#访问控制和模块导入" aria-label="Permalink to &quot;访问控制和模块导入&quot;">​</a></h3><p>使用 <code>pub</code> 关键字控制内容对于其所属模块外部代码的可见性。对于一个模块内部的代码，其默认对外不可见，但是对于该模块内部的同级内容可见。</p><p>如果是子模块 a，那么，哪怕模块 a 本身被 pub 修饰，子模块内部的代码页不会被兄弟模块 b 可见，兄弟模块 b 只是知道有这么个兄弟 a，而不知道 a 的内部有什么。</p><p>使用 <code>use</code> 关键字进行模块导入</p><ul><li><code>use foo;</code> 导入子模块 foo；</li><li><code>use foo::bar;</code> 导入子模块 foo 中的 bar，具体是什么不知道；</li><li><code>use foo::{bar1,bar2};</code> 导入子模块 foo 中的 bar1 和 bar2，具体是什么不知道；</li><li><code>use foo::*;</code> 导入子模块 foo 中的所有东西，具体是什么不知道；</li><li><code>use super::foo;</code> 导入兄弟模块 foo，即同目录下的 foo.rs 文件或者 foo/mod.rs 文件，或者是同文件中的 mod foo 声明；</li><li><code>use crate::foo;</code> 导入 src 目录下的文件，即 src/foo.rs 或者 src/foo/mod.rs 文件，或者 main.rs 中 mod foo 声明；</li></ul>',18)])])}const _=a(c,[["render",t]]);export{u as __pageData,_ as default};
