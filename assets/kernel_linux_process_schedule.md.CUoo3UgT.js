import{_ as s,c as a,o as l,ae as n}from"./chunks/framework.BtEkjhVd.js";const c=JSON.parse('{"title":"调度","description":"","frontmatter":{},"headers":[],"relativePath":"kernel/linux/process/schedule.md","filePath":"kernel/linux/process/schedule.md"}'),h={name:"kernel/linux/process/schedule.md"};function t(p,i,e,k,r,d){return l(),a("div",null,i[0]||(i[0]=[n(`<h1 id="调度" tabindex="-1">调度 <a class="header-anchor" href="#调度" aria-label="Permalink to &quot;调度&quot;">​</a></h1><h2 id="调度器概述" tabindex="-1">调度器概述 <a class="header-anchor" href="#调度器概述" aria-label="Permalink to &quot;调度器概述&quot;">​</a></h2><p>Linux调度器是操作系统的核心组件，负责决定哪个进程在何时运行，以及运行多长时间。Linux采用完全公平调度器(CFS)作为默认调度器，实现了对CPU资源的公平分配。</p><p>进程可以被阻塞，往往是因为进程执行了一个 IO 动作，而此时进程的任务必须等待 IO 设备完成读写动作之后，才能执行下一个动作，这意味着 CPU 必须等待缓慢的 IO 设备完成它们的工作。为了减少 CPU 等待 IO 设备的时间，操作系统会在进程使用了阻塞 IO 调用的时候将进程挂起，从而主动让出该进程对 CPU 的占用，此时，调度算法将会调度其他进程，让其他进程</p><p>调度器类，不同的进程可以使用不同的调度器</p><p>时间片长短 时间记账，让运行时间最少的任务先执行</p><p>nice 值</p><p>调用优先级——多个任务都处于等待的时候，谁先进行</p><p>抢占</p><h2 id="多级反馈队列" tabindex="-1">多级反馈队列 <a class="header-anchor" href="#多级反馈队列" aria-label="Permalink to &quot;多级反馈队列&quot;">​</a></h2><p>Linux系统的调度算法采用的是多级反馈队列(MLFQ)，通过动态调整进程优先级来实现公平调度。</p><h3 id="优先级分类" tabindex="-1">优先级分类 <a class="header-anchor" href="#优先级分类" aria-label="Permalink to &quot;优先级分类&quot;">​</a></h3><ol><li><p>实时进程优先级(0-99)</p><ul><li>SCHED_FIFO：先进先出，直到主动让出CPU</li><li>SCHED_RR：时间片轮转，相同优先级进程轮流执行</li><li>SCHED_DEADLINE：基于截止时间的调度</li></ul></li><li><p>普通进程优先级(100-139)</p><ul><li>静态优先级(nice值)：-20到19</li><li>动态优先级：根据进程行为动态调整</li></ul></li></ol><h3 id="调度策略" tabindex="-1">调度策略 <a class="header-anchor" href="#调度策略" aria-label="Permalink to &quot;调度策略&quot;">​</a></h3><ol><li><p>完全公平调度(CFS)</p><ul><li>基于虚拟运行时间</li><li>红黑树组织就绪队列</li><li>动态时间片分配</li></ul></li><li><p>实时调度</p><ul><li>优先级抢占</li><li>时间片轮转</li><li>截止时间保证</li></ul></li></ol><h2 id="内核代码上下文" tabindex="-1">内核代码上下文 <a class="header-anchor" href="#内核代码上下文" aria-label="Permalink to &quot;内核代码上下文&quot;">​</a></h2><h3 id="调度器数据结构" tabindex="-1">调度器数据结构 <a class="header-anchor" href="#调度器数据结构" aria-label="Permalink to &quot;调度器数据结构&quot;">​</a></h3><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">struct</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> sched_entity {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    struct</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> load_weight load;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    struct</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> rb_node run_node;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    struct</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> list_head group_node;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    unsigned</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> on_rq;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    u64 exec_start;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    u64 sum_exec_runtime;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    u64 vruntime;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    u64 prev_sum_exec_runtime;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    u64 nr_migrations;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    struct</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> sched_statistics statistics;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">struct</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> task_struct {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // ... 其他字段 ...</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    struct</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> sched_entity se;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    struct</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> sched_rt_entity rt;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    struct</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> sched_dl_entity dl;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // ... 其他字段 ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span></code></pre></div><h3 id="调度器实现" tabindex="-1">调度器实现 <a class="header-anchor" href="#调度器实现" aria-label="Permalink to &quot;调度器实现&quot;">​</a></h3><ol><li>进程选择</li></ol><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">static</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> struct</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> task_struct </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">pick_next_task_fair</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">struct</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> rq </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">rq</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    struct</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> task_struct </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">p;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    struct</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> cfs_rq </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">cfs_rq </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">rq-&gt;cfs;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    struct</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> sched_entity </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">se;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">cfs_rq-&gt;nr_running)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> NULL</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    se </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> pick_next_entity</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(cfs_rq);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    p </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> task_of</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(se);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> p;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><ol start="2"><li>时间片分配</li></ol><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">static</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> update_curr</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">struct</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> cfs_rq </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">cfs_rq</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    struct</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> sched_entity </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">curr </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> cfs_rq-&gt;curr;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    u64 now </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> rq_clock_task</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">rq_of</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(cfs_rq));</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    u64 delta_exec;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    delta_exec </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> now </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> curr-&gt;exec_start;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    curr-&gt;exec_start </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> now;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    curr-&gt;sum_exec_runtime </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> delta_exec;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    curr-&gt;vruntime </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> calc_delta_fair</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(delta_exec, curr);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h2 id="时钟滴答" tabindex="-1">时钟滴答 <a class="header-anchor" href="#时钟滴答" aria-label="Permalink to &quot;时钟滴答&quot;">​</a></h2><h2 id="调度时机" tabindex="-1">调度时机 <a class="header-anchor" href="#调度时机" aria-label="Permalink to &quot;调度时机&quot;">​</a></h2><h3 id="主动调度" tabindex="-1">主动调度 <a class="header-anchor" href="#主动调度" aria-label="Permalink to &quot;主动调度&quot;">​</a></h3><ol><li><p>进程阻塞</p><ul><li>等待I/O</li><li>等待信号量</li><li>等待事件</li></ul></li><li><p>进程退出</p><ul><li>正常退出</li><li>异常退出</li><li>被信号终止</li></ul></li></ol><h3 id="被动调度" tabindex="-1">被动调度 <a class="header-anchor" href="#被动调度" aria-label="Permalink to &quot;被动调度&quot;">​</a></h3><ol><li><p>时钟中断</p><ul><li>时间片耗尽</li><li>更新统计信息</li><li>检查是否需要调度</li></ul></li><li><p>优先级抢占</p><ul><li>高优先级进程就绪</li><li>实时进程抢占</li><li>内核抢占</li></ul></li></ol><h2 id="调度优化" tabindex="-1">调度优化 <a class="header-anchor" href="#调度优化" aria-label="Permalink to &quot;调度优化&quot;">​</a></h2><h3 id="负载均衡" tabindex="-1">负载均衡 <a class="header-anchor" href="#负载均衡" aria-label="Permalink to &quot;负载均衡&quot;">​</a></h3><ol><li><p>多核调度</p><ul><li>进程迁移</li><li>负载均衡</li><li>CPU亲和性</li></ul></li><li><p>缓存优化</p><ul><li>缓存亲和性</li><li>NUMA感知</li><li>内存访问优化</li></ul></li></ol><h3 id="性能调优" tabindex="-1">性能调优 <a class="header-anchor" href="#性能调优" aria-label="Permalink to &quot;性能调优&quot;">​</a></h3><ol><li><p>调度参数</p><ul><li>时间片长度</li><li>调度延迟</li><li>负载权重</li></ul></li><li><p>系统配置</p><ul><li>CPU隔离</li><li>实时进程配置</li><li>调度组设置</li></ul></li></ol><h2 id="调度器扩展" tabindex="-1">调度器扩展 <a class="header-anchor" href="#调度器扩展" aria-label="Permalink to &quot;调度器扩展&quot;">​</a></h2><h3 id="调度类" tabindex="-1">调度类 <a class="header-anchor" href="#调度类" aria-label="Permalink to &quot;调度类&quot;">​</a></h3><ol><li><p>完全公平调度类</p><ul><li>普通进程调度</li><li>公平性保证</li><li>动态优先级</li></ul></li><li><p>实时调度类</p><ul><li>实时进程调度</li><li>优先级保证</li><li>截止时间保证</li></ul></li><li><p>截止时间调度类</p><ul><li>基于截止时间</li><li>资源预留</li><li>服务质量保证</li></ul></li></ol><h3 id="调度策略-1" tabindex="-1">调度策略 <a class="header-anchor" href="#调度策略-1" aria-label="Permalink to &quot;调度策略&quot;">​</a></h3><ol><li><p>批处理调度</p><ul><li>吞吐量优化</li><li>资源利用率</li><li>批处理作业</li></ul></li><li><p>交互式调度</p><ul><li>响应时间优化</li><li>用户交互</li><li>前台进程</li></ul></li></ol><h2 id="调度器调试" tabindex="-1">调度器调试 <a class="header-anchor" href="#调度器调试" aria-label="Permalink to &quot;调度器调试&quot;">​</a></h2><h3 id="性能分析" tabindex="-1">性能分析 <a class="header-anchor" href="#性能分析" aria-label="Permalink to &quot;性能分析&quot;">​</a></h3><ol><li><p>调度延迟</p><ul><li>测量方法</li><li>影响因素</li><li>优化方案</li></ul></li><li><p>吞吐量</p><ul><li>测试方法</li><li>性能指标</li><li>瓶颈分析</li></ul></li></ol><h3 id="问题诊断" tabindex="-1">问题诊断 <a class="header-anchor" href="#问题诊断" aria-label="Permalink to &quot;问题诊断&quot;">​</a></h3><ol><li><p>调度问题</p><ul><li>进程饥饿</li><li>优先级反转</li><li>死锁检测</li></ul></li><li><p>性能问题</p><ul><li>CPU使用率</li><li>响应时间</li><li>系统负载</li></ul></li></ol><h2 id="实际应用" tabindex="-1">实际应用 <a class="header-anchor" href="#实际应用" aria-label="Permalink to &quot;实际应用&quot;">​</a></h2><h3 id="系统调优" tabindex="-1">系统调优 <a class="header-anchor" href="#系统调优" aria-label="Permalink to &quot;系统调优&quot;">​</a></h3><ol><li><p>进程优先级</p><ul><li>nice值设置</li><li>实时优先级</li><li>调度策略选择</li></ul></li><li><p>资源控制</p><ul><li>CPU限制</li><li>内存限制</li><li>IO限制</li></ul></li></ol><h3 id="开发建议" tabindex="-1">开发建议 <a class="header-anchor" href="#开发建议" aria-label="Permalink to &quot;开发建议&quot;">​</a></h3><ol><li><p>进程设计</p><ul><li>合理划分任务</li><li>避免CPU密集</li><li>考虑调度特性</li></ul></li><li><p>性能优化</p><ul><li>减少调度开销</li><li>优化IO操作</li><li>合理使用锁</li></ul></li></ol><h3 id="阻塞和空转" tabindex="-1">阻塞和空转 <a class="header-anchor" href="#阻塞和空转" aria-label="Permalink to &quot;阻塞和空转&quot;">​</a></h3><p>从操作系统层面，当进程调用阻塞式系统调用时：</p><ol><li>进程进入阻塞状态</li><li>操作系统不会把CPU的时间片分配给这个进程</li><li>直到调用结束，进程从阻塞状态重新进入执行状态</li></ol><p>常见的阻塞式调用包括：</p><ol><li><p>进程调度和中断</p><ul><li>进程本身的调度和中断机制通过阻塞方式实现</li><li>这个过程对于进程自身来说是无感知的</li></ul></li><li><p>阻塞式IO调用</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 阻塞式函数</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">read</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(), </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">write</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(), </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sleep</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(), </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">wait</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span></code></pre></div></li><li><p>锁和同步机制</p><ul><li>互斥锁（Mutex）</li><li>信号量（Semaphore）</li></ul><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 线程互斥锁</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">pthread_mutex_t</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> mutex;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">pthread_cond_t</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> cond;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">pthread_mutex_init</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">mutex</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">NULL</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 尝试获取互斥锁，如果无法获取则进入阻塞状态</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">pthread_mutex_lock</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">mutex</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 开始访问被保护的资源</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// ...</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 释放锁</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">pthread_mutex_unlock</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">mutex</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 信号量</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">sem_t</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> sem;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sem_init</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">sem</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // 初始化信号量为0</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sem_wait</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">sem</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // 等待信号量</span></span></code></pre></div></li></ol><p>与阻塞不同，空转指的是进程进入无意义的空循环状态，可能通过不断检查条件来等待某个条件的达成。这可能是程序bug或刻意设计。在这种状态下，进程处于正常执行状态但不执行有用逻辑，导致CPU浪费。</p><blockquote><p>死锁时，锁住的两个或多个进程会被阻塞，然后被操作系统挂起，CPU占用为0，这是典型的死锁特征。</p></blockquote>`,56)]))}const o=s(h,[["render",t]]);export{c as __pageData,o as default};
