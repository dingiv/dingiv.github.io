import{_ as l,c as s,o as a,j as t,a as n}from"./chunks/framework.Dgg8-8ov.js";const m=JSON.parse('{"title":"Rust","description":"","frontmatter":{"title":"Rust","order":50},"headers":[],"relativePath":"client/rust/index.md","filePath":"client/rust/index.md"}'),r={name:"client/rust/index.md"};function u(i,e,o,c,d,R){return a(),s("div",null,e[0]||(e[0]=[t("h1",{id:"rust",tabindex:"-1"},[n("Rust "),t("a",{class:"header-anchor",href:"#rust","aria-label":'Permalink to "Rust"'},"​")],-1),t("p",null,"Rust 是一门年轻而现代的系统级编程语言，它的目标是填补 C 语言和高级应用层编程语言之间的空白，类似于 C++，即在需要高性能的同时，也需要高级语言特性支持的领域。为了达成这一目标，Rust 基于前人的经验教训，抛弃了历史的包袱，并提供了一套独特、安全、统一、强大的编程工具。",-1),t("ul",null,[t("li",null,"内存安全：Rust 关注解决 C 语言和 C++ 的内存安全问题，借鉴了 C++ 的 RAII（资源获取即初始化）特性，并引入了独特的生命周期和所有权机制，采用自动化、非垃圾回收的内存管理方法。在内存安全和内存管理的矛盾之间，Rust 取得了一个卓越的平衡。"),t("li",null,"无畏并发：Rust 利用其所有权和借用机制，在很大程度上避免了并发编程中的数据竞争和资源冲突，确保了并发操作的安全性。"),t("li",null,"高效 I/O：Rust 支持协程和异步编程，这些特性允许程序在执行时暂停并将控制权交给调用者，从而避免 I/O 操作引起的 CPU 阻塞，提高了 CPU 的利用率和程序的响应性。"),t("li",null,"性能卓越：Rust 遵循零成本抽象的理念，即你所不需要的特性无需支付任何性能代价，你所需要的功能，编译器提供的实现往往也难以被超越。"),t("li",null,"双重范式：Rust 融合了函数式编程和面向对象编程的核心思想，吸取了二者的优点：例如数据不可变、闭包、函子、组合优于继承、泛型等；并摒弃了那些容易引发问题的特性，如传统的继承、异常处理（如 try-catch）和空指针等。这为开发者提供了优雅且高效的抽象能力，同时避免了开发者误入语言陷阱。"),t("li",null,"面向工程：Rust 拥有现代化的包管理系统和构建工具链，使得代码复用和管理变得更加简单。开发者能够专注于业务逻辑的实现，而不必耗费精力在项目配置和环境管理上。")],-1)]))}const f=l(r,[["render",u]]);export{m as __pageData,f as default};
