import{_ as i,c as e,o as a,ae as r}from"./chunks/framework.CBTkueSR.js";const b=JSON.parse('{"title":"库函数","description":"","frontmatter":{"title":"库函数","order":30},"headers":[],"relativePath":"kernel/c/lib.md","filePath":"kernel/c/lib.md"}'),o={name:"kernel/c/lib.md"};function t(n,l,u,c,d,h){return a(),e("div",null,[...l[0]||(l[0]=[r('<h1 id="库函数" tabindex="-1">库函数 <a class="header-anchor" href="#库函数" aria-label="Permalink to &quot;库函数&quot;">​</a></h1><h2 id="c-标准函数" tabindex="-1">C 标准函数 <a class="header-anchor" href="#c-标准函数" aria-label="Permalink to &quot;C 标准函数&quot;">​</a></h2><h2 id="glib" tabindex="-1">Glib <a class="header-anchor" href="#glib" aria-label="Permalink to &quot;Glib&quot;">​</a></h2><p>Glib 是由 GNU 书写的 C 语言通用跨平台库，广泛应用于 C 语言程序中。它提供 C 标准库所没有的很多上层 API 封装，简化了 C 语言的开发和使用，包括：内存管理、字符串处理、常用数据结构、文件管理、锁机制等。</p><h2 id="用户态常用第三方库" tabindex="-1">用户态常用第三方库 <a class="header-anchor" href="#用户态常用第三方库" aria-label="Permalink to &quot;用户态常用第三方库&quot;">​</a></h2><ol><li>网络相关 <ul><li>libcurl：HTTP 客户端库</li><li>OpenSSL：加密和安全通信</li><li>libevent：事件驱动网络库</li><li>libuv：跨平台异步 I/O 库</li></ul></li><li>数据处理 <ul><li>SQLite：轻量级数据库</li><li>zlib：数据压缩</li><li>libxml2：XML 处理</li><li>jansson：JSON 处理</li></ul></li><li>多媒体 <ul><li>FFmpeg：音视频处理</li><li>libpng：PNG 图像处理</li></ul></li></ol><h2 id="klib-linux-kernel-library" tabindex="-1">Klib (Linux Kernel Library) <a class="header-anchor" href="#klib-linux-kernel-library" aria-label="Permalink to &quot;Klib (Linux Kernel Library)&quot;">​</a></h2><p>Linux 下的程序编译环境默认包含 <code>/usr/include</code> 文件夹下的头文件：</p><ul><li><code>/usr/include/linux</code>：用于编译和开发内核模块</li><li><code>/usr/include/sys</code>：提供与 Linux 系统强相关的函数库</li></ul><p>系统调用机制：</p><ul><li>用户态程序通过包含 <code>sys/xxx.h</code> 进行系统调用</li><li>通过 <code>sys/ioctl.h</code> 提供的文件操作接口与内核模块交互</li><li>系统调用函数在进程实例化时由系统自动加载到内核空间</li></ul><h2 id="代码实践" tabindex="-1">代码实践 <a class="header-anchor" href="#代码实践" aria-label="Permalink to &quot;代码实践&quot;">​</a></h2><h3 id="函数设计原则" tabindex="-1">函数设计原则 <a class="header-anchor" href="#函数设计原则" aria-label="Permalink to &quot;函数设计原则&quot;">​</a></h3><ol><li>函数纯洁性 <ul><li>C 程序对 I/O 操作有容忍性</li><li>多数函数允许使用 I/O 操作</li></ul></li><li>参数传递 <ul><li>推崇&quot;改参函数&quot;模式</li><li>函数返回值通常为 int 类型，表示操作是否成功</li><li>实际结果通过参数中的指针返回</li><li>内存分配由用户决定（栈或堆）</li></ul></li><li>内存管理 <ul><li>动态内存分配需要传递指针的指针</li><li>函数通过参数返回动态分配的内存</li></ul></li><li>编程规范 <ul><li>减少全局状态引用</li><li>检查所有返回 int 结果的函数</li><li>验证所有接收指针的参数的合法性</li></ul></li></ol><h3 id="开发环境" tabindex="-1">开发环境 <a class="header-anchor" href="#开发环境" aria-label="Permalink to &quot;开发环境&quot;">​</a></h3><ul><li>使用 QEMU 模拟器进行跨平台硬件模拟</li><li>支持不同架构下的内核开发和调试</li></ul>',16)])])}const x=i(o,[["render",t]]);export{b as __pageData,x as default};
