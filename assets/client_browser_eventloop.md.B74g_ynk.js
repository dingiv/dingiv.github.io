import{_ as a,c as t,o,ae as r}from"./chunks/framework.BtEkjhVd.js";const _=JSON.parse('{"title":"事件循环","description":"","frontmatter":{},"headers":[],"relativePath":"client/browser/eventloop.md","filePath":"client/browser/eventloop.md"}'),n={name:"client/browser/eventloop.md"};function i(l,e,s,c,d,h){return o(),t("div",null,e[0]||(e[0]=[r('<h1 id="事件循环" tabindex="-1">事件循环 <a class="header-anchor" href="#事件循环" aria-label="Permalink to &quot;事件循环&quot;">​</a></h1><p>事件循环是浏览器实现异步 IO 功能的基础。</p><h2 id="ui-事件" tabindex="-1">UI 事件 <a class="header-anchor" href="#ui-事件" aria-label="Permalink to &quot;UI 事件&quot;">​</a></h2><p>浏览器监听下层窗口系统传递的键盘和鼠标等设备的事件，对事件进行进行进一步封装，结合 UI 元素生成 UI 事件，并向上传播</p><h3 id="事件冒泡" tabindex="-1">事件冒泡 <a class="header-anchor" href="#事件冒泡" aria-label="Permalink to &quot;事件冒泡&quot;">​</a></h3><h2 id="多级队列" tabindex="-1">多级队列 <a class="header-anchor" href="#多级队列" aria-label="Permalink to &quot;多级队列&quot;">​</a></h2><p>浏览器的循环队列使用多级</p>',7)]))}const u=a(n,[["render",i]]);export{_ as __pageData,u as default};
