import{_ as e,c as r,o as t,ae as o}from"./chunks/framework.Dh1jimFm.js";const u=JSON.parse('{"title":"存储","description":"","frontmatter":{},"headers":[],"relativePath":"basic/hardware/storage.md","filePath":"basic/hardware/storage.md"}'),i={name:"basic/hardware/storage.md"};function s(n,a,h,d,l,c){return t(),r("div",null,a[0]||(a[0]=[o('<h1 id="存储" tabindex="-1">存储 <a class="header-anchor" href="#存储" aria-label="Permalink to &quot;存储&quot;">​</a></h1><p>存储系统是一个多级的缓存结构。其实践的理由是时间和空间权衡。大量的存储意味着数据查询的困难，速度慢；快速的数据查询意味着，存储量少，造价昂贵。</p><h2 id="寄存器" tabindex="-1">寄存器 <a class="header-anchor" href="#寄存器" aria-label="Permalink to &quot;寄存器&quot;">​</a></h2><h2 id="cpu-缓存" tabindex="-1">CPU 缓存 <a class="header-anchor" href="#cpu-缓存" aria-label="Permalink to &quot;CPU 缓存&quot;">​</a></h2><h2 id="内存" tabindex="-1">内存 <a class="header-anchor" href="#内存" aria-label="Permalink to &quot;内存&quot;">​</a></h2><h2 id="磁盘" tabindex="-1">磁盘 <a class="header-anchor" href="#磁盘" aria-label="Permalink to &quot;磁盘&quot;">​</a></h2>',6)]))}const p=e(i,[["render",s]]);export{u as __pageData,p as default};
