import{_ as i,c as e,o as a,ae as r}from"./chunks/framework.Dgg8-8ov.js";const d=JSON.parse('{"title":"架构","description":"","frontmatter":{},"headers":[],"relativePath":"client/browser/arch.md","filePath":"client/browser/arch.md"}'),t={name:"client/browser/arch.md"};function o(s,l,n,p,u,c){return a(),e("div",null,l[0]||(l[0]=[r('<h1 id="架构" tabindex="-1">架构 <a class="header-anchor" href="#架构" aria-label="Permalink to &quot;架构&quot;">​</a></h1><p>现代浏览器是复杂的软件系统，通常由以下几个核心组件构成：排版引擎、JavaScript 引擎、网络模块、存储模块、浏览器主应用等。在运行时，浏览器会启动多个进程，负责运行不同的组件和功能。</p><h2 id="多进程架构" tabindex="-1">多进程架构 <a class="header-anchor" href="#多进程架构" aria-label="Permalink to &quot;多进程架构&quot;">​</a></h2><p>现代浏览器采用多进程架构以提高稳定性、安全性和性能。以 Google Chrome 为例，主要进程包含有：</p><ol><li><p>浏览器主进程 浏览器程序的入口，负责呈现浏览器自身的 UI 界面，</p><ul><li>控制浏览器的主用户界面</li><li>管理标签页和插件</li><li>处理用户权限（如下载请求）</li><li>协调其他进程</li></ul></li><li><p>渲染进程</p><ul><li>每个标签页通常都有自己的渲染进程</li><li>负责标签页内网页的渲染</li><li>运行 JavaScript 和处理 DOM</li><li>在沙箱环境中运行，提高安全性</li></ul></li><li><p>GPU 进程（GPU Process）</p><ul><li>处理 GPU 任务，加速渲染</li><li>跨标签页共享</li></ul></li><li><p>网络进程（Network Process）</p><ul><li>处理网络请求</li><li>实现网络栈</li><li>管理 HTTP 缓存</li></ul></li><li><p>插件进程（Plugin Process）</p><ul><li>运行浏览器插件（如 Flash）</li><li>隔离插件代码，防止影响浏览器稳定性</li></ul></li><li><p>存储进程（Storage Process）（较新版本）</p><ul><li>管理浏览器的数据存储</li><li>处理文件系统访问</li></ul></li></ol><h3 id="多进程架构的优势" tabindex="-1">多进程架构的优势 <a class="header-anchor" href="#多进程架构的优势" aria-label="Permalink to &quot;多进程架构的优势&quot;">​</a></h3><ol><li><p><strong>稳定性提升</strong></p><ul><li>一个标签页崩溃不会影响整个浏览器</li><li>进程隔离避免资源冲突</li></ul></li><li><p><strong>安全性增强</strong></p><ul><li>沙箱限制渲染进程的系统访问权限</li><li>进程间通信受到控制</li></ul></li><li><p><strong>性能优化</strong></p><ul><li>多核 CPU 上可并行处理</li><li>内存占用虽然增加，但可实现更精细的资源管理</li></ul></li></ol><h3 id="进程间通信-ipc" tabindex="-1">进程间通信（IPC） <a class="header-anchor" href="#进程间通信-ipc" aria-label="Permalink to &quot;进程间通信（IPC）&quot;">​</a></h3><p>浏览器进程之间通过 IPC（进程间通信）机制进行交互：</p><ul><li>使用消息传递模式</li><li>通过共享内存传输大块数据</li><li>实现通信频道进行请求/响应模式</li></ul><h2 id="现代浏览器架构发展趋势" tabindex="-1">现代浏览器架构发展趋势 <a class="header-anchor" href="#现代浏览器架构发展趋势" aria-label="Permalink to &quot;现代浏览器架构发展趋势&quot;">​</a></h2><ol><li><p><strong>服务化（Service-oriented Architecture）</strong></p><ul><li>Chrome 正在将浏览器功能拆分为独立服务</li><li>每个服务可以在不同进程中运行</li><li>允许更灵活的资源分配</li></ul></li><li><p><strong>站点隔离（Site Isolation）</strong></p><ul><li>不同站点在不同渲染进程中运行</li><li>更严格的跨源边界</li><li>缓解类似 Spectre 的侧信道攻击</li></ul></li><li><p><strong>进程模型优化</strong></p><ul><li>在低内存设备上合并进程</li><li>在高性能设备上使用更多进程</li><li>动态调整进程分配</li></ul></li><li><p><strong>WebAssembly 沙箱</strong></p><ul><li>更细粒度的代码隔离</li><li>提高性能的同时保持安全性</li></ul></li></ol>',12)]))}const P=i(t,[["render",o]]);export{d as __pageData,P as default};
