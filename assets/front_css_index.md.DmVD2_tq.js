import{_ as e,c,o as l,ae as o}from"./chunks/framework.Dh1jimFm.js";const f=JSON.parse('{"title":"CSS","description":"","frontmatter":{"title":"CSS","order":10},"headers":[],"relativePath":"front/css/index.md","filePath":"front/css/index.md"}'),i={name:"front/css/index.md"};function t(d,s,n,a,r,u){return l(),c("div",null,s[0]||(s[0]=[o('<h1 id="css" tabindex="-1">CSS <a class="header-anchor" href="#css" aria-label="Permalink to &quot;CSS&quot;">​</a></h1><p>在工程化项目中，css的规模非常大，并且css本身具有混乱debuff，管理起来非常痛苦。css的解决方案有很多，但是多也造成了技术选型的困难。</p><h2 id="常见的技术" tabindex="-1">常见的技术 <a class="header-anchor" href="#常见的技术" aria-label="Permalink to &quot;常见的技术&quot;">​</a></h2><ol><li>css预处理器。代表技术<strong>Sass</strong>。Sass赋予了css一定的高级语言特性，增强了css简陋的语言能力，其中包括： <ul><li>css模块化。通过<code>@use</code>和<code>@forward</code>指令实现，在一定程度上解决了，css的样式模块管理和样式隔离；</li><li>变量、数据容器。分别通过<code>$</code>符号和<code>#{}</code>插值语法，<code>list</code>和<code>map</code>等进行使用，增加了css语言的动态性和灵活性，减少了代码冗余；</li><li>流程控制和函数。分别通过<code>@for</code>、<code>@while</code>、<code>@if</code>等流程控制语句进行使用，<code>@function</code>、<code>@return</code>和css函数调用，增加了代码逻辑的复用能力；</li><li>继承和混入。通过<code>%</code>选择器和<code>@extend</code>，<code>@mixin</code>和<code>@include</code>进行使用，提高了css样式复用能力；</li></ul></li><li>css后处理器，<strong>PostCSS</strong>技术。被广泛集成在打包工具中的技术，统一对css源代码进行额外的加工处理。PostCSS是一套css的处理流水线，上面的每一道工序都作为一个插件进行添加，开发者可以选择自己想要的插件进行灵活添加。常见的PostCSS插件有： <ul><li>css module。在js中以JSON的形式导入css文件，返回开发时类名到混淆后的类名的映射，解决css命名冲突的问题。</li><li>autoprefixer。自动对css规则进行浏览器前缀添加。</li><li>nanocss。将css文件进行压缩和分包。</li><li>stylelint。对css文件进行lint检查。</li><li>preset env。对css较新的特性和语法进行polyfill和降级处理。</li><li>tailwindcss。css框架。预设类名工具集、预设主题设计系统。</li><li>……</li></ul></li><li>cij。css in js。在React框架的生态中广泛使用。主要的形式包括： <ul><li>inline style，直接使用js object绑定到行内样式属性和行内css变量，js 联动 css首选方案。</li><li>style runtime，直接在js中写css文本、js object，返回混淆过的类名或者组件，通过style runtime自动在head里添加style标签或者link标签，如emotion、styled-component，基本满足需要普通开发需求，不能使用scss语法，不享受post css，不要进行响应式绑定(因为性能)。</li><li>styled-jsx，直接在jsx中写style元素，通过编译将style元素进行移除，从而生成style标签。</li></ul></li><li>vue scoped。这是vue单文件编译能力的附加品，可以说是业界中非常全能的方案了，不过，在进行SSR渲染的时候，会导致html文件膨胀。</li></ol>',4)]))}const _=e(i,[["render",t]]);export{f as __pageData,_ as default};
