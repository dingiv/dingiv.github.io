import{_ as a,c as r,o as t,ae as o}from"./chunks/framework.Dgg8-8ov.js";const h=JSON.parse('{"title":"驱动接口","description":"","frontmatter":{},"headers":[],"relativePath":"kernel/linux/device/driver.md","filePath":"kernel/linux/device/driver.md"}'),i={name:"kernel/linux/device/driver.md"};function l(n,e,p,d,c,s){return t(),r("div",null,e[0]||(e[0]=[o('<h1 id="驱动接口" tabindex="-1">驱动接口 <a class="header-anchor" href="#驱动接口" aria-label="Permalink to &quot;驱动接口&quot;">​</a></h1><p>linux 驱动程序的 SPI 接口由各个硬件厂商实现。</p><blockquote><p>SPI 和 API。在第三方库的调用场景中，一个第三方库往往涉及两个角色，一个是库的使用者/调用者，一个是库的实现者/编写者，而二者之间的交互通过一个双方约定的接口来进行。在这个过程中，如果是由库的实现者来定义接口，那么这个接口就叫 API，如果是由库的使用者来定义，那么这个接口就叫做 SPI。</p></blockquote><h2 id="注册" tabindex="-1">注册 <a class="header-anchor" href="#注册" aria-label="Permalink to &quot;注册&quot;">​</a></h2><h2 id="文件操作" tabindex="-1">文件操作 <a class="header-anchor" href="#文件操作" aria-label="Permalink to &quot;文件操作&quot;">​</a></h2><h2 id="中断处理" tabindex="-1">中断处理 <a class="header-anchor" href="#中断处理" aria-label="Permalink to &quot;中断处理&quot;">​</a></h2><p>驱动框架： 注册设备和驱动： c</p><p>Collapse</p><p>Unwrap</p><p>Copy register_chrdev(major, &quot;my_device&quot;, &amp;fops); 文件操作：实现 open、read、write、ioctl 等。 中断处理：注册 IRQ 处理程序： c</p><p>Collapse</p><p>Unwrap</p><p>Copy request_irq(irq, handler, IRQF_SHARED, &quot;my_device&quot;, NULL);</p>',13)]))}const u=a(i,[["render",l]]);export{h as __pageData,u as default};
