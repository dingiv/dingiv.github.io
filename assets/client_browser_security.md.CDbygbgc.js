import{_ as i,c as a,o as n,ae as t}from"./chunks/framework.BtEkjhVd.js";const g=JSON.parse('{"title":"浏览器安全","description":"","frontmatter":{},"headers":[],"relativePath":"client/browser/security.md","filePath":"client/browser/security.md"}'),l={name:"client/browser/security.md"};function e(p,s,h,r,k,o){return n(),a("div",null,s[0]||(s[0]=[t(`<h1 id="浏览器安全" tabindex="-1">浏览器安全 <a class="header-anchor" href="#浏览器安全" aria-label="Permalink to &quot;浏览器安全&quot;">​</a></h1><p>浏览器安全是Web开发和用户隐私保护的关键领域，涉及多种机制和技术，用于防止恶意代码执行、数据泄露和各类攻击。</p><h2 id="浏览器安全模型" tabindex="-1">浏览器安全模型 <a class="header-anchor" href="#浏览器安全模型" aria-label="Permalink to &quot;浏览器安全模型&quot;">​</a></h2><h3 id="同源策略-same-origin-policy" tabindex="-1">同源策略（Same-Origin Policy） <a class="header-anchor" href="#同源策略-same-origin-policy" aria-label="Permalink to &quot;同源策略（Same-Origin Policy）&quot;">​</a></h3><p>同源策略是浏览器安全的基石，限制一个源（origin）的文档或脚本如何与另一个源的资源进行交互。</p><ul><li><p><strong>同源定义</strong>：协议、域名和端口号都必须相同</p></li><li><p><strong>限制范围</strong>：</p><ul><li>DOM访问受限</li><li>Cookie、LocalStorage和IndexedDB访问受限</li><li>XMLHttpRequest和Fetch API请求受限</li></ul></li><li><p><strong>示例</strong>：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>// 这些URL与 https://example.com/page.html 比较</span></span>
<span class="line"><span>https://example.com/other.html       // 同源 - 只有路径不同</span></span>
<span class="line"><span>https://sub.example.com/page.html    // 不同源 - 子域名不同</span></span>
<span class="line"><span>http://example.com/page.html         // 不同源 - 协议不同</span></span>
<span class="line"><span>https://example.com:8080/page.html   // 不同源 - 端口不同</span></span></code></pre></div></li></ul><h3 id="沙箱隔离-sandboxing" tabindex="-1">沙箱隔离（Sandboxing） <a class="header-anchor" href="#沙箱隔离-sandboxing" aria-label="Permalink to &quot;沙箱隔离（Sandboxing）&quot;">​</a></h3><p>浏览器通过沙箱机制隔离渲染进程，限制其访问系统资源的能力。</p><ul><li><strong>进程级沙箱</strong>：将渲染进程与系统和其他进程隔离</li><li><strong>iframe沙箱</strong>：通过sandbox属性限制iframe内容的权限</li><li><strong>站点隔离</strong>：将不同站点放在不同的渲染进程中</li></ul><h3 id="内容安全策略-content-security-policy-csp" tabindex="-1">内容安全策略（Content Security Policy，CSP） <a class="header-anchor" href="#内容安全策略-content-security-policy-csp" aria-label="Permalink to &quot;内容安全策略（Content Security Policy，CSP）&quot;">​</a></h3><p>CSP是一种额外的安全层，用于防止XSS和数据注入攻击。</p><ul><li><p><strong>实现方式</strong>：通过HTTP头部或meta标签配置</p></li><li><p><strong>策略示例</strong>：</p><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">&lt;!-- 通过meta标签配置CSP --&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">meta</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> http-equiv</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Content-Security-Policy&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> content</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;default-src &#39;self&#39;; script-src &#39;self&#39; https://trusted.cdn.com&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div></li><li><p><strong>常用指令</strong>：</p><ul><li><code>default-src</code>：默认资源加载策略</li><li><code>script-src</code>：JavaScript资源加载策略</li><li><code>style-src</code>：CSS资源加载策略</li><li><code>img-src</code>：图片资源加载策略</li><li><code>connect-src</code>：连接请求策略（如XHR、WebSockets）</li></ul></li></ul><h2 id="常见安全威胁与防护" tabindex="-1">常见安全威胁与防护 <a class="header-anchor" href="#常见安全威胁与防护" aria-label="Permalink to &quot;常见安全威胁与防护&quot;">​</a></h2><h3 id="跨站脚本攻击-cross-site-scripting-xss" tabindex="-1">跨站脚本攻击（Cross-Site Scripting，XSS） <a class="header-anchor" href="#跨站脚本攻击-cross-site-scripting-xss" aria-label="Permalink to &quot;跨站脚本攻击（Cross-Site Scripting，XSS）&quot;">​</a></h3><p>攻击者通过在网页中注入恶意脚本，窃取用户数据或执行恶意操作。</p><ul><li><p><strong>类型</strong>：</p><ol><li><strong>存储型XSS</strong>：恶意脚本存储在服务器数据库中</li><li><strong>反射型XSS</strong>：恶意脚本通过URL参数反射到页面</li><li><strong>DOM型XSS</strong>：恶意脚本通过DOM操作插入页面</li></ol></li><li><p><strong>防护措施</strong>：</p><ol><li>输入验证和输出编码</li><li>实施内容安全策略（CSP）</li><li>使用HttpOnly和Secure标志保护Cookie</li><li>使用现代框架的自动转义机制</li></ol></li><li><p><strong>防护代码示例</strong>：</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 不安全的代码</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">element.innerHTML </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> userInput;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 安全的代码</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">element.textContent </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> userInput;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 或使用DOMPurify等库</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">element.innerHTML </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> DOMPurify.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sanitize</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(userInput);</span></span></code></pre></div></li></ul><h3 id="跨站请求伪造-cross-site-request-forgery-csrf" tabindex="-1">跨站请求伪造（Cross-Site Request Forgery，CSRF） <a class="header-anchor" href="#跨站请求伪造-cross-site-request-forgery-csrf" aria-label="Permalink to &quot;跨站请求伪造（Cross-Site Request Forgery，CSRF）&quot;">​</a></h3><p>攻击者诱导用户在已认证的网站上执行非预期操作。</p><ul><li><p><strong>攻击原理</strong>：利用浏览器会自动发送目标站点Cookie的特性</p></li><li><p><strong>防护措施</strong>：</p><ol><li>使用CSRF令牌</li><li>验证Referer/Origin头</li><li>使用SameSite Cookie属性</li><li>实施双重认证</li></ol></li><li><p><strong>防护代码示例</strong>：</p><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">&lt;!-- 表单中添加CSRF令牌 --&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">form</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> action</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;/transfer&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> method</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;post&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">input</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;hidden&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;csrf_token&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> value</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;random_token_value&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  &lt;!-- 其他表单字段 --&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">form</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div></li></ul><h3 id="点击劫持-clickjacking" tabindex="-1">点击劫持（Clickjacking） <a class="header-anchor" href="#点击劫持-clickjacking" aria-label="Permalink to &quot;点击劫持（Clickjacking）&quot;">​</a></h3><p>攻击者通过透明iframe覆盖在目标网站上，诱导用户点击看不见的元素。</p><ul><li><p><strong>防护措施</strong>：</p><ol><li>设置X-Frame-Options头</li><li>使用CSP的frame-ancestors指令</li><li>使用JavaScript帧破解防护</li></ol></li><li><p><strong>防护代码示例</strong>：</p><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">&lt;!-- 使用JavaScript防护 --&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">style</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">body</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">display</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">none</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; }&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">style</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">script</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (self </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">===</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> top) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    document.body.style.display </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;block&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">else</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    top.location </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> self.location;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">script</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div></li></ul><h3 id="中间人攻击-man-in-the-middle-mitm" tabindex="-1">中间人攻击（Man-in-the-Middle，MITM） <a class="header-anchor" href="#中间人攻击-man-in-the-middle-mitm" aria-label="Permalink to &quot;中间人攻击（Man-in-the-Middle，MITM）&quot;">​</a></h3><p>攻击者拦截并可能修改浏览器与服务器之间的通信。</p><ul><li><strong>防护措施</strong>： <ol><li>使用HTTPS协议</li><li>实施HTTP严格传输安全（HSTS）</li><li>使用公钥固定（Public Key Pinning）</li><li>检查证书有效性</li></ol></li></ul><h3 id="浏览器扩展安全" tabindex="-1">浏览器扩展安全 <a class="header-anchor" href="#浏览器扩展安全" aria-label="Permalink to &quot;浏览器扩展安全&quot;">​</a></h3><p>浏览器扩展可能访问敏感API和数据，需要特别关注其安全性。</p><ul><li><strong>安全注意事项</strong>： <ol><li>最小权限原则</li><li>内容安全策略</li><li>安全的消息传递</li><li>定期审核扩展更新</li></ol></li></ul><h2 id="跨域解决方案" tabindex="-1">跨域解决方案 <a class="header-anchor" href="#跨域解决方案" aria-label="Permalink to &quot;跨域解决方案&quot;">​</a></h2><h3 id="跨域资源共享-cross-origin-resource-sharing-cors" tabindex="-1">跨域资源共享（Cross-Origin Resource Sharing，CORS） <a class="header-anchor" href="#跨域资源共享-cross-origin-resource-sharing-cors" aria-label="Permalink to &quot;跨域资源共享（Cross-Origin Resource Sharing，CORS）&quot;">​</a></h3><p>CORS是一种标准机制，允许服务器声明哪些源可以访问其资源。</p><ul><li><p><strong>简单请求和预检请求</strong>：</p><ol><li>简单请求：直接发送，带Origin头</li><li>预检请求：先发送OPTIONS请求，获取权限</li></ol></li><li><p><strong>服务器配置示例</strong>：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>Access-Control-Allow-Origin: https://example.com</span></span>
<span class="line"><span>Access-Control-Allow-Methods: GET, POST, PUT</span></span>
<span class="line"><span>Access-Control-Allow-Headers: Content-Type, Authorization</span></span>
<span class="line"><span>Access-Control-Allow-Credentials: true</span></span></code></pre></div></li></ul><h3 id="jsonp-json-with-padding" tabindex="-1">JSONP（JSON with Padding） <a class="header-anchor" href="#jsonp-json-with-padding" aria-label="Permalink to &quot;JSONP（JSON with Padding）&quot;">​</a></h3><p>利用script标签不受同源策略限制的特性实现跨域。</p><ul><li><p><strong>实现示例</strong>：</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> handleResponse</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">data</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(data);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 创建script标签加载跨域数据</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> script</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> document.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">createElement</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;script&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">script.src </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;https://api.example.com/data?callback=handleResponse&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">document.body.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">appendChild</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(script);</span></span></code></pre></div></li><li><p><strong>安全风险</strong>：可能导致XSS攻击，只应与可信来源使用</p></li></ul><h3 id="代理服务器" tabindex="-1">代理服务器 <a class="header-anchor" href="#代理服务器" aria-label="Permalink to &quot;代理服务器&quot;">​</a></h3><p>通过同源的服务器中转请求，规避同源策略限制。</p><ul><li><strong>实现方式</strong>： <ol><li>服务端代理</li><li>开发环境代理（如webpack-dev-server）</li></ol></li></ul><h3 id="postmessage-api" tabindex="-1">PostMessage API <a class="header-anchor" href="#postmessage-api" aria-label="Permalink to &quot;PostMessage API&quot;">​</a></h3><p>允许不同源的窗口之间安全通信。</p><ul><li><strong>安全使用示例</strong>：<div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 发送消息</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">targetWindow.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">postMessage</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(message, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;https://trusted-receiver.com&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 接收消息</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">window.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">addEventListener</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;message&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">event</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // 验证消息源</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (event.origin </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!==</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;https://trusted-sender.com&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // 处理消息</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(event.data);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span></code></pre></div></li></ul><h2 id="现代浏览器安全特性" tabindex="-1">现代浏览器安全特性 <a class="header-anchor" href="#现代浏览器安全特性" aria-label="Permalink to &quot;现代浏览器安全特性&quot;">​</a></h2><h3 id="子资源完整性-subresource-integrity-sri" tabindex="-1">子资源完整性（Subresource Integrity，SRI） <a class="header-anchor" href="#子资源完整性-subresource-integrity-sri" aria-label="Permalink to &quot;子资源完整性（Subresource Integrity，SRI）&quot;">​</a></h3><p>通过加密哈希验证加载的资源是否被篡改。</p><ul><li><strong>实现示例</strong>：<div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">script</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> src</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;https://cdn.example.com/library.js&quot;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        integrity</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;sha384-oqVuAfXRKap7fdgcCY5uykM6+R9GqQ8K/uxy9rx7HNQlGYl1kPzQho1wx4JwY8wC&quot;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        crossorigin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;anonymous&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">script</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div></li></ul><h3 id="https升级" tabindex="-1">HTTPS升级 <a class="header-anchor" href="#https升级" aria-label="Permalink to &quot;HTTPS升级&quot;">​</a></h3><ul><li><p><strong>HTTP严格传输安全（HSTS）</strong>：强制使用HTTPS连接</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>Strict-Transport-Security: max-age=31536000; includeSubDomains; preload</span></span></code></pre></div></li><li><p><strong>升级不安全请求</strong>：通过CSP自动升级HTTP请求到HTTPS</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>Content-Security-Policy: upgrade-insecure-requests</span></span></code></pre></div></li></ul><h3 id="特性策略-feature-policy-权限策略-permissions-policy" tabindex="-1">特性策略（Feature Policy）/ 权限策略（Permissions Policy） <a class="header-anchor" href="#特性策略-feature-policy-权限策略-permissions-policy" aria-label="Permalink to &quot;特性策略（Feature Policy）/ 权限策略（Permissions Policy）&quot;">​</a></h3><p>限制网站可以使用的浏览器功能和API。</p><ul><li><strong>实现示例</strong>：<div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>Permissions-Policy: camera=(), microphone=(self &quot;https://trusted.com&quot;)</span></span></code></pre></div></li></ul><h3 id="隐私保护功能" tabindex="-1">隐私保护功能 <a class="header-anchor" href="#隐私保护功能" aria-label="Permalink to &quot;隐私保护功能&quot;">​</a></h3><ul><li><strong>第三方Cookie限制</strong></li><li><strong>指纹识别防护</strong></li><li><strong>加密SNI</strong></li><li><strong>COOP/COEP/CORP跨源隔离策略</strong></li></ul><h2 id="浏览器安全开发最佳实践" tabindex="-1">浏览器安全开发最佳实践 <a class="header-anchor" href="#浏览器安全开发最佳实践" aria-label="Permalink to &quot;浏览器安全开发最佳实践&quot;">​</a></h2><ol><li><strong>始终使用HTTPS</strong>：保护数据传输安全</li><li><strong>实施内容安全策略</strong>：防止XSS攻击</li><li><strong>使用现代安全HTTP头</strong>：HSTS, X-Content-Type-Options等</li><li><strong>安全管理Cookie</strong>：使用HttpOnly, Secure和SameSite属性</li><li><strong>输入验证与输出编码</strong>：防止注入攻击</li><li><strong>实施CSRF保护</strong>：防止跨站请求伪造</li><li><strong>定期更新依赖项</strong>：修复已知安全漏洞</li><li><strong>使用安全的会话管理</strong>：防止会话劫持</li><li><strong>实施安全的跨域通信</strong>：正确配置CORS</li><li><strong>进行安全测试和审计</strong>：发现和修复安全漏洞</li></ol>`,54)]))}const c=i(l,[["render",e]]);export{g as __pageData,c as default};
