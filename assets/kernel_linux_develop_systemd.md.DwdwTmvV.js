import{_ as i,c as e,o as a,ae as t}from"./chunks/framework.Cd-3tpCq.js";const k=JSON.parse('{"title":"systemd","description":"","frontmatter":{},"headers":[],"relativePath":"kernel/linux/develop/systemd.md","filePath":"kernel/linux/develop/systemd.md"}'),l={name:"kernel/linux/develop/systemd.md"};function n(d,s,p,h,r,o){return a(),e("div",null,s[0]||(s[0]=[t(`<h1 id="systemd" tabindex="-1">systemd <a class="header-anchor" href="#systemd" aria-label="Permalink to &quot;systemd&quot;">​</a></h1><p>systemd 是 Linux 系统中现代化的初始化系统和服务管理器，作为一号进程（PID 1）运行，负责在系统启动时初始化用户空间，并管理系统的各类服务、进程、挂载点、设备等。systemd 的设计目标是提升系统启动速度、统一服务管理接口、增强系统的可维护性和可扩展性。</p><h2 id="服务" tabindex="-1">服务 <a class="header-anchor" href="#服务" aria-label="Permalink to &quot;服务&quot;">​</a></h2><p>服务是后台运行或定时运行的任务，帮助系统或其他进程更好地完成任务。</p><p>系统服务软件：</p><ul><li>不属于内核层代码</li><li>运行在用户空间中</li><li>协助用户与系统内核交互</li><li>为用户态程序提供基础设施服务</li></ul><p>典型软件包括：</p><ul><li>systemd（服务管理、journald 日志服务、udev 设备管理）</li><li>bash</li><li>iproute</li><li>grub</li></ul><p>多数 Linux 发行版自带 systemd：</p><ul><li>配置文件位于<code>/etc/systemd</code>、<code>/usr/lib/systemd</code>、<code>~/.config/systemd</code>等文件夹</li><li>使用 systemctl 命令操作</li><li>使用 journalctl 命令管理日志内容</li></ul><h2 id="服务单元" tabindex="-1">服务单元 <a class="header-anchor" href="#服务单元" aria-label="Permalink to &quot;服务单元&quot;">​</a></h2><p>systemd 采用并行化的服务启动方式，利用服务之间的依赖关系图，最大化地并发启动各项服务，从而显著缩短系统启动时间。它以“单元（Unit）”为核心抽象，将服务、挂载点、设备、套接字、计时器等都统一为不同类型的单元进行管理。systemd 还集成了日志管理（journald）、设备管理（udev）、网络管理（networkd）等多种功能，极大地简化了系统管理流程。</p><p>与传统的 SysV init 相比，systemd 提供了更强的依赖管理能力、更细粒度的控制接口、更丰富的状态监控和日志功能。它支持按需启动（socket/DBus 激活）、服务自动重启、资源限制（cgroups）、快照与恢复等高级特性。</p><p>在 systemd 抽象中，独立运行的进程服务使用 service 文件描述，称为服务单元。单元配置规定服务进程的启动配置，systemd 根据配置文件管理和启动服务。然后，用户态程序通过 systemctl 和 journalctl 接口管理和控制系统上注册的服务程序。</p><p>systemd 支持多种单元类型（Unit Type），包括：</p><ul><li>service：后台服务进程（如 sshd、nginx）</li><li>socket：套接字激活单元，实现按需启动服务</li><li>target：运行级别分组，类似于 SysV 的 runlevel</li><li>mount：文件系统挂载点</li><li>automount：自动挂载点</li><li>timer：定时任务单元，替代 cron</li><li>device：内核设备单元</li><li>path：文件或目录监控单元</li><li>swap：交换分区/文件单元</li></ul><h2 id="启动流程" tabindex="-1">启动流程 <a class="header-anchor" href="#启动流程" aria-label="Permalink to &quot;启动流程&quot;">​</a></h2><ol><li>内核启动后，执行 systemd：内核完成初始化后，将控制权交给 <code>/sbin/init</code>，大多数现代发行版的 <code>/sbin/init</code> 实际上是 systemd。</li><li>systemd 解析配置文件：systemd 读取 <code>/etc/systemd/system/</code>、<code>/usr/lib/systemd/system/</code> 等目录下的单元配置文件，构建服务依赖关系图。</li><li>并发启动单元：根据依赖关系，systemd 并发启动各类服务单元（如网络、挂载点、日志、用户会话等）。</li><li>进入多用户/图形界面目标：systemd 启动所有必要服务后，系统进入多用户（multi-user.target）或图形界面（graphical.target）运行级别。</li><li>持续管理与监控：systemd 持续监控服务状态，处理服务崩溃、自动重启、日志收集等任务。</li></ol><p>每个单元通过配置文件（如 <code>*.service</code>、<code>*.socket</code>）描述启动命令、依赖关系、环境变量、资源限制等。systemd 通过 <code>Requires</code>、<code>Wants</code>、<code>Before</code>、<code>After</code> 等指令精确控制单元的启动顺序和依赖关系。</p><h2 id="服务管理" tabindex="-1">服务管理 <a class="header-anchor" href="#服务管理" aria-label="Permalink to &quot;服务管理&quot;">​</a></h2><p>systemd 向用户态提供了统一的服务管理命令 <code>systemctl</code>，用于启动、停止、重载、查看状态、设置开机自启等操作。例如：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">systemctl</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> start</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> nginx.service</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">      # 启动服务</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">systemctl</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> stop</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> nginx.service</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">       # 停止服务</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">systemctl</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> restart</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> nginx.service</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    # 重启服务</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">systemctl</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> status</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> nginx.service</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">     # 查看服务状态</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">systemctl</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> enable</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> nginx.service</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">     # 设置开机自启</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">systemctl</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> disable</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> nginx.service</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    # 取消开机自启</span></span></code></pre></div><p>systemd 支持服务的自动重启、资源限制（如内存、CPU 限额）、日志集成、依赖管理等高级功能。管理员可以通过 <code>systemctl</code> 轻松管理系统和用户服务。</p><h2 id="日志管理" tabindex="-1">日志管理 <a class="header-anchor" href="#日志管理" aria-label="Permalink to &quot;日志管理&quot;">​</a></h2><p>systemd 集成了 journald 日志服务，统一收集内核日志、服务日志和用户日志。日志以二进制格式存储，支持高效检索和过滤。通过 <code>journalctl</code> 命令可以方便地查看、筛选和分析日志。例如：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">journalctl</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -u</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> nginx.service</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    # 查看 nginx 服务日志</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">journalctl</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -b</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">                 # 查看本次启动以来的所有日志</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">journalctl</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --since</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;1 hour ago&quot;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  # 查看最近一小时日志</span></span></code></pre></div><p>journald 还支持日志持久化、日志轮转、远程日志收集等功能，极大提升了系统运维的可观测性。它会定期读取内核日志，并将内核日志输出到位置 <code>/var/log/syslog</code> 文件中；同时它也向用户态的程序提供了一个 <code>syslog</code> 函数接口，用户态程序可以选择使用这个函数来使用提供的日志打印系统和服务。syslog 函数会将日志消息发送给 systemd-journald 守护进程，具体的日志管理由它完成。</p><p>一般的内核日志，使用 <code>printk</code> 函数打印日志或者驱动可使用 <code>dev_printk</code>（自动携带设备信息）；而用户态日志需要自行实现日志系统或者可使用 systemd-journald 服务提供的接口。</p><h2 id="特殊性" tabindex="-1">特殊性 <a class="header-anchor" href="#特殊性" aria-label="Permalink to &quot;特殊性&quot;">​</a></h2><p>在 Linux 系统中，一号进程（PID 1）具有极其特殊和重要的地位。它是内核启动后创建的第一个用户空间进程，通常由 systemd 担任。作为系统的根进程，一号进程承担着初始化用户空间环境、启动和管理所有系统服务、维护系统运行级别等核心职责。</p><p>一号进程还有一个关键作用：它是所有孤儿进程的“收养者”。当系统中其他进程的父进程意外终止时，这些进程会被内核自动转交给一号进程，由其负责资源回收和善后处理。这一机制保证了系统中不会出现无人管理的僵尸进程，维护了进程表的整洁和系统的稳定性。</p><p>此外，一号进程的健壮性直接关系到系统的稳定运行。如果一号进程崩溃或退出，内核会认为系统处于不可恢复的状态，通常会触发内核 panic 或自动重启。因此，systemd 作为一号进程，其健壮性和可靠性对整个 Linux 系统的持续运行至关重要。</p>`,32)]))}const y=i(l,[["render",n]]);export{k as __pageData,y as default};
