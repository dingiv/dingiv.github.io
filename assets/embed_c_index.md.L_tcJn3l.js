import{_ as a,c as s,o as l,ae as n}from"./chunks/framework.BHrE6nLq.js";const c=JSON.parse('{"title":"C","description":"","frontmatter":{},"headers":[],"relativePath":"embed/c/index.md","filePath":"embed/c/index.md"}'),t={name:"embed/c/index.md"};function e(h,i,p,k,r,d){return l(),s("div",null,i[0]||(i[0]=[n(`<h1 id="c" tabindex="-1">C <a class="header-anchor" href="#c" aria-label="Permalink to &quot;C&quot;">​</a></h1><p>C 语言是对汇编语言的一层简单抽象，它将汇编语言中的一些对人类不友好的部分抽象成变量、函数、控制结构（如循环和条件语句）等概念，允许程序员使用一种过程式的代码和语法，并编译成多种汇编代码，屏蔽了大量的硬件平台差异。</p><p>以下是 C 语言的一些基本概念：</p><h2 id="变量和数据类型" tabindex="-1">变量和数据类型 <a class="header-anchor" href="#变量和数据类型" aria-label="Permalink to &quot;变量和数据类型&quot;">​</a></h2><p>C 语言中，变量是用于存储数据的内存位置的名称。每个变量都有一个数据类型，用于指定它可以存储的数据类型和大小。C 语言中的基本数据类型包括：</p><ul><li><p>char 代表一个字符，通常占用 1 个字节，8个 bit 位，其取值范围是 -128 到 127 或 0 到 255。一般地，字节操作符使用 unsigned char 类型。</p></li><li><p>int 代表一个整数，通常占用 4 个字节，32个 bit 位，其取值范围是 -2147483648 到 2147483647，即 -2^31 到 2^31 - 1，unsigned int 的取值范围是 0 到 4294967295，即 0 到 2^32 - 1。</p></li><li><p>long long 代表一个长整数，</p></li><li><p>float 单精度浮点数，通常占用 4 个字节，32个 bit 位，其取值范围是 1.2E-38 到 3.4E+38，精度是 6 位有效数字。</p></li><li><p>double 双精度浮点数，通常占用 8 个字节，64个 bit 位，其取值范围是 2.3E-308 到 1.7E+308，精度是 15 位有效数字。</p></li><li><p>enum 枚举是一种用户定义的数据类型，它允许程序员为整数常量定义符号名称。与其他高级语言不同，C 语言中的枚举类型是整数类型，其取值范围是 -128 到 127 或 0 到 255，同时，枚举的名字会污染全局命名空间。</p></li><li><p>struct struct 是一种用户定义的数据类型，它允许程序员将不同类型的数据组合成一个单一的实体，并存储在一块较大的连续的内存中。struct 中的每个成员可以是不同的数据类型，成员的类型指定了成员在一块内存中的偏移量。</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">struct</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Person {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  char</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">20</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">];</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> age;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  float</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> height;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span></code></pre></div></li><li><p>union union 是一种用户定义的数据类型，它允许程序员将不同类型的数据组合成一个单一的实体，并存储在一块较小的连续的内存中。union 中的每个成员可以是不同的数据类型，但是它们共享同一块内存，因此，union 的大小是它最大的成员的大小。</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">union</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Data {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> i;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  float</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> f;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  char</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> str</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">20</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">];</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span></code></pre></div></li><li><p>void void 是一种特殊的类型，它表示没有值或没有类型。void 通常用于函数的返回类型，表示函数不返回任何值，或者用于函数的参数列表，表示函数不接受任何参数。</p></li></ul><p>typedef 关键字用于为现有的数据类型创建新的名称，以便在代码中更方便地使用。例如，typedef int INT，这样就可以在代码中使用 INT 来代替 int。</p><h3 id="字面量" tabindex="-1">字面量 <a class="header-anchor" href="#字面量" aria-label="Permalink to &quot;字面量&quot;">​</a></h3><ul><li><p>整数字面量</p><ul><li>十进制数字面量：10、-20</li><li>八进制数字面量：012、-017</li><li>十六进制数字面量：0x1A、-0xFF</li><li>无符号数字面量：10u、20U</li><li>长整型数字面量：10L、20l</li><li>无符号长整型数字面量：10UL、20ul</li></ul></li><li><p>浮点数字面量：</p><ul><li>单精度浮点数字面量：3.14f、-2.718f</li><li>双精度浮点数字面量：3.14、-2.718</li><li>无符号浮点数字面量：3.14u、-2.718u</li><li>长双精度浮点数字面量：3.14l、-2.718l</li><li>无符号长双精度浮点数字面量：3.14ul、-2.718ul</li><li>指数浮点数字面量：3.14e2、-2.718e-3</li><li>无符号指数浮点数字面量：3.14ue2、-2.718ue-3</li></ul></li><li><p>字符字面量：</p><ul><li>单字节字符：&#39;a&#39;、&#39;b&#39;、&#39;\\n&#39;</li><li>转义字符：&#39;\\n&#39;、&#39;\\t&#39;、&#39;\\0&#39;、&#39;&#39;&#39;、&#39;&quot;&#39;、&#39;\\&#39;</li></ul><p>由于 char 类型是 1 个字节，所以它只能表示 256 个字符，一个 char 字面量等价于一个 0-255 的整数，也就是其 ASCII 码值，常见字符的对应 ASCII 码值如下：</p><ul><li>&#39;a&#39;：97</li><li>&#39;A&#39;：65</li><li>&#39;0&#39;：48</li><li>&#39; &#39;：32</li><li>&#39;\\n&#39;：10</li><li>&#39;\\t&#39;：9</li><li>&#39;\\0&#39;：0</li></ul></li><li><p>字符串字面量：</p><ul><li>字符串字面量：&quot;hello&quot;、&quot;world&quot;</li></ul></li><li><p>指针字面量：NULL</p></li><li><p>布尔字面量：true、false</p></li></ul><h2 id="运算符" tabindex="-1">运算符 <a class="header-anchor" href="#运算符" aria-label="Permalink to &quot;运算符&quot;">​</a></h2><ul><li>算术运算符：+、-、*、/、%</li><li>关系运算符：==、!=、&lt;、&gt;、&lt;=、&gt;=</li><li>逻辑运算符：&amp;&amp;、||、!</li><li>位运算符：&amp;、|、^、~、&lt;&lt;、&gt;&gt;</li><li>赋值运算符：=、+=、-=、*=、/=、%=、&lt;&lt;=、&gt;&gt;=、&amp;=、|=、^=</li></ul><h2 id="控制结构" tabindex="-1">控制结构 <a class="header-anchor" href="#控制结构" aria-label="Permalink to &quot;控制结构&quot;">​</a></h2><ul><li>if-else 分支</li><li>switch-case 分支</li><li>while 循环</li><li>for 循环</li><li>goto 跳转</li></ul><h2 id="函数" tabindex="-1">函数 <a class="header-anchor" href="#函数" aria-label="Permalink to &quot;函数&quot;">​</a></h2><p>函数是一段可重复使用的代码块，它接受输入参数，执行一些操作，并返回一个结果。函数可以接受多个参数，也可以不返回任何结果。函数需要定义在一个文件中，并在其他文件中调用。</p><h2 id="指针" tabindex="-1">指针 <a class="header-anchor" href="#指针" aria-label="Permalink to &quot;指针&quot;">​</a></h2><h2 id="内存管理" tabindex="-1">内存管理 <a class="header-anchor" href="#内存管理" aria-label="Permalink to &quot;内存管理&quot;">​</a></h2><h3 id="结构体内存对齐" tabindex="-1">结构体内存对齐 <a class="header-anchor" href="#结构体内存对齐" aria-label="Permalink to &quot;结构体内存对齐&quot;">​</a></h3><p>为什么需要内存对齐？</p><p>从时间的角度讲：现代 CPU 访问内存时，通常按照 字节对齐（byte alignment） 的方式进行：32 位系统：CPU 一次读取 4 字节，所以变量最好对齐到 4 字节。64 位系统：CPU 一次读取 8 字节，所以变量最好对齐到 8 字节。如果变量没有对齐，CPU 可能需要多次访问内存，导致性能下降，甚至某些 CPU 可能会报错（如某些 RISC 体系结构）。</p><p>从空间的角度讲：C 可以强制要求结构体的对齐方式，使得结构体的成员紧凑，从而达到节省内存的目的，但是，如果访问内存的时候跨越了 4 字节或者 8 字节，那么就会造成速度下降，这是一个 tradeoff。</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">struct</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Demo {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  char</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> a;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">   //  1</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  short</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> b;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  //  2</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> c;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    //  3</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  char</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">d;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  //  8</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h2 id="作用域和链接" tabindex="-1">作用域和链接 <a class="header-anchor" href="#作用域和链接" aria-label="Permalink to &quot;作用域和链接&quot;">​</a></h2>`,23)]))}const u=a(t,[["render",e]]);export{c as __pageData,u as default};
