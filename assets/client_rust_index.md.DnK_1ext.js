import{_ as s,c as i,o as t,ae as e}from"./chunks/framework.Dh1jimFm.js";const c=JSON.parse('{"title":"Rust","description":"","frontmatter":{},"headers":[],"relativePath":"client/rust/index.md","filePath":"client/rust/index.md"}'),n={name:"client/rust/index.md"};function l(h,a,r,d,p,o){return t(),i("div",null,a[0]||(a[0]=[e(`<h1 id="rust" tabindex="-1">Rust <a class="header-anchor" href="#rust" aria-label="Permalink to &quot;Rust&quot;">​</a></h1><p>Rust 是一门年轻而现代的系统级编程语言，它的目标是填补 C 语言和高级应用层编程语言之间的空白，类似于 C++，即在需要高性能的同时，也需要高级语言特性支持的领域。为了达成这一目标，Rust 基于前人的经验教训，抛弃了历史的包袱，并提供了一套独特、安全、统一、强大的编程工具。</p><ul><li>内存安全：Rust 关注解决 C 语言和 C++ 的内存安全问题，借鉴了 C++ 的 RAII（资源获取即初始化）特性，并引入了独特的生命周期和所有权机制，采用自动化、非垃圾回收的内存管理方法。在内存安全和内存管理的矛盾之间，Rust 取得了一个卓越的平衡。</li><li>无畏并发：Rust 利用其所有权和借用机制，在很大程度上避免了并发编程中的数据竞争和资源冲突，确保了并发操作的安全性。</li><li>高效 I/O：Rust 支持协程和异步编程，这些特性允许程序在执行时暂停并将控制权交给调用者，从而避免 I/O 操作引起的 CPU 阻塞，提高了 CPU 的利用率和程序的响应性。</li><li>性能卓越：Rust 遵循零成本抽象的理念，即你所不需要的特性无需支付任何性能代价，你所需要的功能，编译器提供的实现往往也难以被超越。</li><li>双重范式：Rust 融合了函数式编程和面向对象编程的核心思想，吸取了二者的优点：例如数据不可变、闭包、函子、组合优于继承、泛型等；并摒弃了那些容易引发问题的特性，如传统的继承、异常处理（如 try-catch）和空指针等。这为开发者提供了优雅且高效的抽象能力，同时避免了开发者误入语言陷阱。</li><li>面向工程：Rust 拥有现代化的包管理系统和构建工具链，使得代码复用和管理变得更加简单。开发者能够专注于业务逻辑的实现，而不必耗费精力在项目配置和环境管理上。</li></ul><h2 id="基本语法" tabindex="-1">基本语法 <a class="header-anchor" href="#基本语法" aria-label="Permalink to &quot;基本语法&quot;">​</a></h2><h3 id="数据类型" tabindex="-1">数据类型 <a class="header-anchor" href="#数据类型" aria-label="Permalink to &quot;数据类型&quot;">​</a></h3><h3 id="操作符" tabindex="-1">操作符 <a class="header-anchor" href="#操作符" aria-label="Permalink to &quot;操作符&quot;">​</a></h3><p>操作符的本质是一些内置函数的语法糖，允许开发者使用简洁的符号调用一个全局可见的、常用的函数。</p><h3 id="流程控制" tabindex="-1">流程控制 <a class="header-anchor" href="#流程控制" aria-label="Permalink to &quot;流程控制&quot;">​</a></h3><h4 id="if-else" tabindex="-1">if-else <a class="header-anchor" href="#if-else" aria-label="Permalink to &quot;if-else&quot;">​</a></h4><h4 id="while-for-loop" tabindex="-1">while/for/loop <a class="header-anchor" href="#while-for-loop" aria-label="Permalink to &quot;while/for/loop&quot;">​</a></h4><h4 id="模式匹配-match" tabindex="-1">模式匹配 match <a class="header-anchor" href="#模式匹配-match" aria-label="Permalink to &quot;模式匹配 match&quot;">​</a></h4><p>模式匹配是一种高级的 if-else 语句和 switch 的语法糖，它支持匹配一个变量的类型、结构，并提取和解构一个变量，相较于 if-else 更加方便，同时简化了丑陋的 switch 语句。</p><h3 id="函数" tabindex="-1">函数 <a class="header-anchor" href="#函数" aria-label="Permalink to &quot;函数&quot;">​</a></h3><h3 id="面向数据-方法绑定" tabindex="-1">面向数据 + 方法绑定 <a class="header-anchor" href="#面向数据-方法绑定" aria-label="Permalink to &quot;面向数据 + 方法绑定&quot;">​</a></h3><p>面向对象是一个火爆的特性，常见的语言几乎都或多或少地支持。Rust 中采取的是函数式编程语言中的思路，提供一种使用面向数据和方法绑定的机制来实现面向对象的封装，但是不支持继承。这种将数据和行为分离的书写方式，相较于直接在类里面定义数据和方法的写法，更加强调数据面和管理面的分离，同时也易于扩展某个数据类型的行为，同时默认将面向对象中的<strong>组合</strong>概念进行深刻地贯彻。</p><blockquote><p>C 语言中不支持面向对象的特性，但是提供基础的面向数据和面向过程的能力，在 C 语言中，允许用户定义 struct 结构来封装一个复杂的纯数据，并且 C 的开发这会书写一系列以该结构体为第一个参数的函数，从而来模拟方法绑定的效果。</p><p>Go 语言中，也提供了类似 Rust 的面向数据 + 方法绑定的方式来管理一些复杂的数据类型</p></blockquote><h4 id="结构体" tabindex="-1">结构体 <a class="header-anchor" href="#结构体" aria-label="Permalink to &quot;结构体&quot;">​</a></h4><p>在 rust 中，使用</p><div class="language-rust vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">rust</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"></span></code></pre></div><h4 id="impl-伴生结构体" tabindex="-1">impl 伴生结构体 <a class="header-anchor" href="#impl-伴生结构体" aria-label="Permalink to &quot;impl 伴生结构体&quot;">​</a></h4><h4 id="trait-特性-vs-interface-接口" tabindex="-1">trait（特性）vs interface（接口） <a class="header-anchor" href="#trait-特性-vs-interface-接口" aria-label="Permalink to &quot;trait（特性）vs interface（接口）&quot;">​</a></h4><p>在 Rust 中，提供一种名叫 trait 的机制来实现类似面向对象中的 interface 的功能，</p><h4 id="内置-trait" tabindex="-1"><a href="./trait">内置 trait</a> <a class="header-anchor" href="#内置-trait" aria-label="Permalink to &quot;[内置 trait](./trait.md)&quot;">​</a></h4><p>内置的 trait 作为语言的基础设施，广泛用于实现大家经常遇到的功能和需求，规定语言中的一些标准，甚至能够影响编译器的编译行为。</p><h3 id="泛型" tabindex="-1">泛型 <a class="header-anchor" href="#泛型" aria-label="Permalink to &quot;泛型&quot;">​</a></h3><p>泛型是一个<strong>迫切求值</strong>类型函数，它可以通过泛型函数自动生成多种组合类型，其表现为一个数据类型的参数，通过 <code>Type&lt;T&gt;</code> 中的尖括号进行声明和调用。</p><blockquote><p>数据类型包括简单类型和复杂类型，如 i32、f64，复杂类型使用 struct、enum、union 进行定义；</p></blockquote><p>rust 具有强大的泛型系统，它支持类型修饰、泛型组合、关联类型等强大特性。</p><h4 id="类型修饰" tabindex="-1">类型修饰 <a class="header-anchor" href="#类型修饰" aria-label="Permalink to &quot;类型修饰&quot;">​</a></h4><p>在数据类型的基础上对类型进行额外修饰，这些修饰包括：</p><ul><li>可变引用修饰与不可变引用修饰，&amp;、&amp;mut</li><li>可变裸指针修饰和不可变裸指针修饰，*mut、*const</li><li>生命周期修饰，&#39;a、&#39;static</li><li>动态派发修饰，dyn trait_name</li></ul><h4 id="泛型组合-trait-bound" tabindex="-1">泛型组合 trait bound <a class="header-anchor" href="#泛型组合-trait-bound" aria-label="Permalink to &quot;泛型组合 trait bound&quot;">​</a></h4><h4 id="关联类型" tabindex="-1">关联类型 <a class="header-anchor" href="#关联类型" aria-label="Permalink to &quot;关联类型&quot;">​</a></h4><p>在 Haskell 等函数式的语言中，存在一种名叫<strong>高阶类型</strong>的特性，高阶类型对标的是高阶函数，普通的函数接受值然后输出值，高阶函数接受函数并且可以输出新函数，高阶类型接受高阶类型并可以输出新的高阶类型。</p><table tabindex="0"><thead><tr><th>值空间</th><th>类型空间</th></tr></thead><tbody><tr><td>值</td><td>类型</td></tr><tr><td>二等函数</td><td>泛型</td></tr><tr><td>一等函数+高阶函数</td><td>一等类型+高阶类型</td></tr><tr><td>闭包</td><td>?</td></tr></tbody></table><p>二等函数和一等函数区别在于，一等函数可以被看做数据一样被传递，二等函数不能，因为二等函数是<strong>迫切求值</strong>的，它必须以调用的形式出现，而不能被当作值来使用和传递；闭包意味着能够动态生成一个函数，并且引用局部作用域中的变量。泛型意味着可以使用泛型生成一个新的类型，但是泛型本身不能作为类型来传递，因为泛型是<strong>迫切求值</strong>的。</p><p>在 rust 中，没有选择实现高阶类型，但是选择实现了关联类型，来在一定程度上解决泛型迫切求值的问题。</p><h2 id="属性标记和宏" tabindex="-1">属性标记和宏 <a class="header-anchor" href="#属性标记和宏" aria-label="Permalink to &quot;属性标记和宏&quot;">​</a></h2><p>rust 中使用 <code>#[]</code> 来对一个目标进行编译时的元数据定义，从而影响编译器的行为，它可以被放在结构体、枚举、函数、模块等目标的声明处。它相当于其他语言中的装饰器。</p><h3 id="宏" tabindex="-1">宏 <a class="header-anchor" href="#宏" aria-label="Permalink to &quot;宏&quot;">​</a></h3><p>宏是指生成代码的代码，它们的工作原理是：编译器会将传入宏的代码块作为输入，经过宏处理后生成新的代码。和 C 语言的宏相比较起来，rust 的宏有更多的规则限制，更加现代，不像 C 语言那样纯粹地基于字符串进行替换。</p><blockquote><p>C 语言的宏是一个简陋的系统，基于纯粹的字符串替换，在 C 的预处理器进行预处理的期间被展开。C 宏使用起来可以非常地自由放纵，这将使得宏展开的过程难以控制，给代码带来非常大的不确定性。另外，展开的宏和内联函数等特性，会导致代码调试的时候，调试器无法找到目标函数和代码，导致定位困难。但是，碍于 C 语言的语言特性太弱，宏又是 C 语言项目中不可缺失的一部分，这就要求 C 语言开发者必须明确自己的宏在做什么，保持良好的编码规范，要求项目管理者对项目进行严格管理和明确约束。</p></blockquote><h4 id="声明宏" tabindex="-1">声明宏 <a class="header-anchor" href="#声明宏" aria-label="Permalink to &quot;声明宏&quot;">​</a></h4><p>声明宏通过模式匹配的方式生成代码，它表现得就像一个<strong>函数</strong>一样。通过 <code>macro_rules!</code> 关键字来定义声明宏。</p><div class="language-rust vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">rust</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">macro_rules!</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> say_hello</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        println!</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Hello, world!&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    };</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fn</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    say_hello!</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 输出: Hello, world!</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h4 id="过程宏" tabindex="-1">过程宏 <a class="header-anchor" href="#过程宏" aria-label="Permalink to &quot;过程宏&quot;">​</a></h4><p>过程宏是通过解析 Rust 代码并生成新的代码来工作的，它表现得像一个<strong>装饰器</strong>一样。它通过<strong>元宏</strong> <code>proc_macro_xxx</code> 来定义。</p><ul><li><p>派生宏 一个派生宏是指能够放在 <code>#[derive(MyDeriveMacro)]</code> 这个高阶宏 derive 中的宏，该宏需要以独立 crate 的方式进行定义。</p><p>使用 <code>proc_macro_derive</code> 进行定义。</p><div class="language-rust vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">rust</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">extern</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> crate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> proc_macro;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">use</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> proc_macro</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">TokenStream</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">#[proc_macro_derive(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">MyDebug</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)]</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">pub</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> fn</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> my_debug</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(input</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> TokenStream</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> TokenStream</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> input </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> syn</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">parse_macro_input!</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(input </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">as</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> syn</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">DeriveInput</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 我们为结构体生成一个简单的 Debug 实现</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> name </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">input</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ident;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    let</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> gen</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> quote</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">quote!</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        impl</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> std</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">fmt</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Debug</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> #name {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">            fn</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> fmt</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">self</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, f</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &amp;mut</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> std</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">fmt</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Formatter</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> std</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">fmt</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Result</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">                write!</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(f, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;{} {{}}&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">stringify!</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(#name))</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    };</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    gen.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">into</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></li><li><p>属性宏 属性宏允许我们为各种元素（如结构体、函数等）添加自定义行为。这类宏通常用于注解代码，提供额外的功能。</p></li><li><p>函数宏</p></li></ul><h2 id="所有权和借用机制" tabindex="-1">所有权和借用机制 <a class="header-anchor" href="#所有权和借用机制" aria-label="Permalink to &quot;所有权和借用机制&quot;">​</a></h2><h3 id="所有权" tabindex="-1">所有权 <a class="header-anchor" href="#所有权" aria-label="Permalink to &quot;所有权&quot;">​</a></h3><p>在 rust 中，所有权是指一个保存在内存中的<strong>数据</strong>，需要<em>有且仅有一个</em><strong>所有者</strong>。所谓所有者，本质就是一个<strong>指针</strong>，通常表现为一个<strong>变量名</strong>，或者是一个实例化对象的名字符号；</p><blockquote><ul><li>每个值都有且只有一个所有者，但是一个值的所有者可以改变，也就是移动语义；</li><li>当所有者离开作用域时，其拥有的值会被释放；</li><li>赋值操作具有默认的移动语义，即旧变量赋值给新变量时，旧变量不再拥有该值；</li></ul></blockquote><p>借用机制意味着，一个值可以被指针 A 所有，但却可以被 B 借用，其核心规则是任意时刻，一个值只能有一个可变指针指向该值，或者同时有多个不可变指针指向该值，两种情况选择其一；</p><blockquote><ul><li>一个可变指针</li><li>多个不可变指针</li></ul></blockquote><h3 id="移动和借用" tabindex="-1">移动和借用 <a class="header-anchor" href="#移动和借用" aria-label="Permalink to &quot;移动和借用&quot;">​</a></h3><p>移动，说明一个值的所有权发生了转移，原先的指针失效了，不能再通过原指针访问数据；借用，意味着新建了一个新的指针指向了该值，但是这个指针是一个<strong>引用</strong>，引用类型和原类型相差一个 <strong>&amp;</strong> 符号，他们都属于指针，不带 &amp; 是所有者，带 &amp; 是借用者。</p><h3 id="隐式-所有权-移动" tabindex="-1">隐式(所有权)移动 <a class="header-anchor" href="#隐式-所有权-移动" aria-label="Permalink to &quot;隐式(所有权)移动&quot;">​</a></h3><p>在 rust 中，除了赋值符号 <code>=</code>，当对<strong>函数传入参数</strong>的时候、还有<strong>函数结束并返回值</strong>的时候、还有<strong>声明闭包函数</strong>的时候，同样也会发生所有权的移动，除非将函数的参数或者返回值声明为一个 <code>&amp;</code> 符号的引用，这表明函数只是希望借用，本质上是一个指针。</p><h3 id="智能指针" tabindex="-1">智能指针 <a class="header-anchor" href="#智能指针" aria-label="Permalink to &quot;智能指针&quot;">​</a></h3><p>rust 中的默认指针，即引用，需要受到严格的借用检查的约束限制，在一些需要灵活的场景下无法满足业务需求，因此需要使用一些智能指针来管理内存，从而同时获得<strong>自由和安全</strong>，但是需要一定的<strong>开销</strong>。</p><table tabindex="0"><thead><tr><th>智能指针</th><th>特性</th><th>所有权共享</th><th>线程安全性</th><th>备注</th></tr></thead><tbody><tr><td>Box&lt;T&gt; Deref</td><td>堆分配</td><td>❌</td><td>❌</td><td>递归结构、大对象</td></tr><tr><td>Rc&lt;T&gt; Deref</td><td>共享所有权</td><td>✅</td><td>❌</td><td>单线程共享数据</td></tr><tr><td>Arc&lt;T&gt; Deref</td><td>共享所有权</td><td>✅</td><td>✅</td><td>多线程共享数据</td></tr><tr><td>Weak&lt;T&gt; Deref</td><td>防止循环引用</td><td>✅</td><td>❓</td><td>适用于树结构</td></tr><tr><td>Cell&lt;T&gt; ?Deref</td><td>轻量内部可变</td><td>❌</td><td>❌</td><td>适用于 Copy 类型</td></tr><tr><td>RefCell&lt;T&gt; ?Deref</td><td>内部可变性</td><td>❌</td><td>❌</td><td>运行时可变借用</td></tr><tr><td>Mutex&lt;T&gt;</td><td>内部可变性</td><td>❌</td><td>✅</td><td>运行时可变借用</td></tr><tr><td>RwLock&lt;T&gt;</td><td>内部可变性</td><td>❌</td><td>✅</td><td>运行时可变借用</td></tr><tr><td>Atomic&lt;T&gt;</td><td>原子操作</td><td>❌</td><td>✅</td><td>运行时可变借用</td></tr></tbody></table><h2 id="作用域和生命周期" tabindex="-1">作用域和生命周期 <a class="header-anchor" href="#作用域和生命周期" aria-label="Permalink to &quot;作用域和生命周期&quot;">​</a></h2><p>rust 中有块作用域、函数作用域和全局作用域，作用域会随着程序的执行而展开，同时随着程序的执行结束而关闭。一个变量往往在一个作用域中被声明，此时，我们称这个变量属于这个作用域，当这个作用域被关闭的时候，从属于该作用域的变量将会被清除，rust 将会自动调用这些变量的 drop 方法释放资源。</p><h3 id="生命周期泛型" tabindex="-1">生命周期泛型 <a class="header-anchor" href="#生命周期泛型" aria-label="Permalink to &quot;生命周期泛型&quot;">​</a></h3><p>生命周期是<strong>对一个引用类型的描述</strong>，它表现为一个类型的<strong>泛型</strong>，</p><h2 id="unsafe" tabindex="-1">unsafe <a class="header-anchor" href="#unsafe" aria-label="Permalink to &quot;unsafe&quot;">​</a></h2><p>unsafe 是 rust 特性子集，通过使用 unsafe 关键可以将一个函数或者 trait 中方法的标记为 unsafe，从而开启 unsafe 特性：</p><ul><li>解引用裸指针</li></ul><h2 id="异步编程" tabindex="-1"><a href="/design/async/">异步编程</a> <a class="header-anchor" href="#异步编程" aria-label="Permalink to &quot;[异步编程](/design/async/)&quot;">​</a></h2><p>在 IO 密集型的程序中，程序的瓶颈出现在程序执行无法避免的 IO 等待，这将导致程序因为进行阻塞 IO 而被操作系统挂起，从而使得程序不能充分占用 CPU，出现了资源利用不充分的情况。</p><h2 id="模块系统和包管理" tabindex="-1">模块系统和包管理 <a class="header-anchor" href="#模块系统和包管理" aria-label="Permalink to &quot;模块系统和包管理&quot;">​</a></h2><p>rust 的模块系统有三个主要抽象，package, crate, mod。</p><h3 id="package" tabindex="-1">package <a class="header-anchor" href="#package" aria-label="Permalink to &quot;package&quot;">​</a></h3><p>一个 rust package/project 通常是一个文件夹，内部包含一个 Cargo.toml，它是 Cargo 包管理的基本单位。一个 package 通常至少含有一个 crate。</p><h3 id="crate" tabindex="-1">crate <a class="header-anchor" href="#crate" aria-label="Permalink to &quot;crate&quot;">​</a></h3><p>一个二进制的构建单元，在编译之后，就是一个二进制的可执行文件。crate 有两种，一种是独立执行二进制，其代码入口通常是 <code>&lt;package&gt;/src/main.rs</code> 文件；另一种是链接库二进制文件，其代码入口是 <code>&lt;package&gt;/src/lib.rs</code>。往往，我们的实际工程程序入口就是 main.rs，如果我们要发布链接库，那么入口就是 lib.rs。</p><h3 id="mod" tabindex="-1">mod <a class="header-anchor" href="#mod" aria-label="Permalink to &quot;mod&quot;">​</a></h3><p>一个 mod 模块是 Rust 代码的一个逻辑单元，可以用来组织和封装功能。Rust 模块可以在 crate 内部进行嵌套和组织。</p><p>程序的编译入口是 src/main.rs 文件，这是程序的根模块。你可以在这个文件中使用 <code>mod mod_name {}</code> 关键字进行模块声明，模块定义支持嵌套。</p><h4 id="模块拆分" tabindex="-1">模块拆分 <a class="header-anchor" href="#模块拆分" aria-label="Permalink to &quot;模块拆分&quot;">​</a></h4><p>当代码量变大的时候，我们需要将模块的代码拆分到不同的文件中进行保存。如何拆分？在一个模块文件中，可以将 <code>mod mod_name {}</code> 中的实现部分，拆分到<strong>与该文件同目录</strong>中的 mod_name.rs 文件中，然后留下 <code>mod mod_name;</code>，此语句表示，模块的实现被拆分到了同目录下的 <code>mod_name.rs</code> 文件中了，编译器将自行寻找它。</p><p>嵌套拆分，如果 mod_name.rs 中的代码还是多，那么还可以继续拆分。现在，将该文件变成 <code>mod_name/mod.rs</code> 文件，然后，将 mod.rs 文件中的子模块mod_a, mod_b 使用同样的方式，拆到同目录 mod_name 中的 mod_a.rs 和 mod_b.rs 文件中。</p><blockquote><p>mod_name/mod.rs 文件类似于 JavaScript 当中的 mod_name/index.js 文件，不过，JavaScript 当中的模块不存在和目录结构捆绑的父子关系，而 rust 中，还有其他的语言，如 Java、Python、Golang 等，有这样的关系。而像 JavaScript、C 语言、C++ 就没有模块和目录的捆绑。</p></blockquote><h4 id="访问控制和模块导入" tabindex="-1">访问控制和模块导入 <a class="header-anchor" href="#访问控制和模块导入" aria-label="Permalink to &quot;访问控制和模块导入&quot;">​</a></h4><p>使用 <code>pub</code> 关键字控制内容对于其所属模块外部代码的可见性。对于一个模块内部的代码，其默认对外不可见，但是对于该模块内部的同级内容可见。</p><p>如果是子模块 a，那么，哪怕模块 a 本身被 pub 修饰，子模块内部的代码页不会被兄弟模块 b 可见，兄弟模块 b 只是知道有这么个兄弟 a，而不知道 a 的内部有什么。</p><p>使用 <code>use</code> 关键字进行模块导入</p><ul><li><code>use foo;</code> 导入子模块 foo；</li><li><code>use foo::bar;</code> 导入子模块 foo 中的 bar，具体是什么不知道；</li><li><code>use foo::{bar1,bar2};</code> 导入子模块 foo 中的 bar1 和 bar2，具体是什么不知道；</li><li><code>use foo::*;</code> 导入子模块 foo 中的所有东西，具体是什么不知道；</li><li><code>use super::foo;</code> 导入兄弟模块 foo，即同目录下的 foo.rs 文件或者 foo/mod.rs 文件，或者是同文件中的 mod foo 声明；</li><li><code>use crate::foo;</code> 导入 src 目录下的文件，即 src/foo.rs 或者 src/foo/mod.rs 文件，或者 main.rs 中 mod foo 声明；</li></ul>`,88)]))}const u=s(n,[["render",l]]);export{c as __pageData,u as default};
