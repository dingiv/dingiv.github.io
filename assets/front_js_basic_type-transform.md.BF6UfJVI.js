import{_ as e,c as a,ae as i,o as r}from"./chunks/framework.BzDBnRMZ.js";const o="/assets/types-transform.DoZFzVlZ.png",c=JSON.parse('{"title":"隐式类型转换","description":"","frontmatter":{},"headers":[],"relativePath":"front/js/basic/type-transform.md","filePath":"front/js/basic/type-transform.md"}'),n={name:"front/js/basic/type-transform.md"};function l(s,t,p,f,m,u){return r(),a("div",null,t[0]||(t[0]=[i('<h1 id="隐式类型转换" tabindex="-1">隐式类型转换 <a class="header-anchor" href="#隐式类型转换" aria-label="Permalink to &quot;隐式类型转换&quot;">​</a></h1><p>7 种基本类型：boolean、number(0、NaN、Infinity)、string、bigint、symbol、undefined、null，前五个为实值，后两个为空值</p><h2 id="四种类型转换方法" tabindex="-1">四种类型转换方法 <a class="header-anchor" href="#四种类型转换方法" aria-label="Permalink to &quot;四种类型转换方法&quot;">​</a></h2><ol><li><p>toBoolean：</p><p>undefined、null、0、NaN、&#39;&#39;，会被转化为 false，其它为 true； 推荐触发：!()</p></li><li><p>toNumber：</p><p>undefined-&gt;NaN、null-&gt;0、NaN-&gt;NaN、Infinity-&gt;Infinity、&#39;&#39;-&gt;0、true-&gt;1、false-&gt;0、&#39;42&#39;-&gt;42(此处与 parseFloat 不同，字符串解析失败为 NaN) 推荐触发：+()</p></li><li><p>toString：</p><p>调用 toString()方法将任意一个值转换为 string， 推荐触发：()+&#39;&#39;</p></li><li><p>toPrimitive：（潜在）</p><p>先调用 valueOf()方法，如果得到了一个基本类型，则返回，否则调用 toString()，强制转换为 string 类型</p></li></ol><h2 id="隐式类型转换位置" tabindex="-1">隐式类型转换位置 <a class="header-anchor" href="#隐式类型转换位置" aria-label="Permalink to &quot;隐式类型转换位置&quot;">​</a></h2><ol><li>在一个需要单个 bool 值的地方，if()、while()、!()、for、&amp;&amp;、|| 等，发生 toBoolean 转换。</li><li>被 -、*、/ 单或双操作作用时，和 + 单操作作用时，（1）如果有引用类型则先发生 toPrimitive 转换；（2）而后发生 toNumber 转换。</li><li>被 + 双操作作用时，（1）如果有引用类型则进行 toPrimitive 转换；（2）如果其中一侧是 String 类型，那么另一侧就会发生 toString 转换；（3）否则，发生 toNumber 转换。</li><li>在 == 操作符作用时， （1）如果两侧为引用类型，则比较指针，指针相同返回 true，不同为 false。 （2）如果一侧为引用类型一侧为基本类型，则引用类型发生 toPrimitive 转换。 （3）如果若为不同类型，则将其中的实值进行 toNumber 转换。 （4）比较，实值实值直接比，实值比空值为 false，空值比空值为 true。 （注意：undefined==null 为 true，NaN==NaN 为 false）</li></ol><p><img src="'+o+'" alt="alt text"></p>',7)]))}const N=e(n,[["render",l]]);export{c as __pageData,N as default};
