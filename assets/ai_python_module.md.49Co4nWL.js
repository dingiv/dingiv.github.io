import{_ as a,c as i,o as n,ae as p}from"./chunks/framework.Dgg8-8ov.js";const c=JSON.parse('{"title":"模块系统","description":"","frontmatter":{},"headers":[],"relativePath":"ai/python/module.md","filePath":"ai/python/module.md"}'),t={name:"ai/python/module.md"};function l(e,s,h,k,d,o){return n(),i("div",null,s[0]||(s[0]=[p(`<h1 id="模块系统" tabindex="-1">模块系统 <a class="header-anchor" href="#模块系统" aria-label="Permalink to &quot;模块系统&quot;">​</a></h1><p>模块系统是现代语言的基本能力，提供了代码组织、封装、分享和复用的强大机制。</p><h2 id="模块层级" tabindex="-1">模块层级 <a class="header-anchor" href="#模块层级" aria-label="Permalink to &quot;模块层级&quot;">​</a></h2><p>python 模块（module）是一个包含 Python 代码（函数、类、变量等）的文件，通常以 .py 扩展名存储。模块允许将代码分解为逻辑单元，支持复用和命名空间隔离。文件名就是模块名。</p><p>python 包，多个模块可以组织成包（package），即包含 <code>__init__.py</code> 文件的目录。该文件就是这个包的入口文件，同时在该目录下的所有的文件或者模块构成了这个包。目录名就是包名。一个包内部可以继续包含文件夹，被看作是一个子包。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>project/</span></span>
<span class="line"><span>├── src/                    # 源码包 src</span></span>
<span class="line"><span>│   ├── __init__.py         # 源码包 src 的入口</span></span>
<span class="line"><span>│   ├── core/               # 核心包 core</span></span>
<span class="line"><span>│   │   ├── __init__.py</span></span>
<span class="line"><span>│   │   ├── database.py</span></span>
<span class="line"><span>│   │   ├── models.py</span></span>
<span class="line"><span>│   ├── utils/</span></span>
<span class="line"><span>│   │   ├── __init__.py</span></span>
<span class="line"><span>│   │   ├── logging.py</span></span>
<span class="line"><span>├── tests/</span></span>
<span class="line"><span>│   ├── test_database.py</span></span>
<span class="line"><span>├── main.py                 # 程序执行的入口</span></span>
<span class="line"><span>├── requirements.txt        # pip install 目录的安装列表，用于快速安装</span></span>
<span class="line"><span>├── pyproject.toml          # pip -m build 模块的打包逻辑，用于发布和构建 py 项目</span></span></code></pre></div><h2 id="模块导入" tabindex="-1">模块导入 <a class="header-anchor" href="#模块导入" aria-label="Permalink to &quot;模块导入&quot;">​</a></h2><p>python 库包括标准库和三方库，标准库在 python 解释器的文件夹中的 <code>Lib</code> 目录中，第三库位于 <code>Lib/site-packages</code> 目录下。</p><p>模块导入有两种方式，一个是绝对导入，一个是相对导入。绝对导入从 <strong>sys 模块中的 <code>sys.path</code> 变量</strong>中的路径进行导入。<code>sys.path</code> 该变量是一个字符串数组，保存着全局包的保存路径，默认的 <code>Lib</code> 和 <code>Lib/site-packages</code> 默认位于该变量中。更全面地，在该变量中包含，有顺序之分，排在前的优先级更高。</p><ol><li>当前程序执行的 cwd</li><li><code>PYTHONPATH</code> 环境变量中定义的路径</li><li>当前项目的虚拟环境中的 <code>Lib</code> 和 <code>Lib/site-packages</code></li><li>全局包路径 <code>Lib</code> 和 <code>Lib/site-packages</code></li></ol><p>相对导入以 <code>.</code> 开头路径使用相对路径，相对路径指的是<strong>相对于当前的执行脚本</strong>的路径。这个点和绝对导入的 cwd 不同，cwd 会因为程序的执行 cwd 而发生变化，这导致脚本依赖于特定的执行路径，而相对路径依赖的是脚本之间的相对位置。</p><div class="language-py vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">py</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 全局导入 math_utils</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> math_utils</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 简化引用</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> math_utils </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">as</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> mu</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 只导入所需内容</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> math_utils </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> add, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">PI</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 将 math_utils 中的所有符号，导入到当前脚本中的命名空间中</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> math_utils </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 相对导入</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> .dir1.mod1 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> add</span></span></code></pre></div><p>可以通过在执行 import 之前，修改 sys.path 的值，从而使得绝对导入可以导入自定义路径下的包。</p><div class="language-py vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">py</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> sys</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> os</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">sys.path.append(os.path.abspath(os.path.join(os.path.dirname(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">__file__</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">), </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;..&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)))</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 导入 custom_pkg</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> custom_pkg</span></span></code></pre></div><h2 id="虚拟环境-venv" tabindex="-1">虚拟环境 venv <a class="header-anchor" href="#虚拟环境-venv" aria-label="Permalink to &quot;虚拟环境 venv&quot;">​</a></h2><p>python 虚拟化环境是 python 标准库中自带的一个多项目环境隔离的能力，为了防止全局包的版本冲突问题，你可以选择在当个 python 项目中使用虚拟环境来进行开发，从而隔离同一个机器上的不同项目之间的第三包的版本不同问题，同时也可以让 python 项目的可迁移性变得更好。它就相当于一个全新的 python 解释器环境，但是其二进制共用本机上的原本 python 环境，但它包含自己独立的第三方包依赖。</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 执行模块 venv，参数为 .venv，这将在当前的目录下创建一个目录 .venv 作为一个虚拟环境</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">python</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -m</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> venv</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> .venv</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 在执行项目前，在当前的终端中使用“激活脚本”，从而使用该 venv</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">source</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> .venv/bin/activate</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 执行项目</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">python</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> main.py</span></span></code></pre></div><h2 id="打包" tabindex="-1">打包 <a class="header-anchor" href="#打包" aria-label="Permalink to &quot;打包&quot;">​</a></h2><p>打包是从开发环境部署到生产环境前的准备工作，或者将自己编写的包发布到远程的 pypi 服务器中。现代 Python 项目推荐使用 pyproject.toml（基于 PEP 517/518），它统一管理元数据、依赖和构建配置，支持多种后端（如 setuptools、flit、poetry）。</p><p>通过配置一个 <code>pyproject.toml</code> 文件，定义项目的依赖和数据，从而通过 <code>build</code> 模块进行打包和构建。构建完成后，在 dist 目录下将会出现一个压缩包，便是构建产物。</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 安装 build 构建模块</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">pip</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> build</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 启动 构建</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">python</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -m</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> build</span></span></code></pre></div><h3 id="二进制包" tabindex="-1">二进制包 <a class="header-anchor" href="#二进制包" aria-label="Permalink to &quot;二进制包&quot;">​</a></h3><p>使用 pyinstaller 可以将一个 python 项目打包成为一个可独立运行的二进制可执行文件，用户可以直接使用无需安装依赖，对于 toC 产品、网络不佳环境、不方便安装 python 环境的机器来说非常重要。</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">python</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -m</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> pip</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> pyinstaller</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">python</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -m</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> pip</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -r</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> requirements.txt</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">pyinstaller</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --onefile</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> main.py</span></span></code></pre></div>`,24)]))}const y=a(t,[["render",l]]);export{c as __pageData,y as default};
