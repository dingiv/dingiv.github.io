import{_ as d,c as e,o as r,ae as a}from"./chunks/framework.CBTkueSR.js";const p=JSON.parse('{"title":"渲染引擎","description":"","frontmatter":{"title":"渲染引擎","order":70},"headers":[],"relativePath":"client/render/index.md","filePath":"client/render/index.md"}'),n={name:"client/render/index.md"};function i(o,t,h,l,D,s){return r(),e("div",null,[...t[0]||(t[0]=[a('<h1 id="渲染引擎" tabindex="-1">渲染引擎 <a class="header-anchor" href="#渲染引擎" aria-label="Permalink to &quot;渲染引擎&quot;">​</a></h1><p>渲染引擎是根据<strong>高级语言的绘图指令</strong>和图形源数据计算生成<strong>屏幕显示所需要的像素颜色数据</strong>的核心组件。</p><p>现代 GUI 程序底层依赖于通用渲染引擎提供图形的绘制能力，以此向用户呈现 UI 界面。在高级渲染场景中，例如影视和游戏程序中，渲染引擎需要暴露更多的高级接口，使得用户可以实现高级渲染效果。</p><p>渲染引擎集成了计算机图形学的众多算法成果，以实现高效和美观的像素颜色计算，包括 2D 图形和 3D 场景的渲染计算；为了提高计算速度，渲染引擎往往会操作 GPU 完成加速计算；同时，为了实现跨平台的渲染能力，渲染引擎需要屏蔽不同操作系统平台上的视图系统的差异，参考：<a href="/kernel/linux/video/">linux 视图系统</a>。</p><h2 id="渲染管线" tabindex="-1">渲染管线 <a class="header-anchor" href="#渲染管线" aria-label="Permalink to &quot;渲染管线&quot;">​</a></h2><p>渲染引擎是在各个图形 API 所提供的渲染管线上工作的</p><h2 id="常见引擎" tabindex="-1">常见引擎 <a class="header-anchor" href="#常见引擎" aria-label="Permalink to &quot;常见引擎&quot;">​</a></h2><p>渲染引擎分为 2D 渲染引擎、3D 实时渲染引擎和 3D 非实时渲染引擎。</p><p>2D 图形和 3D 场景的渲染有着显著的差异，2D 图形的绘制可以直接基于一个有限大小的画布进行绘制，但是 3D 场景的渲染就要引入复杂计算机图形学理论，使用场景、灯光、相机等概念，将一个 3D 场景变成一张二维的图形。而且 2D 渲染一般使用简单的指令，3D 渲染往往需要使用 3D 模型作为输入，构建 3D 场景，其数据量陡然提升。</p><h3 id="_2d-渲染引擎" tabindex="-1">2D 渲染引擎 <a class="header-anchor" href="#_2d-渲染引擎" aria-label="Permalink to &quot;2D 渲染引擎&quot;">​</a></h3><table tabindex="0"><thead><tr><th>引擎名称</th><th>主要用途</th><th>代表作/应用</th><th>备注</th></tr></thead><tbody><tr><td>Skia</td><td>通用 2D 图形</td><td>Chrome, Flutter, Android</td><td>多后端，性能优异</td></tr><tr><td>Direct2D</td><td>Windows 原生 2D</td><td>Office, Edge, UWP</td><td>微软原生，集成度高</td></tr><tr><td>Core Graphics</td><td>macOS/iOS 原生 2D</td><td>Safari, Xcode, AppKit</td><td>苹果原生，集成度高</td></tr><tr><td>Blend2D</td><td>矢量图形</td><td>图形编辑器、嵌入式</td><td>高性能矢量，C++实现</td></tr><tr><td>AGG</td><td>高质量矢量</td><td>图形编辑器、嵌入式</td><td>软件渲染，抗锯齿</td></tr><tr><td>Pixman</td><td>像素图形</td><td>Cairo, X11, Wayland</td><td>linux 像素混合，底层库</td></tr><tr><td>Cocos2d/Cocos Creator</td><td>2D/轻量 3D 游戏</td><td>捕鱼达人，开心消消乐</td><td>中国流行，移动端友好</td></tr><tr><td>PixiJS</td><td>Web 2D 渲染</td><td>Web 动画、游戏</td><td>WebGL 高性能</td></tr><tr><td>libGDX</td><td>2D/3D 游戏框架</td><td>Slay the Spire</td><td>Java 开发，跨平台</td></tr><tr><td>RPG Maker</td><td>2D RPG</td><td>Yume Nikki, OneShot</td><td>专注 RPG，零编程门槛</td></tr><tr><td>Ren&#39;Py</td><td>视觉小说</td><td>Doki Doki Literature Club</td><td>Python 脚本，视觉小说专用</td></tr></tbody></table><h3 id="_3d-渲染引擎" tabindex="-1">3D 渲染引擎 <a class="header-anchor" href="#_3d-渲染引擎" aria-label="Permalink to &quot;3D 渲染引擎&quot;">​</a></h3><p>在 3D 引擎中又分为实时渲染引擎和非实时渲染引擎，前者强调在短时间内完成快速连续的渲染，帧率要求 60 FPS，以适应例如游戏在内的软件交互式需求，为了达到这个目标，实时渲染必须舍弃部分画面质量，从而换取更快的渲染速度；后者强调高质量和高保真的图形渲染，不必追求实时性，以获得极高的视觉效果，往往适合于电影和静态图片制作。</p><p>其实区分实时和非实时渲染的原因是在于当前的图形渲染技术还不够高效，或者是硬件条件还没有能够完整覆盖常见的渲染质量需求，人们不得不做出妥协，从而将有限的资源进行特化。</p><p>光线追踪技术是一项典型的高质量渲染技术，需要消耗大量的资源。一般地，实时渲染引擎支持有限的光线追踪功能，并使用近似光照进行尽可能地模拟；而非实时渲染引擎力求获得更高级的渲染效果，往往能够支持更加复杂和完善的光线追踪。</p><table tabindex="0"><thead><tr><th>引擎名称</th><th>主要用途</th><th>实时性</th><th>代表作/应用</th><th>备注</th></tr></thead><tbody><tr><td>Arnold</td><td>高质量渲染</td><td>否</td><td>3ds Max, Maya, 影视动画</td><td>光线追踪，电影级</td></tr><tr><td>Cycles</td><td>高质量渲染</td><td>否</td><td>Blender, Maya</td><td>Blender 内置，开源高质量</td></tr><tr><td>Unity</td><td>游戏/AR/VR</td><td>是</td><td>Ori, Cuphead, Genshin Impact</td><td>2D/3D 均支持，生态丰富</td></tr><tr><td>Unreal</td><td>高保真游戏/虚拟制作</td><td>是</td><td>Fortnite, 虚幻演播厅</td><td>Nanite, Lumen, 高端渲染</td></tr><tr><td>Godot</td><td>游戏</td><td>是</td><td>3D 独立游戏</td><td>2D/轻量 3D，社区活跃</td></tr><tr><td>CryEngine</td><td>高端游戏</td><td>是</td><td>Crysis, Hunt: Showdown</td><td>画质极高，VR 支持</td></tr><tr><td>Babylon.js/WebGL</td><td>Web 3D 渲染</td><td>是</td><td>Web3D 演示、游戏</td><td>JS/TS，WebGL 渲染</td></tr><tr><td>Three.js/WebGL</td><td>Web 3D 渲染</td><td>是</td><td>Web3D 演示、可视化</td><td>JS，WebGL 渲染</td></tr></tbody></table>',16)])])}const b=d(n,[["render",i]]);export{p as __pageData,b as default};
