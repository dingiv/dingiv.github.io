import{_ as a,c as e,o as r,ae as l}from"./chunks/framework.BtEkjhVd.js";const c=JSON.parse('{"title":"内存交换","description":"","frontmatter":{},"headers":[],"relativePath":"kernel/linux/mm/swap.md","filePath":"kernel/linux/mm/swap.md"}'),d={name:"kernel/linux/mm/swap.md"};function i(o,t,n,s,p,h){return r(),e("div",null,t[0]||(t[0]=[l('<h1 id="内存交换" tabindex="-1">内存交换 <a class="header-anchor" href="#内存交换" aria-label="Permalink to &quot;内存交换&quot;">​</a></h1><p>内存交换/页替换，为了实现内存超配，操作系统会在物理内存条的空间快不足够的时候，启用内存交换机制。该机制允许将部分进程占用的内存页持久化到硬盘上进行存储，从而让系统支持超过实际内存条空间的内存大小。</p><p>内存交换支持为一个硬盘指定一个专门的分区从而支持稳定的内存交换，也可以支持使用一个文件作为交换目标。</p><h2 id="主要流程" tabindex="-1">主要流程 <a class="header-anchor" href="#主要流程" aria-label="Permalink to &quot;主要流程&quot;">​</a></h2><ul><li>内存紧张，内核启动内存回收（kswapd）</li><li>找出不活跃页（例如长时间不用的数据）</li><li>将其写入 Swap 区（磁盘）</li><li>释放对应物理内存</li><li>如果页再次被访问，再从 Swap 中读回来（称为“页缺失”）</li></ul><h2 id="优势" tabindex="-1">优势 <a class="header-anchor" href="#优势" aria-label="Permalink to &quot;优势&quot;">​</a></h2><table tabindex="0"><thead><tr><th>优点</th><th>缺点</th></tr></thead><tbody><tr><td>保证系统在物理内存耗尽时仍可运行</td><td>磁盘速度远慢于内存，访问慢</td></tr><tr><td>避免 OOM（内存溢出）</td><td>频繁 Swap 会导致系统性能下降（Swap storm）</td></tr><tr><td>可作为系统缓冲空间</td><td>不适合高性能应用，延迟大</td></tr></tbody></table>',7)]))}const m=a(d,[["render",i]]);export{c as __pageData,m as default};
