import{_ as e,c as i,o as s,ae as t}from"./chunks/framework.CBTkueSR.js";const k=JSON.parse('{"title":"中断管理","description":"","frontmatter":{},"headers":[],"relativePath":"kernel/linux/irq/index.md","filePath":"kernel/linux/irq/index.md"}'),n={name:"kernel/linux/irq/index.md"};function r(l,a,h,p,o,d){return s(),i("div",null,[...a[0]||(a[0]=[t(`<h1 id="中断管理" tabindex="-1">中断管理 <a class="header-anchor" href="#中断管理" aria-label="Permalink to &quot;中断管理&quot;">​</a></h1><p>中断是实现硬件级从下而上通信的机制，利用中断可以实现：硬件反馈、系统调用、回调函数、自定义中断、信号中断、系统异常和错误等。</p><h2 id="基本机制" tabindex="-1">基本机制 <a class="header-anchor" href="#基本机制" aria-label="Permalink to &quot;基本机制&quot;">​</a></h2><p>中断一般由外围硬件在任意时刻触发。外设会向中断控制器发送中断电信号，然后中断控制器会将中断路由到特定的 CPU 核心，打断该 CPU 核心正在进行的工作，切换上下文去执行中断处理程序。</p><h2 id="中断上下文" tabindex="-1">中断上下文 <a class="header-anchor" href="#中断上下文" aria-label="Permalink to &quot;中断上下文&quot;">​</a></h2><p>中断上下文要求程序不可休眠（阻塞），不可执行耗时任务。</p><h2 id="中断处理函数的上下半" tabindex="-1">中断处理函数的上下半 <a class="header-anchor" href="#中断处理函数的上下半" aria-label="Permalink to &quot;中断处理函数的上下半&quot;">​</a></h2><p>linux 中的中断实现采用了上下半</p><h2 id="注册和注销中断处理函数" tabindex="-1">注册和注销中断处理函数 <a class="header-anchor" href="#注册和注销中断处理函数" aria-label="Permalink to &quot;注册和注销中断处理函数&quot;">​</a></h2><p>中断处理程序由驱动程序在初始化设备之后注册，并在卸载设备之前注销。</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> request_irq</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> free_irq</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span></code></pre></div><p>中断处理函数以异步的方式执行，并且会打断其他任务的执行，甚至是比较重要任务，为此，中断处理程序应当尽量的短而快，且不允许阻塞。</p><p>中断处理函数无须保证可重入，因为在同一条中断线上，同时只能运行一个中断处理程序；</p><p>共享中断类型</p>`,14)])])}const u=e(n,[["render",r]]);export{k as __pageData,u as default};
