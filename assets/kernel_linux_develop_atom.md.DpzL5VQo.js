import{_ as s,c as a,o as l,ae as n}from"./chunks/framework.Dgg8-8ov.js";const c=JSON.parse('{"title":"原子操作","description":"","frontmatter":{},"headers":[],"relativePath":"kernel/linux/develop/atom.md","filePath":"kernel/linux/develop/atom.md"}'),t={name:"kernel/linux/develop/atom.md"};function e(h,i,p,k,r,d){return l(),a("div",null,i[0]||(i[0]=[n(`<h1 id="原子操作" tabindex="-1">原子操作 <a class="header-anchor" href="#原子操作" aria-label="Permalink to &quot;原子操作&quot;">​</a></h1><p>原子操作（Atomic Operation）是指在多处理器或多线程环境下，不可被中断、不可分割的操作。即使有多个线程/CPU 并发执行，原子操作要么全部完成，要么全部不做，不会出现中间状态。</p><p>以最简单的多线程同时对同一个变量进行加 1 操作的例子为例</p><p><strong>原子变量</strong>是指支持原子操作的数据类型。对原子变量的读写、加减等操作在硬件或内核层面保证原子性，避免了竞态条件。</p><h3 id="为什么需要原子操作" tabindex="-1">为什么需要原子操作？ <a class="header-anchor" href="#为什么需要原子操作" aria-label="Permalink to &quot;为什么需要原子操作？&quot;">​</a></h3><p>在多核/多线程环境下，普通变量的操作（如 <code>a++</code>）实际上分为多步（读、加、写），可能被其他线程打断，导致数据竞争和不一致。原子操作可以保证这些操作的完整性，无需加锁即可安全并发访问。</p><hr><h2 id="二、原子指令" tabindex="-1">二、原子指令 <a class="header-anchor" href="#二、原子指令" aria-label="Permalink to &quot;二、原子指令&quot;">​</a></h2><p><strong>原子指令</strong>是 CPU 提供的、能够保证原子性的特殊指令。例如：</p><ul><li>x86 架构的 <code>LOCK</code> 前缀指令（如 <code>LOCK XADD</code>、<code>LOCK CMPXCHG</code>）</li><li>ARM 架构的 <code>LDREX/STREX</code>、<code>SWP</code> 等</li></ul><p>这些指令通常用于实现原子加减、原子交换、原子比较并交换（CAS, Compare-And-Swap）等操作，是无锁并发的基础。</p><hr><h2 id="三、linux-内核中的原子操作" tabindex="-1">三、Linux 内核中的原子操作 <a class="header-anchor" href="#三、linux-内核中的原子操作" aria-label="Permalink to &quot;三、Linux 内核中的原子操作&quot;">​</a></h2><p>Linux 内核为不同平台提供了统一的原子操作接口，常见的有：</p><ul><li><code>atomic_t</code>、<code>atomic64_t</code>：原子整型变量</li><li>常用操作函数： <ul><li><code>atomic_read()</code>、<code>atomic_set()</code></li><li><code>atomic_inc()</code>、<code>atomic_dec()</code>、<code>atomic_add()</code>、<code>atomic_sub()</code></li><li><code>atomic_cmpxchg()</code>（原子比较并交换，CAS）</li><li><code>atomic_xchg()</code>（原子交换）</li></ul></li></ul><h3 id="示例代码" tabindex="-1">示例代码 <a class="header-anchor" href="#示例代码" aria-label="Permalink to &quot;示例代码&quot;">​</a></h3><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#include</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &lt;linux/atomic.h&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">atomic_t</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> counter </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ATOMIC_INIT</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> example</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">void</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    atomic_inc</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">counter);</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // 原子加1</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> val </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> atomic_read</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">counter);</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // 原子读取</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    atomic_dec</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">counter);</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // 原子减1</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // CAS操作</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> old </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> atomic_cmpxchg</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">counter, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">10</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // 如果counter==5，则设为10</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><hr><h2 id="四、无锁并发-lock-free-concurrency" tabindex="-1">四、无锁并发（Lock-free Concurrency） <a class="header-anchor" href="#四、无锁并发-lock-free-concurrency" aria-label="Permalink to &quot;四、无锁并发（Lock-free Concurrency）&quot;">​</a></h2><p><strong>无锁并发</strong>是指在多线程环境下，不依赖传统的互斥锁（mutex、spinlock）来保证数据一致性，而是依靠原子操作和原子指令实现线程安全。其优点包括：</p><ul><li>避免死锁和优先级反转</li><li>提高并发性能，减少上下文切换</li><li>适合高性能、低延迟场景</li></ul><h3 id="常见无锁并发技术" tabindex="-1">常见无锁并发技术 <a class="header-anchor" href="#常见无锁并发技术" aria-label="Permalink to &quot;常见无锁并发技术&quot;">​</a></h3><ul><li><strong>CAS（Compare-And-Swap）</strong>：最常用的无锁原语，广泛用于实现无锁队列、无锁栈等数据结构。</li><li><strong>原子计数器</strong>：如引用计数、统计计数等。</li><li><strong>环形缓冲区、无锁队列</strong>：常用于内核、网络、日志等高并发场景。</li></ul><h3 id="简单无锁队列示例-伪代码" tabindex="-1">简单无锁队列示例（伪代码） <a class="header-anchor" href="#简单无锁队列示例-伪代码" aria-label="Permalink to &quot;简单无锁队列示例（伪代码）&quot;">​</a></h3><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 伪代码，仅示意</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">do</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    old_tail </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> queue-&gt;tail;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    new_tail </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> old_tail </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">} </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">while</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">atomic_cmpxchg</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">queue</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">tail</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, old_tail, new_tail));</span></span></code></pre></div><hr><h2 id="五、注意事项" tabindex="-1">五、注意事项 <a class="header-anchor" href="#五、注意事项" aria-label="Permalink to &quot;五、注意事项&quot;">​</a></h2><ul><li>原子操作适合简单数据类型（如整型），复杂结构体仍需加锁保护。</li><li>无锁并发虽然高效，但实现复杂，需谨慎设计，避免ABA问题等陷阱。</li><li>在 SMP（多核）系统下，原子操作通常伴随内存屏障（memory barrier）以保证可见性和有序性。</li></ul><hr><h2 id="参考" tabindex="-1">参考 <a class="header-anchor" href="#参考" aria-label="Permalink to &quot;参考&quot;">​</a></h2><ul><li><a href="https://www.kernel.org/doc/html/latest/core-api/atomic_ops.html" target="_blank" rel="noreferrer">Linux 内核文档：原子操作</a></li><li><a href="https://elixir.bootlin.com/linux/latest/source/include/linux/atomic.h" target="_blank" rel="noreferrer">Linux 源码 include/linux/atomic.h</a></li></ul><hr><p>如需补充更详细的代码示例、平台差异或深入原理，请告知！</p>`,33)]))}const E=s(t,[["render",e]]);export{c as __pageData,E as default};
