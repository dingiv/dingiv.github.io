import{_ as l,c as t,o as n,j as e,a as r}from"./chunks/framework.Dgg8-8ov.js";const m=JSON.parse('{"title":"多线程","description":"","frontmatter":{},"headers":[],"relativePath":"kernel/linux/develop/thread.md","filePath":"kernel/linux/develop/thread.md"}'),o={name:"kernel/linux/develop/thread.md"};function d(s,a,i,p,c,h){return n(),t("div",null,a[0]||(a[0]=[e("h1",{id:"多线程",tabindex:"-1"},[r("多线程 "),e("a",{class:"header-anchor",href:"#多线程","aria-label":'Permalink to "多线程"'},"​")],-1),e("p",null,"多线程并发编程是充分利用现代处理器性能的重要课题。",-1),e("p",null,"用户级线程，是指在应用程序中自行实现的调度，对每个可调度实体就是用户级的线程。一般普通的应用程序不会直接操作纤程，因为纤程的使用比较复杂，纤程的直接使用者往往是用户态的纤程库或者高级语言运行时。",-1),e("p",null,"纤程支持用户态程序自定义调度，不触发操作系统的纤程创建，从而节省系统开销。",-1),e("h2",{id:"用户态线程",tabindex:"-1"},[r("用户态线程 "),e("a",{class:"header-anchor",href:"#用户态线程","aria-label":'Permalink to "用户态线程"'},"​")],-1),e("p",null,"用户态线程（User-level Thread, ULT）是指完全由用户空间的线程库管理和调度的线程。与内核线程（Kernel-level Thread, KLT）不同，用户态线程的创建、销毁、同步和调度等操作都不需要内核的直接参与，因此具有更小的开销和更高的灵活性。用户态线程的切换只涉及用户空间的上下文切换，不会引发内核态的线程切换，因此速度更快。",-1),e("p",null,"常见的用户态线程库有：POSIX ucontext、GNU Pth、Go语言的Goroutine、Python的greenlet等。用户态线程适合于大量并发、轻量级任务的场景，但由于内核并不感知用户态线程的存在，所以当一个用户态线程阻塞（如I/O操作）时，整个进程都会被阻塞，无法充分利用多核CPU资源。",-1)]))}const f=l(o,[["render",d]]);export{m as __pageData,f as default};
