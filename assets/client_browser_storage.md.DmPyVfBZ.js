import{_ as a,c as l,o as i,ae as o}from"./chunks/framework.Dgg8-8ov.js";const b=JSON.parse('{"title":"存储","description":"","frontmatter":{},"headers":[],"relativePath":"client/browser/storage.md","filePath":"client/browser/storage.md"}'),t={name:"client/browser/storage.md"};function r(s,e,n,d,c,h){return i(),l("div",null,e[0]||(e[0]=[o('<h1 id="存储" tabindex="-1">存储 <a class="header-anchor" href="#存储" aria-label="Permalink to &quot;存储&quot;">​</a></h1><h2 id="浏览器存储" tabindex="-1">浏览器存储 <a class="header-anchor" href="#浏览器存储" aria-label="Permalink to &quot;浏览器存储&quot;">​</a></h2><p>浏览器提供了多种存储机制，用于在客户端保存数据。</p><h3 id="cookie" tabindex="-1">Cookie <a class="header-anchor" href="#cookie" aria-label="Permalink to &quot;Cookie&quot;">​</a></h3><ul><li>最早的浏览器存储机制</li><li>容量限制：通常为4KB</li><li>会随HTTP请求一起发送</li><li>可设置过期时间、域名范围等</li><li>通过设置HttpOnly和Secure提高安全性</li></ul><h3 id="localstorage" tabindex="-1">LocalStorage <a class="header-anchor" href="#localstorage" aria-label="Permalink to &quot;LocalStorage&quot;">​</a></h3><ul><li>永久存储机制，除非手动清除</li><li>容量限制：通常为5MB</li><li>不会随HTTP请求发送</li><li>仅支持字符串存储</li><li>同源访问限制</li></ul><h3 id="sessionstorage" tabindex="-1">SessionStorage <a class="header-anchor" href="#sessionstorage" aria-label="Permalink to &quot;SessionStorage&quot;">​</a></h3><ul><li>会话级存储，关闭标签页后清除</li><li>容量限制：通常为5MB</li><li>不会随HTTP请求发送</li><li>仅支持字符串存储</li><li>同源且同标签页访问限制</li></ul><h3 id="indexeddb" tabindex="-1">IndexedDB <a class="header-anchor" href="#indexeddb" aria-label="Permalink to &quot;IndexedDB&quot;">​</a></h3><ul><li>结构化存储机制，支持复杂数据类型</li><li>容量大，通常&gt;50MB</li><li>异步API，不阻塞主线程</li><li>支持事务和索引</li><li>同源访问限制</li></ul><h3 id="web-storage-api" tabindex="-1">Web Storage API <a class="header-anchor" href="#web-storage-api" aria-label="Permalink to &quot;Web Storage API&quot;">​</a></h3><ul><li>localStorage和sessionStorage的统一接口</li><li>提供setItem、getItem、removeItem、clear等方法</li><li>支持storage事件监听变化</li></ul>',13)]))}const g=a(t,[["render",r]]);export{b as __pageData,g as default};
