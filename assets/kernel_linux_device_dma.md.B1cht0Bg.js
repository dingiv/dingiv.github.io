import{_ as i,c as e,o as a,ae as t}from"./chunks/framework.Dgg8-8ov.js";const m=JSON.parse('{"title":"可编程 IO/DMA","description":"","frontmatter":{},"headers":[],"relativePath":"kernel/linux/device/dma.md","filePath":"kernel/linux/device/dma.md"}'),r={name:"kernel/linux/device/dma.md"};function o(n,l,d,u,p,M){return a(),e("div",null,l[0]||(l[0]=[t('<h1 id="可编程-io-dma" tabindex="-1">可编程 IO/DMA <a class="header-anchor" href="#可编程-io-dma" aria-label="Permalink to &quot;可编程 IO/DMA&quot;">​</a></h1><p>根据数据传输过程是否需要 CPU 参与，IO 分为两类：</p><ol><li><p>可编程 IO</p><ul><li>操作系统通过读写 IO 设备寄存器控制设备</li><li>分为两种类型： <ul><li>PMIO（Port-Mapped Input/Output）：通过访问 IO 端口控制设备</li><li>MMIO（Memory-Mapped Input/Output）：设备寄存器和缓冲区映射到物理内存中</li></ul></li></ul></li><li><p>DMA（Direct Memory Access）</p><ul><li>外设与内存之间交换数据的接口技术</li><li>数据传输过程无须 CPU 控制</li><li>数据拷贝和搬运由外设专用处理器完成</li><li>操作系统通过驱动程序提前告知外设数据拷贝位置</li><li>外设直接访问内存，将数据放到指定位置</li><li>完成后发起中断通知 CPU</li></ul></li></ol><h3 id="iommu" tabindex="-1">IOMMU <a class="header-anchor" href="#iommu" aria-label="Permalink to &quot;IOMMU&quot;">​</a></h3><p>IOMMU（IO 设备内存空间管理单元）：</p><ul><li>在一些硬件平台上支持 IOMMU 技术</li><li>添加 IOMMU 单元，在 CPU 访问物理内存地址时添加类似 MMU 的内存虚拟技术</li><li>针对 IO 设备</li><li>通常伴随 DMA 一同出现</li></ul>',6)]))}const s=i(r,[["render",o]]);export{m as __pageData,s as default};
